
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ArticleCategory
 * 
 */
export type ArticleCategory = $Result.DefaultSelection<Prisma.$ArticleCategoryPayload>
/**
 * Model ArticleSubCategory
 * 
 */
export type ArticleSubCategory = $Result.DefaultSelection<Prisma.$ArticleSubCategoryPayload>
/**
 * Model Article
 * 
 */
export type Article = $Result.DefaultSelection<Prisma.$ArticlePayload>
/**
 * Model banners
 * 
 */
export type banners = $Result.DefaultSelection<Prisma.$bannersPayload>
/**
 * Model course
 * 
 */
export type course = $Result.DefaultSelection<Prisma.$coursePayload>
/**
 * Model courseintent
 * 
 */
export type courseintent = $Result.DefaultSelection<Prisma.$courseintentPayload>
/**
 * Model discount_code
 * 
 */
export type discount_code = $Result.DefaultSelection<Prisma.$discount_codePayload>
/**
 * Model order
 * 
 */
export type order = $Result.DefaultSelection<Prisma.$orderPayload>
/**
 * Model orderitem
 * 
 */
export type orderitem = $Result.DefaultSelection<Prisma.$orderitemPayload>
/**
 * Model product
 * 
 */
export type product = $Result.DefaultSelection<Prisma.$productPayload>
/**
 * Model product_category
 * 
 */
export type product_category = $Result.DefaultSelection<Prisma.$product_categoryPayload>
/**
 * Model product_subcategory
 * 
 */
export type product_subcategory = $Result.DefaultSelection<Prisma.$product_subcategoryPayload>
/**
 * Model productvariant
 * 
 */
export type productvariant = $Result.DefaultSelection<Prisma.$productvariantPayload>
/**
 * Model news
 * 
 */
export type news = $Result.DefaultSelection<Prisma.$newsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const order_shippingMethod: {
  home: 'home',
  pickup: 'pickup'
};

export type order_shippingMethod = (typeof order_shippingMethod)[keyof typeof order_shippingMethod]


export const order_status: {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type order_status = (typeof order_status)[keyof typeof order_status]


export const order_paymentMethod: {
  ECPAY_CREDIT: 'ECPAY_CREDIT',
  TAPPAY_CREDIT: 'TAPPAY_CREDIT',
  CASH: 'CASH'
};

export type order_paymentMethod = (typeof order_paymentMethod)[keyof typeof order_paymentMethod]


export const banners_fontColor: {
  light: 'light',
  dark: 'dark'
};

export type banners_fontColor = (typeof banners_fontColor)[keyof typeof banners_fontColor]

}

export type order_shippingMethod = $Enums.order_shippingMethod

export const order_shippingMethod: typeof $Enums.order_shippingMethod

export type order_status = $Enums.order_status

export const order_status: typeof $Enums.order_status

export type order_paymentMethod = $Enums.order_paymentMethod

export const order_paymentMethod: typeof $Enums.order_paymentMethod

export type banners_fontColor = $Enums.banners_fontColor

export const banners_fontColor: typeof $Enums.banners_fontColor

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ArticleCategories
 * const articleCategories = await prisma.articleCategory.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ArticleCategories
   * const articleCategories = await prisma.articleCategory.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.articleCategory`: Exposes CRUD operations for the **ArticleCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArticleCategories
    * const articleCategories = await prisma.articleCategory.findMany()
    * ```
    */
  get articleCategory(): Prisma.ArticleCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.articleSubCategory`: Exposes CRUD operations for the **ArticleSubCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArticleSubCategories
    * const articleSubCategories = await prisma.articleSubCategory.findMany()
    * ```
    */
  get articleSubCategory(): Prisma.ArticleSubCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **Article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.ArticleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.banners`: Exposes CRUD operations for the **banners** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banners
    * const banners = await prisma.banners.findMany()
    * ```
    */
  get banners(): Prisma.bannersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.courseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseintent`: Exposes CRUD operations for the **courseintent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courseintents
    * const courseintents = await prisma.courseintent.findMany()
    * ```
    */
  get courseintent(): Prisma.courseintentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discount_code`: Exposes CRUD operations for the **discount_code** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discount_codes
    * const discount_codes = await prisma.discount_code.findMany()
    * ```
    */
  get discount_code(): Prisma.discount_codeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.orderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderitem`: Exposes CRUD operations for the **orderitem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orderitems
    * const orderitems = await prisma.orderitem.findMany()
    * ```
    */
  get orderitem(): Prisma.orderitemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product_category`: Exposes CRUD operations for the **product_category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_categories
    * const product_categories = await prisma.product_category.findMany()
    * ```
    */
  get product_category(): Prisma.product_categoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product_subcategory`: Exposes CRUD operations for the **product_subcategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_subcategories
    * const product_subcategories = await prisma.product_subcategory.findMany()
    * ```
    */
  get product_subcategory(): Prisma.product_subcategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productvariant`: Exposes CRUD operations for the **productvariant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productvariants
    * const productvariants = await prisma.productvariant.findMany()
    * ```
    */
  get productvariant(): Prisma.productvariantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.news`: Exposes CRUD operations for the **news** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more News
    * const news = await prisma.news.findMany()
    * ```
    */
  get news(): Prisma.newsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ArticleCategory: 'ArticleCategory',
    ArticleSubCategory: 'ArticleSubCategory',
    Article: 'Article',
    banners: 'banners',
    course: 'course',
    courseintent: 'courseintent',
    discount_code: 'discount_code',
    order: 'order',
    orderitem: 'orderitem',
    product: 'product',
    product_category: 'product_category',
    product_subcategory: 'product_subcategory',
    productvariant: 'productvariant',
    news: 'news'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "articleCategory" | "articleSubCategory" | "article" | "banners" | "course" | "courseintent" | "discount_code" | "order" | "orderitem" | "product" | "product_category" | "product_subcategory" | "productvariant" | "news"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ArticleCategory: {
        payload: Prisma.$ArticleCategoryPayload<ExtArgs>
        fields: Prisma.ArticleCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArticleCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArticleCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleCategoryPayload>
          }
          findFirst: {
            args: Prisma.ArticleCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArticleCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleCategoryPayload>
          }
          findMany: {
            args: Prisma.ArticleCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleCategoryPayload>[]
          }
          create: {
            args: Prisma.ArticleCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleCategoryPayload>
          }
          createMany: {
            args: Prisma.ArticleCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArticleCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleCategoryPayload>
          }
          update: {
            args: Prisma.ArticleCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ArticleCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArticleCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArticleCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleCategoryPayload>
          }
          aggregate: {
            args: Prisma.ArticleCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArticleCategory>
          }
          groupBy: {
            args: Prisma.ArticleCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArticleCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArticleCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ArticleCategoryCountAggregateOutputType> | number
          }
        }
      }
      ArticleSubCategory: {
        payload: Prisma.$ArticleSubCategoryPayload<ExtArgs>
        fields: Prisma.ArticleSubCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArticleSubCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleSubCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArticleSubCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleSubCategoryPayload>
          }
          findFirst: {
            args: Prisma.ArticleSubCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleSubCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArticleSubCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleSubCategoryPayload>
          }
          findMany: {
            args: Prisma.ArticleSubCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleSubCategoryPayload>[]
          }
          create: {
            args: Prisma.ArticleSubCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleSubCategoryPayload>
          }
          createMany: {
            args: Prisma.ArticleSubCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArticleSubCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleSubCategoryPayload>
          }
          update: {
            args: Prisma.ArticleSubCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleSubCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ArticleSubCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArticleSubCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArticleSubCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticleSubCategoryPayload>
          }
          aggregate: {
            args: Prisma.ArticleSubCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArticleSubCategory>
          }
          groupBy: {
            args: Prisma.ArticleSubCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArticleSubCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArticleSubCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ArticleSubCategoryCountAggregateOutputType> | number
          }
        }
      }
      Article: {
        payload: Prisma.$ArticlePayload<ExtArgs>
        fields: Prisma.ArticleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArticleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArticleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          findFirst: {
            args: Prisma.ArticleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArticleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          findMany: {
            args: Prisma.ArticleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>[]
          }
          create: {
            args: Prisma.ArticleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          createMany: {
            args: Prisma.ArticleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArticleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          update: {
            args: Prisma.ArticleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          deleteMany: {
            args: Prisma.ArticleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArticleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArticleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          aggregate: {
            args: Prisma.ArticleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArticle>
          }
          groupBy: {
            args: Prisma.ArticleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArticleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArticleCountArgs<ExtArgs>
            result: $Utils.Optional<ArticleCountAggregateOutputType> | number
          }
        }
      }
      banners: {
        payload: Prisma.$bannersPayload<ExtArgs>
        fields: Prisma.bannersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bannersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bannersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          findFirst: {
            args: Prisma.bannersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bannersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          findMany: {
            args: Prisma.bannersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>[]
          }
          create: {
            args: Prisma.bannersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          createMany: {
            args: Prisma.bannersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.bannersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          update: {
            args: Prisma.bannersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          deleteMany: {
            args: Prisma.bannersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bannersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.bannersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          aggregate: {
            args: Prisma.BannersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBanners>
          }
          groupBy: {
            args: Prisma.bannersGroupByArgs<ExtArgs>
            result: $Utils.Optional<BannersGroupByOutputType>[]
          }
          count: {
            args: Prisma.bannersCountArgs<ExtArgs>
            result: $Utils.Optional<BannersCountAggregateOutputType> | number
          }
        }
      }
      course: {
        payload: Prisma.$coursePayload<ExtArgs>
        fields: Prisma.courseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.courseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.courseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursePayload>
          }
          findFirst: {
            args: Prisma.courseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.courseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursePayload>
          }
          findMany: {
            args: Prisma.courseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursePayload>[]
          }
          create: {
            args: Prisma.courseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursePayload>
          }
          createMany: {
            args: Prisma.courseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.courseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursePayload>
          }
          update: {
            args: Prisma.courseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursePayload>
          }
          deleteMany: {
            args: Prisma.courseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.courseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.courseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.courseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.courseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      courseintent: {
        payload: Prisma.$courseintentPayload<ExtArgs>
        fields: Prisma.courseintentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.courseintentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$courseintentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.courseintentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$courseintentPayload>
          }
          findFirst: {
            args: Prisma.courseintentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$courseintentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.courseintentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$courseintentPayload>
          }
          findMany: {
            args: Prisma.courseintentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$courseintentPayload>[]
          }
          create: {
            args: Prisma.courseintentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$courseintentPayload>
          }
          createMany: {
            args: Prisma.courseintentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.courseintentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$courseintentPayload>
          }
          update: {
            args: Prisma.courseintentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$courseintentPayload>
          }
          deleteMany: {
            args: Prisma.courseintentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.courseintentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.courseintentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$courseintentPayload>
          }
          aggregate: {
            args: Prisma.CourseintentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseintent>
          }
          groupBy: {
            args: Prisma.courseintentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseintentGroupByOutputType>[]
          }
          count: {
            args: Prisma.courseintentCountArgs<ExtArgs>
            result: $Utils.Optional<CourseintentCountAggregateOutputType> | number
          }
        }
      }
      discount_code: {
        payload: Prisma.$discount_codePayload<ExtArgs>
        fields: Prisma.discount_codeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.discount_codeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discount_codePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.discount_codeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discount_codePayload>
          }
          findFirst: {
            args: Prisma.discount_codeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discount_codePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.discount_codeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discount_codePayload>
          }
          findMany: {
            args: Prisma.discount_codeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discount_codePayload>[]
          }
          create: {
            args: Prisma.discount_codeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discount_codePayload>
          }
          createMany: {
            args: Prisma.discount_codeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.discount_codeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discount_codePayload>
          }
          update: {
            args: Prisma.discount_codeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discount_codePayload>
          }
          deleteMany: {
            args: Prisma.discount_codeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.discount_codeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.discount_codeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discount_codePayload>
          }
          aggregate: {
            args: Prisma.Discount_codeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscount_code>
          }
          groupBy: {
            args: Prisma.discount_codeGroupByArgs<ExtArgs>
            result: $Utils.Optional<Discount_codeGroupByOutputType>[]
          }
          count: {
            args: Prisma.discount_codeCountArgs<ExtArgs>
            result: $Utils.Optional<Discount_codeCountAggregateOutputType> | number
          }
        }
      }
      order: {
        payload: Prisma.$orderPayload<ExtArgs>
        fields: Prisma.orderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          findFirst: {
            args: Prisma.orderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          findMany: {
            args: Prisma.orderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>[]
          }
          create: {
            args: Prisma.orderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          createMany: {
            args: Prisma.orderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.orderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          update: {
            args: Prisma.orderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          deleteMany: {
            args: Prisma.orderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.orderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.orderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.orderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.orderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      orderitem: {
        payload: Prisma.$orderitemPayload<ExtArgs>
        fields: Prisma.orderitemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orderitemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderitemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orderitemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderitemPayload>
          }
          findFirst: {
            args: Prisma.orderitemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderitemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orderitemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderitemPayload>
          }
          findMany: {
            args: Prisma.orderitemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderitemPayload>[]
          }
          create: {
            args: Prisma.orderitemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderitemPayload>
          }
          createMany: {
            args: Prisma.orderitemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.orderitemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderitemPayload>
          }
          update: {
            args: Prisma.orderitemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderitemPayload>
          }
          deleteMany: {
            args: Prisma.orderitemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.orderitemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.orderitemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderitemPayload>
          }
          aggregate: {
            args: Prisma.OrderitemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderitem>
          }
          groupBy: {
            args: Prisma.orderitemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderitemGroupByOutputType>[]
          }
          count: {
            args: Prisma.orderitemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderitemCountAggregateOutputType> | number
          }
        }
      }
      product: {
        payload: Prisma.$productPayload<ExtArgs>
        fields: Prisma.productFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findFirst: {
            args: Prisma.productFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findMany: {
            args: Prisma.productFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>[]
          }
          create: {
            args: Prisma.productCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          createMany: {
            args: Prisma.productCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.productDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          update: {
            args: Prisma.productUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          deleteMany: {
            args: Prisma.productDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.productUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.productGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.productCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      product_category: {
        payload: Prisma.$product_categoryPayload<ExtArgs>
        fields: Prisma.product_categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          findFirst: {
            args: Prisma.product_categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          findMany: {
            args: Prisma.product_categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>[]
          }
          create: {
            args: Prisma.product_categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          createMany: {
            args: Prisma.product_categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.product_categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          update: {
            args: Prisma.product_categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          deleteMany: {
            args: Prisma.product_categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.product_categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.product_categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          aggregate: {
            args: Prisma.Product_categoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct_category>
          }
          groupBy: {
            args: Prisma.product_categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<Product_categoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_categoryCountArgs<ExtArgs>
            result: $Utils.Optional<Product_categoryCountAggregateOutputType> | number
          }
        }
      }
      product_subcategory: {
        payload: Prisma.$product_subcategoryPayload<ExtArgs>
        fields: Prisma.product_subcategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_subcategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_subcategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_subcategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_subcategoryPayload>
          }
          findFirst: {
            args: Prisma.product_subcategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_subcategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_subcategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_subcategoryPayload>
          }
          findMany: {
            args: Prisma.product_subcategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_subcategoryPayload>[]
          }
          create: {
            args: Prisma.product_subcategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_subcategoryPayload>
          }
          createMany: {
            args: Prisma.product_subcategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.product_subcategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_subcategoryPayload>
          }
          update: {
            args: Prisma.product_subcategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_subcategoryPayload>
          }
          deleteMany: {
            args: Prisma.product_subcategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.product_subcategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.product_subcategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_subcategoryPayload>
          }
          aggregate: {
            args: Prisma.Product_subcategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct_subcategory>
          }
          groupBy: {
            args: Prisma.product_subcategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<Product_subcategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_subcategoryCountArgs<ExtArgs>
            result: $Utils.Optional<Product_subcategoryCountAggregateOutputType> | number
          }
        }
      }
      productvariant: {
        payload: Prisma.$productvariantPayload<ExtArgs>
        fields: Prisma.productvariantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productvariantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productvariantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productvariantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productvariantPayload>
          }
          findFirst: {
            args: Prisma.productvariantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productvariantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productvariantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productvariantPayload>
          }
          findMany: {
            args: Prisma.productvariantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productvariantPayload>[]
          }
          create: {
            args: Prisma.productvariantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productvariantPayload>
          }
          createMany: {
            args: Prisma.productvariantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.productvariantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productvariantPayload>
          }
          update: {
            args: Prisma.productvariantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productvariantPayload>
          }
          deleteMany: {
            args: Prisma.productvariantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productvariantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.productvariantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productvariantPayload>
          }
          aggregate: {
            args: Prisma.ProductvariantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductvariant>
          }
          groupBy: {
            args: Prisma.productvariantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductvariantGroupByOutputType>[]
          }
          count: {
            args: Prisma.productvariantCountArgs<ExtArgs>
            result: $Utils.Optional<ProductvariantCountAggregateOutputType> | number
          }
        }
      }
      news: {
        payload: Prisma.$newsPayload<ExtArgs>
        fields: Prisma.newsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.newsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.newsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsPayload>
          }
          findFirst: {
            args: Prisma.newsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.newsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsPayload>
          }
          findMany: {
            args: Prisma.newsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsPayload>[]
          }
          create: {
            args: Prisma.newsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsPayload>
          }
          createMany: {
            args: Prisma.newsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.newsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsPayload>
          }
          update: {
            args: Prisma.newsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsPayload>
          }
          deleteMany: {
            args: Prisma.newsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.newsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.newsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsPayload>
          }
          aggregate: {
            args: Prisma.NewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNews>
          }
          groupBy: {
            args: Prisma.newsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.newsCountArgs<ExtArgs>
            result: $Utils.Optional<NewsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    articleCategory?: ArticleCategoryOmit
    articleSubCategory?: ArticleSubCategoryOmit
    article?: ArticleOmit
    banners?: bannersOmit
    course?: courseOmit
    courseintent?: courseintentOmit
    discount_code?: discount_codeOmit
    order?: orderOmit
    orderitem?: orderitemOmit
    product?: productOmit
    product_category?: product_categoryOmit
    product_subcategory?: product_subcategoryOmit
    productvariant?: productvariantOmit
    news?: newsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ArticleCategoryCountOutputType
   */

  export type ArticleCategoryCountOutputType = {
    subcategories: number
    articles: number
  }

  export type ArticleCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subcategories?: boolean | ArticleCategoryCountOutputTypeCountSubcategoriesArgs
    articles?: boolean | ArticleCategoryCountOutputTypeCountArticlesArgs
  }

  // Custom InputTypes
  /**
   * ArticleCategoryCountOutputType without action
   */
  export type ArticleCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategoryCountOutputType
     */
    select?: ArticleCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArticleCategoryCountOutputType without action
   */
  export type ArticleCategoryCountOutputTypeCountSubcategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleSubCategoryWhereInput
  }

  /**
   * ArticleCategoryCountOutputType without action
   */
  export type ArticleCategoryCountOutputTypeCountArticlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleWhereInput
  }


  /**
   * Count Type ArticleSubCategoryCountOutputType
   */

  export type ArticleSubCategoryCountOutputType = {
    articles: number
  }

  export type ArticleSubCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    articles?: boolean | ArticleSubCategoryCountOutputTypeCountArticlesArgs
  }

  // Custom InputTypes
  /**
   * ArticleSubCategoryCountOutputType without action
   */
  export type ArticleSubCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategoryCountOutputType
     */
    select?: ArticleSubCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArticleSubCategoryCountOutputType without action
   */
  export type ArticleSubCategoryCountOutputTypeCountArticlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    courseintent: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courseintent?: boolean | CourseCountOutputTypeCountCourseintentArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCourseintentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: courseintentWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderitem: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderitem?: boolean | OrderCountOutputTypeCountOrderitemArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderitemWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    orderitem: number
    productvariant: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderitem?: boolean | ProductCountOutputTypeCountOrderitemArgs
    productvariant?: boolean | ProductCountOutputTypeCountProductvariantArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderitemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductvariantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productvariantWhereInput
  }


  /**
   * Count Type Product_categoryCountOutputType
   */

  export type Product_categoryCountOutputType = {
    products: number
    subcategories: number
  }

  export type Product_categoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Product_categoryCountOutputTypeCountProductsArgs
    subcategories?: boolean | Product_categoryCountOutputTypeCountSubcategoriesArgs
  }

  // Custom InputTypes
  /**
   * Product_categoryCountOutputType without action
   */
  export type Product_categoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_categoryCountOutputType
     */
    select?: Product_categoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Product_categoryCountOutputType without action
   */
  export type Product_categoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
  }

  /**
   * Product_categoryCountOutputType without action
   */
  export type Product_categoryCountOutputTypeCountSubcategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_subcategoryWhereInput
  }


  /**
   * Count Type Product_subcategoryCountOutputType
   */

  export type Product_subcategoryCountOutputType = {
    products: number
  }

  export type Product_subcategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Product_subcategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * Product_subcategoryCountOutputType without action
   */
  export type Product_subcategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_subcategoryCountOutputType
     */
    select?: Product_subcategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Product_subcategoryCountOutputType without action
   */
  export type Product_subcategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
  }


  /**
   * Count Type ProductvariantCountOutputType
   */

  export type ProductvariantCountOutputType = {
    orderitem: number
  }

  export type ProductvariantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderitem?: boolean | ProductvariantCountOutputTypeCountOrderitemArgs
  }

  // Custom InputTypes
  /**
   * ProductvariantCountOutputType without action
   */
  export type ProductvariantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductvariantCountOutputType
     */
    select?: ProductvariantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductvariantCountOutputType without action
   */
  export type ProductvariantCountOutputTypeCountOrderitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderitemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ArticleCategory
   */

  export type AggregateArticleCategory = {
    _count: ArticleCategoryCountAggregateOutputType | null
    _avg: ArticleCategoryAvgAggregateOutputType | null
    _sum: ArticleCategorySumAggregateOutputType | null
    _min: ArticleCategoryMinAggregateOutputType | null
    _max: ArticleCategoryMaxAggregateOutputType | null
  }

  export type ArticleCategoryAvgAggregateOutputType = {
    id: number | null
    orderIndex: number | null
  }

  export type ArticleCategorySumAggregateOutputType = {
    id: number | null
    orderIndex: number | null
  }

  export type ArticleCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    orderIndex: number | null
  }

  export type ArticleCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    orderIndex: number | null
  }

  export type ArticleCategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    orderIndex: number
    _all: number
  }


  export type ArticleCategoryAvgAggregateInputType = {
    id?: true
    orderIndex?: true
  }

  export type ArticleCategorySumAggregateInputType = {
    id?: true
    orderIndex?: true
  }

  export type ArticleCategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    orderIndex?: true
  }

  export type ArticleCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    orderIndex?: true
  }

  export type ArticleCategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    orderIndex?: true
    _all?: true
  }

  export type ArticleCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArticleCategory to aggregate.
     */
    where?: ArticleCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArticleCategories to fetch.
     */
    orderBy?: ArticleCategoryOrderByWithRelationInput | ArticleCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArticleCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArticleCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArticleCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArticleCategories
    **/
    _count?: true | ArticleCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArticleCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArticleCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleCategoryMaxAggregateInputType
  }

  export type GetArticleCategoryAggregateType<T extends ArticleCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateArticleCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticleCategory[P]>
      : GetScalarType<T[P], AggregateArticleCategory[P]>
  }




  export type ArticleCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleCategoryWhereInput
    orderBy?: ArticleCategoryOrderByWithAggregationInput | ArticleCategoryOrderByWithAggregationInput[]
    by: ArticleCategoryScalarFieldEnum[] | ArticleCategoryScalarFieldEnum
    having?: ArticleCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCategoryCountAggregateInputType | true
    _avg?: ArticleCategoryAvgAggregateInputType
    _sum?: ArticleCategorySumAggregateInputType
    _min?: ArticleCategoryMinAggregateInputType
    _max?: ArticleCategoryMaxAggregateInputType
  }

  export type ArticleCategoryGroupByOutputType = {
    id: number
    name: string
    slug: string
    orderIndex: number
    _count: ArticleCategoryCountAggregateOutputType | null
    _avg: ArticleCategoryAvgAggregateOutputType | null
    _sum: ArticleCategorySumAggregateOutputType | null
    _min: ArticleCategoryMinAggregateOutputType | null
    _max: ArticleCategoryMaxAggregateOutputType | null
  }

  type GetArticleCategoryGroupByPayload<T extends ArticleCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArticleCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ArticleCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    orderIndex?: boolean
    subcategories?: boolean | ArticleCategory$subcategoriesArgs<ExtArgs>
    articles?: boolean | ArticleCategory$articlesArgs<ExtArgs>
    _count?: boolean | ArticleCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["articleCategory"]>



  export type ArticleCategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    orderIndex?: boolean
  }

  export type ArticleCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "orderIndex", ExtArgs["result"]["articleCategory"]>
  export type ArticleCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subcategories?: boolean | ArticleCategory$subcategoriesArgs<ExtArgs>
    articles?: boolean | ArticleCategory$articlesArgs<ExtArgs>
    _count?: boolean | ArticleCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArticleCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArticleCategory"
    objects: {
      subcategories: Prisma.$ArticleSubCategoryPayload<ExtArgs>[]
      articles: Prisma.$ArticlePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      orderIndex: number
    }, ExtArgs["result"]["articleCategory"]>
    composites: {}
  }

  type ArticleCategoryGetPayload<S extends boolean | null | undefined | ArticleCategoryDefaultArgs> = $Result.GetResult<Prisma.$ArticleCategoryPayload, S>

  type ArticleCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArticleCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArticleCategoryCountAggregateInputType | true
    }

  export interface ArticleCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArticleCategory'], meta: { name: 'ArticleCategory' } }
    /**
     * Find zero or one ArticleCategory that matches the filter.
     * @param {ArticleCategoryFindUniqueArgs} args - Arguments to find a ArticleCategory
     * @example
     * // Get one ArticleCategory
     * const articleCategory = await prisma.articleCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArticleCategoryFindUniqueArgs>(args: SelectSubset<T, ArticleCategoryFindUniqueArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ArticleCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArticleCategoryFindUniqueOrThrowArgs} args - Arguments to find a ArticleCategory
     * @example
     * // Get one ArticleCategory
     * const articleCategory = await prisma.articleCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArticleCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ArticleCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArticleCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCategoryFindFirstArgs} args - Arguments to find a ArticleCategory
     * @example
     * // Get one ArticleCategory
     * const articleCategory = await prisma.articleCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArticleCategoryFindFirstArgs>(args?: SelectSubset<T, ArticleCategoryFindFirstArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArticleCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCategoryFindFirstOrThrowArgs} args - Arguments to find a ArticleCategory
     * @example
     * // Get one ArticleCategory
     * const articleCategory = await prisma.articleCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArticleCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ArticleCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ArticleCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArticleCategories
     * const articleCategories = await prisma.articleCategory.findMany()
     * 
     * // Get first 10 ArticleCategories
     * const articleCategories = await prisma.articleCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleCategoryWithIdOnly = await prisma.articleCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArticleCategoryFindManyArgs>(args?: SelectSubset<T, ArticleCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ArticleCategory.
     * @param {ArticleCategoryCreateArgs} args - Arguments to create a ArticleCategory.
     * @example
     * // Create one ArticleCategory
     * const ArticleCategory = await prisma.articleCategory.create({
     *   data: {
     *     // ... data to create a ArticleCategory
     *   }
     * })
     * 
     */
    create<T extends ArticleCategoryCreateArgs>(args: SelectSubset<T, ArticleCategoryCreateArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ArticleCategories.
     * @param {ArticleCategoryCreateManyArgs} args - Arguments to create many ArticleCategories.
     * @example
     * // Create many ArticleCategories
     * const articleCategory = await prisma.articleCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArticleCategoryCreateManyArgs>(args?: SelectSubset<T, ArticleCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ArticleCategory.
     * @param {ArticleCategoryDeleteArgs} args - Arguments to delete one ArticleCategory.
     * @example
     * // Delete one ArticleCategory
     * const ArticleCategory = await prisma.articleCategory.delete({
     *   where: {
     *     // ... filter to delete one ArticleCategory
     *   }
     * })
     * 
     */
    delete<T extends ArticleCategoryDeleteArgs>(args: SelectSubset<T, ArticleCategoryDeleteArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ArticleCategory.
     * @param {ArticleCategoryUpdateArgs} args - Arguments to update one ArticleCategory.
     * @example
     * // Update one ArticleCategory
     * const articleCategory = await prisma.articleCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArticleCategoryUpdateArgs>(args: SelectSubset<T, ArticleCategoryUpdateArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ArticleCategories.
     * @param {ArticleCategoryDeleteManyArgs} args - Arguments to filter ArticleCategories to delete.
     * @example
     * // Delete a few ArticleCategories
     * const { count } = await prisma.articleCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArticleCategoryDeleteManyArgs>(args?: SelectSubset<T, ArticleCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArticleCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArticleCategories
     * const articleCategory = await prisma.articleCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArticleCategoryUpdateManyArgs>(args: SelectSubset<T, ArticleCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArticleCategory.
     * @param {ArticleCategoryUpsertArgs} args - Arguments to update or create a ArticleCategory.
     * @example
     * // Update or create a ArticleCategory
     * const articleCategory = await prisma.articleCategory.upsert({
     *   create: {
     *     // ... data to create a ArticleCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArticleCategory we want to update
     *   }
     * })
     */
    upsert<T extends ArticleCategoryUpsertArgs>(args: SelectSubset<T, ArticleCategoryUpsertArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ArticleCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCategoryCountArgs} args - Arguments to filter ArticleCategories to count.
     * @example
     * // Count the number of ArticleCategories
     * const count = await prisma.articleCategory.count({
     *   where: {
     *     // ... the filter for the ArticleCategories we want to count
     *   }
     * })
    **/
    count<T extends ArticleCategoryCountArgs>(
      args?: Subset<T, ArticleCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArticleCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleCategoryAggregateArgs>(args: Subset<T, ArticleCategoryAggregateArgs>): Prisma.PrismaPromise<GetArticleCategoryAggregateType<T>>

    /**
     * Group by ArticleCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ArticleCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArticleCategory model
   */
  readonly fields: ArticleCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArticleCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArticleCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subcategories<T extends ArticleCategory$subcategoriesArgs<ExtArgs> = {}>(args?: Subset<T, ArticleCategory$subcategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    articles<T extends ArticleCategory$articlesArgs<ExtArgs> = {}>(args?: Subset<T, ArticleCategory$articlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArticleCategory model
   */
  interface ArticleCategoryFieldRefs {
    readonly id: FieldRef<"ArticleCategory", 'Int'>
    readonly name: FieldRef<"ArticleCategory", 'String'>
    readonly slug: FieldRef<"ArticleCategory", 'String'>
    readonly orderIndex: FieldRef<"ArticleCategory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ArticleCategory findUnique
   */
  export type ArticleCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleCategory to fetch.
     */
    where: ArticleCategoryWhereUniqueInput
  }

  /**
   * ArticleCategory findUniqueOrThrow
   */
  export type ArticleCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleCategory to fetch.
     */
    where: ArticleCategoryWhereUniqueInput
  }

  /**
   * ArticleCategory findFirst
   */
  export type ArticleCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleCategory to fetch.
     */
    where?: ArticleCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArticleCategories to fetch.
     */
    orderBy?: ArticleCategoryOrderByWithRelationInput | ArticleCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArticleCategories.
     */
    cursor?: ArticleCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArticleCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArticleCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArticleCategories.
     */
    distinct?: ArticleCategoryScalarFieldEnum | ArticleCategoryScalarFieldEnum[]
  }

  /**
   * ArticleCategory findFirstOrThrow
   */
  export type ArticleCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleCategory to fetch.
     */
    where?: ArticleCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArticleCategories to fetch.
     */
    orderBy?: ArticleCategoryOrderByWithRelationInput | ArticleCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArticleCategories.
     */
    cursor?: ArticleCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArticleCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArticleCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArticleCategories.
     */
    distinct?: ArticleCategoryScalarFieldEnum | ArticleCategoryScalarFieldEnum[]
  }

  /**
   * ArticleCategory findMany
   */
  export type ArticleCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleCategories to fetch.
     */
    where?: ArticleCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArticleCategories to fetch.
     */
    orderBy?: ArticleCategoryOrderByWithRelationInput | ArticleCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArticleCategories.
     */
    cursor?: ArticleCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArticleCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArticleCategories.
     */
    skip?: number
    distinct?: ArticleCategoryScalarFieldEnum | ArticleCategoryScalarFieldEnum[]
  }

  /**
   * ArticleCategory create
   */
  export type ArticleCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ArticleCategory.
     */
    data: XOR<ArticleCategoryCreateInput, ArticleCategoryUncheckedCreateInput>
  }

  /**
   * ArticleCategory createMany
   */
  export type ArticleCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArticleCategories.
     */
    data: ArticleCategoryCreateManyInput | ArticleCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArticleCategory update
   */
  export type ArticleCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ArticleCategory.
     */
    data: XOR<ArticleCategoryUpdateInput, ArticleCategoryUncheckedUpdateInput>
    /**
     * Choose, which ArticleCategory to update.
     */
    where: ArticleCategoryWhereUniqueInput
  }

  /**
   * ArticleCategory updateMany
   */
  export type ArticleCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArticleCategories.
     */
    data: XOR<ArticleCategoryUpdateManyMutationInput, ArticleCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ArticleCategories to update
     */
    where?: ArticleCategoryWhereInput
    /**
     * Limit how many ArticleCategories to update.
     */
    limit?: number
  }

  /**
   * ArticleCategory upsert
   */
  export type ArticleCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ArticleCategory to update in case it exists.
     */
    where: ArticleCategoryWhereUniqueInput
    /**
     * In case the ArticleCategory found by the `where` argument doesn't exist, create a new ArticleCategory with this data.
     */
    create: XOR<ArticleCategoryCreateInput, ArticleCategoryUncheckedCreateInput>
    /**
     * In case the ArticleCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArticleCategoryUpdateInput, ArticleCategoryUncheckedUpdateInput>
  }

  /**
   * ArticleCategory delete
   */
  export type ArticleCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
    /**
     * Filter which ArticleCategory to delete.
     */
    where: ArticleCategoryWhereUniqueInput
  }

  /**
   * ArticleCategory deleteMany
   */
  export type ArticleCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArticleCategories to delete
     */
    where?: ArticleCategoryWhereInput
    /**
     * Limit how many ArticleCategories to delete.
     */
    limit?: number
  }

  /**
   * ArticleCategory.subcategories
   */
  export type ArticleCategory$subcategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    where?: ArticleSubCategoryWhereInput
    orderBy?: ArticleSubCategoryOrderByWithRelationInput | ArticleSubCategoryOrderByWithRelationInput[]
    cursor?: ArticleSubCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArticleSubCategoryScalarFieldEnum | ArticleSubCategoryScalarFieldEnum[]
  }

  /**
   * ArticleCategory.articles
   */
  export type ArticleCategory$articlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    where?: ArticleWhereInput
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    cursor?: ArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * ArticleCategory without action
   */
  export type ArticleCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCategory
     */
    select?: ArticleCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleCategory
     */
    omit?: ArticleCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleCategoryInclude<ExtArgs> | null
  }


  /**
   * Model ArticleSubCategory
   */

  export type AggregateArticleSubCategory = {
    _count: ArticleSubCategoryCountAggregateOutputType | null
    _avg: ArticleSubCategoryAvgAggregateOutputType | null
    _sum: ArticleSubCategorySumAggregateOutputType | null
    _min: ArticleSubCategoryMinAggregateOutputType | null
    _max: ArticleSubCategoryMaxAggregateOutputType | null
  }

  export type ArticleSubCategoryAvgAggregateOutputType = {
    id: number | null
    orderIndex: number | null
    categoryId: number | null
  }

  export type ArticleSubCategorySumAggregateOutputType = {
    id: number | null
    orderIndex: number | null
    categoryId: number | null
  }

  export type ArticleSubCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    orderIndex: number | null
    categoryId: number | null
  }

  export type ArticleSubCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    orderIndex: number | null
    categoryId: number | null
  }

  export type ArticleSubCategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    orderIndex: number
    categoryId: number
    _all: number
  }


  export type ArticleSubCategoryAvgAggregateInputType = {
    id?: true
    orderIndex?: true
    categoryId?: true
  }

  export type ArticleSubCategorySumAggregateInputType = {
    id?: true
    orderIndex?: true
    categoryId?: true
  }

  export type ArticleSubCategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    orderIndex?: true
    categoryId?: true
  }

  export type ArticleSubCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    orderIndex?: true
    categoryId?: true
  }

  export type ArticleSubCategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    orderIndex?: true
    categoryId?: true
    _all?: true
  }

  export type ArticleSubCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArticleSubCategory to aggregate.
     */
    where?: ArticleSubCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArticleSubCategories to fetch.
     */
    orderBy?: ArticleSubCategoryOrderByWithRelationInput | ArticleSubCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArticleSubCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArticleSubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArticleSubCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArticleSubCategories
    **/
    _count?: true | ArticleSubCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArticleSubCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArticleSubCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleSubCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleSubCategoryMaxAggregateInputType
  }

  export type GetArticleSubCategoryAggregateType<T extends ArticleSubCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateArticleSubCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticleSubCategory[P]>
      : GetScalarType<T[P], AggregateArticleSubCategory[P]>
  }




  export type ArticleSubCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleSubCategoryWhereInput
    orderBy?: ArticleSubCategoryOrderByWithAggregationInput | ArticleSubCategoryOrderByWithAggregationInput[]
    by: ArticleSubCategoryScalarFieldEnum[] | ArticleSubCategoryScalarFieldEnum
    having?: ArticleSubCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleSubCategoryCountAggregateInputType | true
    _avg?: ArticleSubCategoryAvgAggregateInputType
    _sum?: ArticleSubCategorySumAggregateInputType
    _min?: ArticleSubCategoryMinAggregateInputType
    _max?: ArticleSubCategoryMaxAggregateInputType
  }

  export type ArticleSubCategoryGroupByOutputType = {
    id: number
    name: string
    slug: string
    orderIndex: number
    categoryId: number
    _count: ArticleSubCategoryCountAggregateOutputType | null
    _avg: ArticleSubCategoryAvgAggregateOutputType | null
    _sum: ArticleSubCategorySumAggregateOutputType | null
    _min: ArticleSubCategoryMinAggregateOutputType | null
    _max: ArticleSubCategoryMaxAggregateOutputType | null
  }

  type GetArticleSubCategoryGroupByPayload<T extends ArticleSubCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArticleSubCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleSubCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleSubCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleSubCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSubCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    orderIndex?: boolean
    categoryId?: boolean
    category?: boolean | ArticleCategoryDefaultArgs<ExtArgs>
    articles?: boolean | ArticleSubCategory$articlesArgs<ExtArgs>
    _count?: boolean | ArticleSubCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["articleSubCategory"]>



  export type ArticleSubCategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    orderIndex?: boolean
    categoryId?: boolean
  }

  export type ArticleSubCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "orderIndex" | "categoryId", ExtArgs["result"]["articleSubCategory"]>
  export type ArticleSubCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ArticleCategoryDefaultArgs<ExtArgs>
    articles?: boolean | ArticleSubCategory$articlesArgs<ExtArgs>
    _count?: boolean | ArticleSubCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArticleSubCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArticleSubCategory"
    objects: {
      category: Prisma.$ArticleCategoryPayload<ExtArgs>
      articles: Prisma.$ArticlePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      orderIndex: number
      categoryId: number
    }, ExtArgs["result"]["articleSubCategory"]>
    composites: {}
  }

  type ArticleSubCategoryGetPayload<S extends boolean | null | undefined | ArticleSubCategoryDefaultArgs> = $Result.GetResult<Prisma.$ArticleSubCategoryPayload, S>

  type ArticleSubCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArticleSubCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArticleSubCategoryCountAggregateInputType | true
    }

  export interface ArticleSubCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArticleSubCategory'], meta: { name: 'ArticleSubCategory' } }
    /**
     * Find zero or one ArticleSubCategory that matches the filter.
     * @param {ArticleSubCategoryFindUniqueArgs} args - Arguments to find a ArticleSubCategory
     * @example
     * // Get one ArticleSubCategory
     * const articleSubCategory = await prisma.articleSubCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArticleSubCategoryFindUniqueArgs>(args: SelectSubset<T, ArticleSubCategoryFindUniqueArgs<ExtArgs>>): Prisma__ArticleSubCategoryClient<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ArticleSubCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArticleSubCategoryFindUniqueOrThrowArgs} args - Arguments to find a ArticleSubCategory
     * @example
     * // Get one ArticleSubCategory
     * const articleSubCategory = await prisma.articleSubCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArticleSubCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ArticleSubCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArticleSubCategoryClient<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArticleSubCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleSubCategoryFindFirstArgs} args - Arguments to find a ArticleSubCategory
     * @example
     * // Get one ArticleSubCategory
     * const articleSubCategory = await prisma.articleSubCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArticleSubCategoryFindFirstArgs>(args?: SelectSubset<T, ArticleSubCategoryFindFirstArgs<ExtArgs>>): Prisma__ArticleSubCategoryClient<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArticleSubCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleSubCategoryFindFirstOrThrowArgs} args - Arguments to find a ArticleSubCategory
     * @example
     * // Get one ArticleSubCategory
     * const articleSubCategory = await prisma.articleSubCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArticleSubCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ArticleSubCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArticleSubCategoryClient<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ArticleSubCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleSubCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArticleSubCategories
     * const articleSubCategories = await prisma.articleSubCategory.findMany()
     * 
     * // Get first 10 ArticleSubCategories
     * const articleSubCategories = await prisma.articleSubCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleSubCategoryWithIdOnly = await prisma.articleSubCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArticleSubCategoryFindManyArgs>(args?: SelectSubset<T, ArticleSubCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ArticleSubCategory.
     * @param {ArticleSubCategoryCreateArgs} args - Arguments to create a ArticleSubCategory.
     * @example
     * // Create one ArticleSubCategory
     * const ArticleSubCategory = await prisma.articleSubCategory.create({
     *   data: {
     *     // ... data to create a ArticleSubCategory
     *   }
     * })
     * 
     */
    create<T extends ArticleSubCategoryCreateArgs>(args: SelectSubset<T, ArticleSubCategoryCreateArgs<ExtArgs>>): Prisma__ArticleSubCategoryClient<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ArticleSubCategories.
     * @param {ArticleSubCategoryCreateManyArgs} args - Arguments to create many ArticleSubCategories.
     * @example
     * // Create many ArticleSubCategories
     * const articleSubCategory = await prisma.articleSubCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArticleSubCategoryCreateManyArgs>(args?: SelectSubset<T, ArticleSubCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ArticleSubCategory.
     * @param {ArticleSubCategoryDeleteArgs} args - Arguments to delete one ArticleSubCategory.
     * @example
     * // Delete one ArticleSubCategory
     * const ArticleSubCategory = await prisma.articleSubCategory.delete({
     *   where: {
     *     // ... filter to delete one ArticleSubCategory
     *   }
     * })
     * 
     */
    delete<T extends ArticleSubCategoryDeleteArgs>(args: SelectSubset<T, ArticleSubCategoryDeleteArgs<ExtArgs>>): Prisma__ArticleSubCategoryClient<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ArticleSubCategory.
     * @param {ArticleSubCategoryUpdateArgs} args - Arguments to update one ArticleSubCategory.
     * @example
     * // Update one ArticleSubCategory
     * const articleSubCategory = await prisma.articleSubCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArticleSubCategoryUpdateArgs>(args: SelectSubset<T, ArticleSubCategoryUpdateArgs<ExtArgs>>): Prisma__ArticleSubCategoryClient<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ArticleSubCategories.
     * @param {ArticleSubCategoryDeleteManyArgs} args - Arguments to filter ArticleSubCategories to delete.
     * @example
     * // Delete a few ArticleSubCategories
     * const { count } = await prisma.articleSubCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArticleSubCategoryDeleteManyArgs>(args?: SelectSubset<T, ArticleSubCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArticleSubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleSubCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArticleSubCategories
     * const articleSubCategory = await prisma.articleSubCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArticleSubCategoryUpdateManyArgs>(args: SelectSubset<T, ArticleSubCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArticleSubCategory.
     * @param {ArticleSubCategoryUpsertArgs} args - Arguments to update or create a ArticleSubCategory.
     * @example
     * // Update or create a ArticleSubCategory
     * const articleSubCategory = await prisma.articleSubCategory.upsert({
     *   create: {
     *     // ... data to create a ArticleSubCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArticleSubCategory we want to update
     *   }
     * })
     */
    upsert<T extends ArticleSubCategoryUpsertArgs>(args: SelectSubset<T, ArticleSubCategoryUpsertArgs<ExtArgs>>): Prisma__ArticleSubCategoryClient<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ArticleSubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleSubCategoryCountArgs} args - Arguments to filter ArticleSubCategories to count.
     * @example
     * // Count the number of ArticleSubCategories
     * const count = await prisma.articleSubCategory.count({
     *   where: {
     *     // ... the filter for the ArticleSubCategories we want to count
     *   }
     * })
    **/
    count<T extends ArticleSubCategoryCountArgs>(
      args?: Subset<T, ArticleSubCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleSubCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArticleSubCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleSubCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleSubCategoryAggregateArgs>(args: Subset<T, ArticleSubCategoryAggregateArgs>): Prisma.PrismaPromise<GetArticleSubCategoryAggregateType<T>>

    /**
     * Group by ArticleSubCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleSubCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleSubCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleSubCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ArticleSubCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleSubCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleSubCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArticleSubCategory model
   */
  readonly fields: ArticleSubCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArticleSubCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArticleSubCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends ArticleCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArticleCategoryDefaultArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    articles<T extends ArticleSubCategory$articlesArgs<ExtArgs> = {}>(args?: Subset<T, ArticleSubCategory$articlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArticleSubCategory model
   */
  interface ArticleSubCategoryFieldRefs {
    readonly id: FieldRef<"ArticleSubCategory", 'Int'>
    readonly name: FieldRef<"ArticleSubCategory", 'String'>
    readonly slug: FieldRef<"ArticleSubCategory", 'String'>
    readonly orderIndex: FieldRef<"ArticleSubCategory", 'Int'>
    readonly categoryId: FieldRef<"ArticleSubCategory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ArticleSubCategory findUnique
   */
  export type ArticleSubCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleSubCategory to fetch.
     */
    where: ArticleSubCategoryWhereUniqueInput
  }

  /**
   * ArticleSubCategory findUniqueOrThrow
   */
  export type ArticleSubCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleSubCategory to fetch.
     */
    where: ArticleSubCategoryWhereUniqueInput
  }

  /**
   * ArticleSubCategory findFirst
   */
  export type ArticleSubCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleSubCategory to fetch.
     */
    where?: ArticleSubCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArticleSubCategories to fetch.
     */
    orderBy?: ArticleSubCategoryOrderByWithRelationInput | ArticleSubCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArticleSubCategories.
     */
    cursor?: ArticleSubCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArticleSubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArticleSubCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArticleSubCategories.
     */
    distinct?: ArticleSubCategoryScalarFieldEnum | ArticleSubCategoryScalarFieldEnum[]
  }

  /**
   * ArticleSubCategory findFirstOrThrow
   */
  export type ArticleSubCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleSubCategory to fetch.
     */
    where?: ArticleSubCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArticleSubCategories to fetch.
     */
    orderBy?: ArticleSubCategoryOrderByWithRelationInput | ArticleSubCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArticleSubCategories.
     */
    cursor?: ArticleSubCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArticleSubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArticleSubCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArticleSubCategories.
     */
    distinct?: ArticleSubCategoryScalarFieldEnum | ArticleSubCategoryScalarFieldEnum[]
  }

  /**
   * ArticleSubCategory findMany
   */
  export type ArticleSubCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArticleSubCategories to fetch.
     */
    where?: ArticleSubCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArticleSubCategories to fetch.
     */
    orderBy?: ArticleSubCategoryOrderByWithRelationInput | ArticleSubCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArticleSubCategories.
     */
    cursor?: ArticleSubCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArticleSubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArticleSubCategories.
     */
    skip?: number
    distinct?: ArticleSubCategoryScalarFieldEnum | ArticleSubCategoryScalarFieldEnum[]
  }

  /**
   * ArticleSubCategory create
   */
  export type ArticleSubCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ArticleSubCategory.
     */
    data: XOR<ArticleSubCategoryCreateInput, ArticleSubCategoryUncheckedCreateInput>
  }

  /**
   * ArticleSubCategory createMany
   */
  export type ArticleSubCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArticleSubCategories.
     */
    data: ArticleSubCategoryCreateManyInput | ArticleSubCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArticleSubCategory update
   */
  export type ArticleSubCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ArticleSubCategory.
     */
    data: XOR<ArticleSubCategoryUpdateInput, ArticleSubCategoryUncheckedUpdateInput>
    /**
     * Choose, which ArticleSubCategory to update.
     */
    where: ArticleSubCategoryWhereUniqueInput
  }

  /**
   * ArticleSubCategory updateMany
   */
  export type ArticleSubCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArticleSubCategories.
     */
    data: XOR<ArticleSubCategoryUpdateManyMutationInput, ArticleSubCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ArticleSubCategories to update
     */
    where?: ArticleSubCategoryWhereInput
    /**
     * Limit how many ArticleSubCategories to update.
     */
    limit?: number
  }

  /**
   * ArticleSubCategory upsert
   */
  export type ArticleSubCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ArticleSubCategory to update in case it exists.
     */
    where: ArticleSubCategoryWhereUniqueInput
    /**
     * In case the ArticleSubCategory found by the `where` argument doesn't exist, create a new ArticleSubCategory with this data.
     */
    create: XOR<ArticleSubCategoryCreateInput, ArticleSubCategoryUncheckedCreateInput>
    /**
     * In case the ArticleSubCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArticleSubCategoryUpdateInput, ArticleSubCategoryUncheckedUpdateInput>
  }

  /**
   * ArticleSubCategory delete
   */
  export type ArticleSubCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
    /**
     * Filter which ArticleSubCategory to delete.
     */
    where: ArticleSubCategoryWhereUniqueInput
  }

  /**
   * ArticleSubCategory deleteMany
   */
  export type ArticleSubCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArticleSubCategories to delete
     */
    where?: ArticleSubCategoryWhereInput
    /**
     * Limit how many ArticleSubCategories to delete.
     */
    limit?: number
  }

  /**
   * ArticleSubCategory.articles
   */
  export type ArticleSubCategory$articlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    where?: ArticleWhereInput
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    cursor?: ArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * ArticleSubCategory without action
   */
  export type ArticleSubCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleSubCategory
     */
    select?: ArticleSubCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArticleSubCategory
     */
    omit?: ArticleSubCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleSubCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Article
   */

  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    subCategoryId: number | null
  }

  export type ArticleSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    subCategoryId: number | null
  }

  export type ArticleMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    excerpt: string | null
    content: string | null
    coverImageUrl: string | null
    publishedAt: Date | null
    categoryId: number | null
    subCategoryId: number | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    excerpt: string | null
    content: string | null
    coverImageUrl: string | null
    publishedAt: Date | null
    categoryId: number | null
    subCategoryId: number | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    excerpt: number
    content: number
    coverImageUrl: number
    publishedAt: number
    categoryId: number
    subCategoryId: number
    _all: number
  }


  export type ArticleAvgAggregateInputType = {
    id?: true
    categoryId?: true
    subCategoryId?: true
  }

  export type ArticleSumAggregateInputType = {
    id?: true
    categoryId?: true
    subCategoryId?: true
  }

  export type ArticleMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    excerpt?: true
    content?: true
    coverImageUrl?: true
    publishedAt?: true
    categoryId?: true
    subCategoryId?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    excerpt?: true
    content?: true
    coverImageUrl?: true
    publishedAt?: true
    categoryId?: true
    subCategoryId?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    excerpt?: true
    content?: true
    coverImageUrl?: true
    publishedAt?: true
    categoryId?: true
    subCategoryId?: true
    _all?: true
  }

  export type ArticleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Article to aggregate.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleWhereInput
    orderBy?: ArticleOrderByWithAggregationInput | ArticleOrderByWithAggregationInput[]
    by: ArticleScalarFieldEnum[] | ArticleScalarFieldEnum
    having?: ArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _avg?: ArticleAvgAggregateInputType
    _sum?: ArticleSumAggregateInputType
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }

  export type ArticleGroupByOutputType = {
    id: number
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl: string | null
    publishedAt: Date
    categoryId: number
    subCategoryId: number
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    excerpt?: boolean
    content?: boolean
    coverImageUrl?: boolean
    publishedAt?: boolean
    categoryId?: boolean
    subCategoryId?: boolean
    category?: boolean | ArticleCategoryDefaultArgs<ExtArgs>
    subcategory?: boolean | ArticleSubCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["article"]>



  export type ArticleSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    excerpt?: boolean
    content?: boolean
    coverImageUrl?: boolean
    publishedAt?: boolean
    categoryId?: boolean
    subCategoryId?: boolean
  }

  export type ArticleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "slug" | "excerpt" | "content" | "coverImageUrl" | "publishedAt" | "categoryId" | "subCategoryId", ExtArgs["result"]["article"]>
  export type ArticleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ArticleCategoryDefaultArgs<ExtArgs>
    subcategory?: boolean | ArticleSubCategoryDefaultArgs<ExtArgs>
  }

  export type $ArticlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Article"
    objects: {
      category: Prisma.$ArticleCategoryPayload<ExtArgs>
      subcategory: Prisma.$ArticleSubCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      slug: string
      excerpt: string
      content: string
      coverImageUrl: string | null
      publishedAt: Date
      categoryId: number
      subCategoryId: number
    }, ExtArgs["result"]["article"]>
    composites: {}
  }

  type ArticleGetPayload<S extends boolean | null | undefined | ArticleDefaultArgs> = $Result.GetResult<Prisma.$ArticlePayload, S>

  type ArticleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArticleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArticleCountAggregateInputType | true
    }

  export interface ArticleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Article'], meta: { name: 'Article' } }
    /**
     * Find zero or one Article that matches the filter.
     * @param {ArticleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArticleFindUniqueArgs>(args: SelectSubset<T, ArticleFindUniqueArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Article that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArticleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArticleFindUniqueOrThrowArgs>(args: SelectSubset<T, ArticleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArticleFindFirstArgs>(args?: SelectSubset<T, ArticleFindFirstArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Article that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArticleFindFirstOrThrowArgs>(args?: SelectSubset<T, ArticleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArticleFindManyArgs>(args?: SelectSubset<T, ArticleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Article.
     * @param {ArticleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
     */
    create<T extends ArticleCreateArgs>(args: SelectSubset<T, ArticleCreateArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Articles.
     * @param {ArticleCreateManyArgs} args - Arguments to create many Articles.
     * @example
     * // Create many Articles
     * const article = await prisma.article.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArticleCreateManyArgs>(args?: SelectSubset<T, ArticleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Article.
     * @param {ArticleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
     */
    delete<T extends ArticleDeleteArgs>(args: SelectSubset<T, ArticleDeleteArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Article.
     * @param {ArticleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArticleUpdateArgs>(args: SelectSubset<T, ArticleUpdateArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Articles.
     * @param {ArticleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArticleDeleteManyArgs>(args?: SelectSubset<T, ArticleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArticleUpdateManyArgs>(args: SelectSubset<T, ArticleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {ArticleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
     */
    upsert<T extends ArticleUpsertArgs>(args: SelectSubset<T, ArticleUpsertArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends ArticleCountArgs>(
      args?: Subset<T, ArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): Prisma.PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Article model
   */
  readonly fields: ArticleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArticleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends ArticleCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArticleCategoryDefaultArgs<ExtArgs>>): Prisma__ArticleCategoryClient<$Result.GetResult<Prisma.$ArticleCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subcategory<T extends ArticleSubCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArticleSubCategoryDefaultArgs<ExtArgs>>): Prisma__ArticleSubCategoryClient<$Result.GetResult<Prisma.$ArticleSubCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Article model
   */
  interface ArticleFieldRefs {
    readonly id: FieldRef<"Article", 'Int'>
    readonly title: FieldRef<"Article", 'String'>
    readonly slug: FieldRef<"Article", 'String'>
    readonly excerpt: FieldRef<"Article", 'String'>
    readonly content: FieldRef<"Article", 'String'>
    readonly coverImageUrl: FieldRef<"Article", 'String'>
    readonly publishedAt: FieldRef<"Article", 'DateTime'>
    readonly categoryId: FieldRef<"Article", 'Int'>
    readonly subCategoryId: FieldRef<"Article", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Article findUnique
   */
  export type ArticleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findUniqueOrThrow
   */
  export type ArticleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findFirst
   */
  export type ArticleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article findFirstOrThrow
   */
  export type ArticleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article findMany
   */
  export type ArticleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Articles to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article create
   */
  export type ArticleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * The data needed to create a Article.
     */
    data: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
  }

  /**
   * Article createMany
   */
  export type ArticleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Articles.
     */
    data: ArticleCreateManyInput | ArticleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Article update
   */
  export type ArticleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * The data needed to update a Article.
     */
    data: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
    /**
     * Choose, which Article to update.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article updateMany
   */
  export type ArticleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Articles.
     */
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     */
    where?: ArticleWhereInput
    /**
     * Limit how many Articles to update.
     */
    limit?: number
  }

  /**
   * Article upsert
   */
  export type ArticleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * The filter to search for the Article to update in case it exists.
     */
    where: ArticleWhereUniqueInput
    /**
     * In case the Article found by the `where` argument doesn't exist, create a new Article with this data.
     */
    create: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
    /**
     * In case the Article was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
  }

  /**
   * Article delete
   */
  export type ArticleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter which Article to delete.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article deleteMany
   */
  export type ArticleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Articles to delete
     */
    where?: ArticleWhereInput
    /**
     * Limit how many Articles to delete.
     */
    limit?: number
  }

  /**
   * Article without action
   */
  export type ArticleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
  }


  /**
   * Model banners
   */

  export type AggregateBanners = {
    _count: BannersCountAggregateOutputType | null
    _avg: BannersAvgAggregateOutputType | null
    _sum: BannersSumAggregateOutputType | null
    _min: BannersMinAggregateOutputType | null
    _max: BannersMaxAggregateOutputType | null
  }

  export type BannersAvgAggregateOutputType = {
    id: number | null
  }

  export type BannersSumAggregateOutputType = {
    id: number | null
  }

  export type BannersMinAggregateOutputType = {
    id: number | null
    image: string | null
    title: string | null
    buttonText: string | null
    buttonLink: string | null
    created_at: Date | null
    fontColor: $Enums.banners_fontColor | null
  }

  export type BannersMaxAggregateOutputType = {
    id: number | null
    image: string | null
    title: string | null
    buttonText: string | null
    buttonLink: string | null
    created_at: Date | null
    fontColor: $Enums.banners_fontColor | null
  }

  export type BannersCountAggregateOutputType = {
    id: number
    image: number
    title: number
    buttonText: number
    buttonLink: number
    created_at: number
    fontColor: number
    _all: number
  }


  export type BannersAvgAggregateInputType = {
    id?: true
  }

  export type BannersSumAggregateInputType = {
    id?: true
  }

  export type BannersMinAggregateInputType = {
    id?: true
    image?: true
    title?: true
    buttonText?: true
    buttonLink?: true
    created_at?: true
    fontColor?: true
  }

  export type BannersMaxAggregateInputType = {
    id?: true
    image?: true
    title?: true
    buttonText?: true
    buttonLink?: true
    created_at?: true
    fontColor?: true
  }

  export type BannersCountAggregateInputType = {
    id?: true
    image?: true
    title?: true
    buttonText?: true
    buttonLink?: true
    created_at?: true
    fontColor?: true
    _all?: true
  }

  export type BannersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which banners to aggregate.
     */
    where?: bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannersOrderByWithRelationInput | bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned banners
    **/
    _count?: true | BannersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BannersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BannersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannersMaxAggregateInputType
  }

  export type GetBannersAggregateType<T extends BannersAggregateArgs> = {
        [P in keyof T & keyof AggregateBanners]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanners[P]>
      : GetScalarType<T[P], AggregateBanners[P]>
  }




  export type bannersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bannersWhereInput
    orderBy?: bannersOrderByWithAggregationInput | bannersOrderByWithAggregationInput[]
    by: BannersScalarFieldEnum[] | BannersScalarFieldEnum
    having?: bannersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannersCountAggregateInputType | true
    _avg?: BannersAvgAggregateInputType
    _sum?: BannersSumAggregateInputType
    _min?: BannersMinAggregateInputType
    _max?: BannersMaxAggregateInputType
  }

  export type BannersGroupByOutputType = {
    id: number
    image: string | null
    title: string
    buttonText: string | null
    buttonLink: string | null
    created_at: Date | null
    fontColor: $Enums.banners_fontColor | null
    _count: BannersCountAggregateOutputType | null
    _avg: BannersAvgAggregateOutputType | null
    _sum: BannersSumAggregateOutputType | null
    _min: BannersMinAggregateOutputType | null
    _max: BannersMaxAggregateOutputType | null
  }

  type GetBannersGroupByPayload<T extends bannersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BannersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannersGroupByOutputType[P]>
            : GetScalarType<T[P], BannersGroupByOutputType[P]>
        }
      >
    >


  export type bannersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    title?: boolean
    buttonText?: boolean
    buttonLink?: boolean
    created_at?: boolean
    fontColor?: boolean
  }, ExtArgs["result"]["banners"]>



  export type bannersSelectScalar = {
    id?: boolean
    image?: boolean
    title?: boolean
    buttonText?: boolean
    buttonLink?: boolean
    created_at?: boolean
    fontColor?: boolean
  }

  export type bannersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "image" | "title" | "buttonText" | "buttonLink" | "created_at" | "fontColor", ExtArgs["result"]["banners"]>

  export type $bannersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "banners"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      image: string | null
      title: string
      buttonText: string | null
      buttonLink: string | null
      created_at: Date | null
      fontColor: $Enums.banners_fontColor | null
    }, ExtArgs["result"]["banners"]>
    composites: {}
  }

  type bannersGetPayload<S extends boolean | null | undefined | bannersDefaultArgs> = $Result.GetResult<Prisma.$bannersPayload, S>

  type bannersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<bannersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BannersCountAggregateInputType | true
    }

  export interface bannersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['banners'], meta: { name: 'banners' } }
    /**
     * Find zero or one Banners that matches the filter.
     * @param {bannersFindUniqueArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bannersFindUniqueArgs>(args: SelectSubset<T, bannersFindUniqueArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Banners that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {bannersFindUniqueOrThrowArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bannersFindUniqueOrThrowArgs>(args: SelectSubset<T, bannersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersFindFirstArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bannersFindFirstArgs>(args?: SelectSubset<T, bannersFindFirstArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Banners that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersFindFirstOrThrowArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bannersFindFirstOrThrowArgs>(args?: SelectSubset<T, bannersFindFirstOrThrowArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banners
     * const banners = await prisma.banners.findMany()
     * 
     * // Get first 10 Banners
     * const banners = await prisma.banners.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bannersWithIdOnly = await prisma.banners.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends bannersFindManyArgs>(args?: SelectSubset<T, bannersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Banners.
     * @param {bannersCreateArgs} args - Arguments to create a Banners.
     * @example
     * // Create one Banners
     * const Banners = await prisma.banners.create({
     *   data: {
     *     // ... data to create a Banners
     *   }
     * })
     * 
     */
    create<T extends bannersCreateArgs>(args: SelectSubset<T, bannersCreateArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Banners.
     * @param {bannersCreateManyArgs} args - Arguments to create many Banners.
     * @example
     * // Create many Banners
     * const banners = await prisma.banners.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bannersCreateManyArgs>(args?: SelectSubset<T, bannersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Banners.
     * @param {bannersDeleteArgs} args - Arguments to delete one Banners.
     * @example
     * // Delete one Banners
     * const Banners = await prisma.banners.delete({
     *   where: {
     *     // ... filter to delete one Banners
     *   }
     * })
     * 
     */
    delete<T extends bannersDeleteArgs>(args: SelectSubset<T, bannersDeleteArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Banners.
     * @param {bannersUpdateArgs} args - Arguments to update one Banners.
     * @example
     * // Update one Banners
     * const banners = await prisma.banners.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bannersUpdateArgs>(args: SelectSubset<T, bannersUpdateArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Banners.
     * @param {bannersDeleteManyArgs} args - Arguments to filter Banners to delete.
     * @example
     * // Delete a few Banners
     * const { count } = await prisma.banners.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bannersDeleteManyArgs>(args?: SelectSubset<T, bannersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banners
     * const banners = await prisma.banners.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bannersUpdateManyArgs>(args: SelectSubset<T, bannersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Banners.
     * @param {bannersUpsertArgs} args - Arguments to update or create a Banners.
     * @example
     * // Update or create a Banners
     * const banners = await prisma.banners.upsert({
     *   create: {
     *     // ... data to create a Banners
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banners we want to update
     *   }
     * })
     */
    upsert<T extends bannersUpsertArgs>(args: SelectSubset<T, bannersUpsertArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersCountArgs} args - Arguments to filter Banners to count.
     * @example
     * // Count the number of Banners
     * const count = await prisma.banners.count({
     *   where: {
     *     // ... the filter for the Banners we want to count
     *   }
     * })
    **/
    count<T extends bannersCountArgs>(
      args?: Subset<T, bannersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannersAggregateArgs>(args: Subset<T, BannersAggregateArgs>): Prisma.PrismaPromise<GetBannersAggregateType<T>>

    /**
     * Group by Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bannersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bannersGroupByArgs['orderBy'] }
        : { orderBy?: bannersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bannersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the banners model
   */
  readonly fields: bannersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for banners.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bannersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the banners model
   */
  interface bannersFieldRefs {
    readonly id: FieldRef<"banners", 'Int'>
    readonly image: FieldRef<"banners", 'String'>
    readonly title: FieldRef<"banners", 'String'>
    readonly buttonText: FieldRef<"banners", 'String'>
    readonly buttonLink: FieldRef<"banners", 'String'>
    readonly created_at: FieldRef<"banners", 'DateTime'>
    readonly fontColor: FieldRef<"banners", 'banners_fontColor'>
  }
    

  // Custom InputTypes
  /**
   * banners findUnique
   */
  export type bannersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where: bannersWhereUniqueInput
  }

  /**
   * banners findUniqueOrThrow
   */
  export type bannersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where: bannersWhereUniqueInput
  }

  /**
   * banners findFirst
   */
  export type bannersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where?: bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannersOrderByWithRelationInput | bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannersScalarFieldEnum | BannersScalarFieldEnum[]
  }

  /**
   * banners findFirstOrThrow
   */
  export type bannersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where?: bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannersOrderByWithRelationInput | bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannersScalarFieldEnum | BannersScalarFieldEnum[]
  }

  /**
   * banners findMany
   */
  export type bannersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where?: bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannersOrderByWithRelationInput | bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing banners.
     */
    cursor?: bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    distinct?: BannersScalarFieldEnum | BannersScalarFieldEnum[]
  }

  /**
   * banners create
   */
  export type bannersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * The data needed to create a banners.
     */
    data: XOR<bannersCreateInput, bannersUncheckedCreateInput>
  }

  /**
   * banners createMany
   */
  export type bannersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many banners.
     */
    data: bannersCreateManyInput | bannersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * banners update
   */
  export type bannersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * The data needed to update a banners.
     */
    data: XOR<bannersUpdateInput, bannersUncheckedUpdateInput>
    /**
     * Choose, which banners to update.
     */
    where: bannersWhereUniqueInput
  }

  /**
   * banners updateMany
   */
  export type bannersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update banners.
     */
    data: XOR<bannersUpdateManyMutationInput, bannersUncheckedUpdateManyInput>
    /**
     * Filter which banners to update
     */
    where?: bannersWhereInput
    /**
     * Limit how many banners to update.
     */
    limit?: number
  }

  /**
   * banners upsert
   */
  export type bannersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * The filter to search for the banners to update in case it exists.
     */
    where: bannersWhereUniqueInput
    /**
     * In case the banners found by the `where` argument doesn't exist, create a new banners with this data.
     */
    create: XOR<bannersCreateInput, bannersUncheckedCreateInput>
    /**
     * In case the banners was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bannersUpdateInput, bannersUncheckedUpdateInput>
  }

  /**
   * banners delete
   */
  export type bannersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter which banners to delete.
     */
    where: bannersWhereUniqueInput
  }

  /**
   * banners deleteMany
   */
  export type bannersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which banners to delete
     */
    where?: bannersWhereInput
    /**
     * Limit how many banners to delete.
     */
    limit?: number
  }

  /**
   * banners without action
   */
  export type bannersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
  }


  /**
   * Model course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
    capacity: number | null
    durationMinutes: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
    capacity: number | null
    durationMinutes: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    coverImage: string | null
    description: string | null
    price: Decimal | null
    capacity: number | null
    status: boolean | null
    startAt: Date | null
    durationMinutes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    coverImage: string | null
    description: string | null
    price: Decimal | null
    capacity: number | null
    status: boolean | null
    startAt: Date | null
    durationMinutes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    coverImage: number
    description: number
    price: number
    capacity: number
    status: number
    startAt: number
    durationMinutes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
    price?: true
    capacity?: true
    durationMinutes?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
    price?: true
    capacity?: true
    durationMinutes?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    coverImage?: true
    description?: true
    price?: true
    capacity?: true
    status?: true
    startAt?: true
    durationMinutes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    coverImage?: true
    description?: true
    price?: true
    capacity?: true
    status?: true
    startAt?: true
    durationMinutes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    coverImage?: true
    description?: true
    price?: true
    capacity?: true
    status?: true
    startAt?: true
    durationMinutes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which course to aggregate.
     */
    where?: courseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: courseOrderByWithRelationInput | courseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: courseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type courseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: courseWhereInput
    orderBy?: courseOrderByWithAggregationInput | courseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: courseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    title: string
    slug: string
    coverImage: string | null
    description: string | null
    price: Decimal
    capacity: number
    status: boolean
    startAt: Date | null
    durationMinutes: number | null
    createdAt: Date
    updatedAt: Date
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends courseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type courseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    coverImage?: boolean
    description?: boolean
    price?: boolean
    capacity?: boolean
    status?: boolean
    startAt?: boolean
    durationMinutes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    courseintent?: boolean | course$courseintentArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>



  export type courseSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    coverImage?: boolean
    description?: boolean
    price?: boolean
    capacity?: boolean
    status?: boolean
    startAt?: boolean
    durationMinutes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type courseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "slug" | "coverImage" | "description" | "price" | "capacity" | "status" | "startAt" | "durationMinutes" | "createdAt" | "updatedAt", ExtArgs["result"]["course"]>
  export type courseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courseintent?: boolean | course$courseintentArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $coursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "course"
    objects: {
      courseintent: Prisma.$courseintentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      slug: string
      coverImage: string | null
      description: string | null
      price: Prisma.Decimal
      capacity: number
      status: boolean
      startAt: Date | null
      durationMinutes: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type courseGetPayload<S extends boolean | null | undefined | courseDefaultArgs> = $Result.GetResult<Prisma.$coursePayload, S>

  type courseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<courseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface courseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['course'], meta: { name: 'course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {courseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends courseFindUniqueArgs>(args: SelectSubset<T, courseFindUniqueArgs<ExtArgs>>): Prisma__courseClient<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {courseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends courseFindUniqueOrThrowArgs>(args: SelectSubset<T, courseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__courseClient<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends courseFindFirstArgs>(args?: SelectSubset<T, courseFindFirstArgs<ExtArgs>>): Prisma__courseClient<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends courseFindFirstOrThrowArgs>(args?: SelectSubset<T, courseFindFirstOrThrowArgs<ExtArgs>>): Prisma__courseClient<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends courseFindManyArgs>(args?: SelectSubset<T, courseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {courseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends courseCreateArgs>(args: SelectSubset<T, courseCreateArgs<ExtArgs>>): Prisma__courseClient<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {courseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends courseCreateManyArgs>(args?: SelectSubset<T, courseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Course.
     * @param {courseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends courseDeleteArgs>(args: SelectSubset<T, courseDeleteArgs<ExtArgs>>): Prisma__courseClient<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {courseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends courseUpdateArgs>(args: SelectSubset<T, courseUpdateArgs<ExtArgs>>): Prisma__courseClient<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {courseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends courseDeleteManyArgs>(args?: SelectSubset<T, courseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends courseUpdateManyArgs>(args: SelectSubset<T, courseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {courseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends courseUpsertArgs>(args: SelectSubset<T, courseUpsertArgs<ExtArgs>>): Prisma__courseClient<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends courseCountArgs>(
      args?: Subset<T, courseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends courseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: courseGroupByArgs['orderBy'] }
        : { orderBy?: courseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, courseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the course model
   */
  readonly fields: courseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__courseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courseintent<T extends course$courseintentArgs<ExtArgs> = {}>(args?: Subset<T, course$courseintentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the course model
   */
  interface courseFieldRefs {
    readonly id: FieldRef<"course", 'Int'>
    readonly title: FieldRef<"course", 'String'>
    readonly slug: FieldRef<"course", 'String'>
    readonly coverImage: FieldRef<"course", 'String'>
    readonly description: FieldRef<"course", 'String'>
    readonly price: FieldRef<"course", 'Decimal'>
    readonly capacity: FieldRef<"course", 'Int'>
    readonly status: FieldRef<"course", 'Boolean'>
    readonly startAt: FieldRef<"course", 'DateTime'>
    readonly durationMinutes: FieldRef<"course", 'Int'>
    readonly createdAt: FieldRef<"course", 'DateTime'>
    readonly updatedAt: FieldRef<"course", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * course findUnique
   */
  export type courseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
    /**
     * Filter, which course to fetch.
     */
    where: courseWhereUniqueInput
  }

  /**
   * course findUniqueOrThrow
   */
  export type courseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
    /**
     * Filter, which course to fetch.
     */
    where: courseWhereUniqueInput
  }

  /**
   * course findFirst
   */
  export type courseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
    /**
     * Filter, which course to fetch.
     */
    where?: courseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: courseOrderByWithRelationInput | courseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: courseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * course findFirstOrThrow
   */
  export type courseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
    /**
     * Filter, which course to fetch.
     */
    where?: courseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: courseOrderByWithRelationInput | courseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: courseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * course findMany
   */
  export type courseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: courseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: courseOrderByWithRelationInput | courseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing courses.
     */
    cursor?: courseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * course create
   */
  export type courseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
    /**
     * The data needed to create a course.
     */
    data: XOR<courseCreateInput, courseUncheckedCreateInput>
  }

  /**
   * course createMany
   */
  export type courseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many courses.
     */
    data: courseCreateManyInput | courseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * course update
   */
  export type courseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
    /**
     * The data needed to update a course.
     */
    data: XOR<courseUpdateInput, courseUncheckedUpdateInput>
    /**
     * Choose, which course to update.
     */
    where: courseWhereUniqueInput
  }

  /**
   * course updateMany
   */
  export type courseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update courses.
     */
    data: XOR<courseUpdateManyMutationInput, courseUncheckedUpdateManyInput>
    /**
     * Filter which courses to update
     */
    where?: courseWhereInput
    /**
     * Limit how many courses to update.
     */
    limit?: number
  }

  /**
   * course upsert
   */
  export type courseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
    /**
     * The filter to search for the course to update in case it exists.
     */
    where: courseWhereUniqueInput
    /**
     * In case the course found by the `where` argument doesn't exist, create a new course with this data.
     */
    create: XOR<courseCreateInput, courseUncheckedCreateInput>
    /**
     * In case the course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<courseUpdateInput, courseUncheckedUpdateInput>
  }

  /**
   * course delete
   */
  export type courseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
    /**
     * Filter which course to delete.
     */
    where: courseWhereUniqueInput
  }

  /**
   * course deleteMany
   */
  export type courseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courses to delete
     */
    where?: courseWhereInput
    /**
     * Limit how many courses to delete.
     */
    limit?: number
  }

  /**
   * course.courseintent
   */
  export type course$courseintentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    where?: courseintentWhereInput
    orderBy?: courseintentOrderByWithRelationInput | courseintentOrderByWithRelationInput[]
    cursor?: courseintentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseintentScalarFieldEnum | CourseintentScalarFieldEnum[]
  }

  /**
   * course without action
   */
  export type courseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course
     */
    select?: courseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course
     */
    omit?: courseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseInclude<ExtArgs> | null
  }


  /**
   * Model courseintent
   */

  export type AggregateCourseintent = {
    _count: CourseintentCountAggregateOutputType | null
    _avg: CourseintentAvgAggregateOutputType | null
    _sum: CourseintentSumAggregateOutputType | null
    _min: CourseintentMinAggregateOutputType | null
    _max: CourseintentMaxAggregateOutputType | null
  }

  export type CourseintentAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
  }

  export type CourseintentSumAggregateOutputType = {
    id: number | null
    courseId: number | null
  }

  export type CourseintentMinAggregateOutputType = {
    id: number | null
    courseId: number | null
    name: string | null
    email: string | null
    phone: string | null
    message: string | null
    createdAt: Date | null
  }

  export type CourseintentMaxAggregateOutputType = {
    id: number | null
    courseId: number | null
    name: string | null
    email: string | null
    phone: string | null
    message: string | null
    createdAt: Date | null
  }

  export type CourseintentCountAggregateOutputType = {
    id: number
    courseId: number
    name: number
    email: number
    phone: number
    message: number
    createdAt: number
    _all: number
  }


  export type CourseintentAvgAggregateInputType = {
    id?: true
    courseId?: true
  }

  export type CourseintentSumAggregateInputType = {
    id?: true
    courseId?: true
  }

  export type CourseintentMinAggregateInputType = {
    id?: true
    courseId?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    createdAt?: true
  }

  export type CourseintentMaxAggregateInputType = {
    id?: true
    courseId?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    createdAt?: true
  }

  export type CourseintentCountAggregateInputType = {
    id?: true
    courseId?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    createdAt?: true
    _all?: true
  }

  export type CourseintentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courseintent to aggregate.
     */
    where?: courseintentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courseintents to fetch.
     */
    orderBy?: courseintentOrderByWithRelationInput | courseintentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: courseintentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courseintents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courseintents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned courseintents
    **/
    _count?: true | CourseintentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseintentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseintentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseintentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseintentMaxAggregateInputType
  }

  export type GetCourseintentAggregateType<T extends CourseintentAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseintent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseintent[P]>
      : GetScalarType<T[P], AggregateCourseintent[P]>
  }




  export type courseintentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: courseintentWhereInput
    orderBy?: courseintentOrderByWithAggregationInput | courseintentOrderByWithAggregationInput[]
    by: CourseintentScalarFieldEnum[] | CourseintentScalarFieldEnum
    having?: courseintentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseintentCountAggregateInputType | true
    _avg?: CourseintentAvgAggregateInputType
    _sum?: CourseintentSumAggregateInputType
    _min?: CourseintentMinAggregateInputType
    _max?: CourseintentMaxAggregateInputType
  }

  export type CourseintentGroupByOutputType = {
    id: number
    courseId: number
    name: string
    email: string
    phone: string
    message: string | null
    createdAt: Date
    _count: CourseintentCountAggregateOutputType | null
    _avg: CourseintentAvgAggregateOutputType | null
    _sum: CourseintentSumAggregateOutputType | null
    _min: CourseintentMinAggregateOutputType | null
    _max: CourseintentMaxAggregateOutputType | null
  }

  type GetCourseintentGroupByPayload<T extends courseintentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseintentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseintentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseintentGroupByOutputType[P]>
            : GetScalarType<T[P], CourseintentGroupByOutputType[P]>
        }
      >
    >


  export type courseintentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    createdAt?: boolean
    course?: boolean | courseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseintent"]>



  export type courseintentSelectScalar = {
    id?: boolean
    courseId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    createdAt?: boolean
  }

  export type courseintentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseId" | "name" | "email" | "phone" | "message" | "createdAt", ExtArgs["result"]["courseintent"]>
  export type courseintentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | courseDefaultArgs<ExtArgs>
  }

  export type $courseintentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "courseintent"
    objects: {
      course: Prisma.$coursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseId: number
      name: string
      email: string
      phone: string
      message: string | null
      createdAt: Date
    }, ExtArgs["result"]["courseintent"]>
    composites: {}
  }

  type courseintentGetPayload<S extends boolean | null | undefined | courseintentDefaultArgs> = $Result.GetResult<Prisma.$courseintentPayload, S>

  type courseintentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<courseintentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseintentCountAggregateInputType | true
    }

  export interface courseintentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['courseintent'], meta: { name: 'courseintent' } }
    /**
     * Find zero or one Courseintent that matches the filter.
     * @param {courseintentFindUniqueArgs} args - Arguments to find a Courseintent
     * @example
     * // Get one Courseintent
     * const courseintent = await prisma.courseintent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends courseintentFindUniqueArgs>(args: SelectSubset<T, courseintentFindUniqueArgs<ExtArgs>>): Prisma__courseintentClient<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Courseintent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {courseintentFindUniqueOrThrowArgs} args - Arguments to find a Courseintent
     * @example
     * // Get one Courseintent
     * const courseintent = await prisma.courseintent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends courseintentFindUniqueOrThrowArgs>(args: SelectSubset<T, courseintentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__courseintentClient<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courseintent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseintentFindFirstArgs} args - Arguments to find a Courseintent
     * @example
     * // Get one Courseintent
     * const courseintent = await prisma.courseintent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends courseintentFindFirstArgs>(args?: SelectSubset<T, courseintentFindFirstArgs<ExtArgs>>): Prisma__courseintentClient<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courseintent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseintentFindFirstOrThrowArgs} args - Arguments to find a Courseintent
     * @example
     * // Get one Courseintent
     * const courseintent = await prisma.courseintent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends courseintentFindFirstOrThrowArgs>(args?: SelectSubset<T, courseintentFindFirstOrThrowArgs<ExtArgs>>): Prisma__courseintentClient<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courseintents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseintentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courseintents
     * const courseintents = await prisma.courseintent.findMany()
     * 
     * // Get first 10 Courseintents
     * const courseintents = await prisma.courseintent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseintentWithIdOnly = await prisma.courseintent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends courseintentFindManyArgs>(args?: SelectSubset<T, courseintentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Courseintent.
     * @param {courseintentCreateArgs} args - Arguments to create a Courseintent.
     * @example
     * // Create one Courseintent
     * const Courseintent = await prisma.courseintent.create({
     *   data: {
     *     // ... data to create a Courseintent
     *   }
     * })
     * 
     */
    create<T extends courseintentCreateArgs>(args: SelectSubset<T, courseintentCreateArgs<ExtArgs>>): Prisma__courseintentClient<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courseintents.
     * @param {courseintentCreateManyArgs} args - Arguments to create many Courseintents.
     * @example
     * // Create many Courseintents
     * const courseintent = await prisma.courseintent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends courseintentCreateManyArgs>(args?: SelectSubset<T, courseintentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Courseintent.
     * @param {courseintentDeleteArgs} args - Arguments to delete one Courseintent.
     * @example
     * // Delete one Courseintent
     * const Courseintent = await prisma.courseintent.delete({
     *   where: {
     *     // ... filter to delete one Courseintent
     *   }
     * })
     * 
     */
    delete<T extends courseintentDeleteArgs>(args: SelectSubset<T, courseintentDeleteArgs<ExtArgs>>): Prisma__courseintentClient<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Courseintent.
     * @param {courseintentUpdateArgs} args - Arguments to update one Courseintent.
     * @example
     * // Update one Courseintent
     * const courseintent = await prisma.courseintent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends courseintentUpdateArgs>(args: SelectSubset<T, courseintentUpdateArgs<ExtArgs>>): Prisma__courseintentClient<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courseintents.
     * @param {courseintentDeleteManyArgs} args - Arguments to filter Courseintents to delete.
     * @example
     * // Delete a few Courseintents
     * const { count } = await prisma.courseintent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends courseintentDeleteManyArgs>(args?: SelectSubset<T, courseintentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courseintents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseintentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courseintents
     * const courseintent = await prisma.courseintent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends courseintentUpdateManyArgs>(args: SelectSubset<T, courseintentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Courseintent.
     * @param {courseintentUpsertArgs} args - Arguments to update or create a Courseintent.
     * @example
     * // Update or create a Courseintent
     * const courseintent = await prisma.courseintent.upsert({
     *   create: {
     *     // ... data to create a Courseintent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courseintent we want to update
     *   }
     * })
     */
    upsert<T extends courseintentUpsertArgs>(args: SelectSubset<T, courseintentUpsertArgs<ExtArgs>>): Prisma__courseintentClient<$Result.GetResult<Prisma.$courseintentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courseintents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseintentCountArgs} args - Arguments to filter Courseintents to count.
     * @example
     * // Count the number of Courseintents
     * const count = await prisma.courseintent.count({
     *   where: {
     *     // ... the filter for the Courseintents we want to count
     *   }
     * })
    **/
    count<T extends courseintentCountArgs>(
      args?: Subset<T, courseintentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseintentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courseintent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseintentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseintentAggregateArgs>(args: Subset<T, CourseintentAggregateArgs>): Prisma.PrismaPromise<GetCourseintentAggregateType<T>>

    /**
     * Group by Courseintent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseintentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends courseintentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: courseintentGroupByArgs['orderBy'] }
        : { orderBy?: courseintentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, courseintentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseintentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the courseintent model
   */
  readonly fields: courseintentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for courseintent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__courseintentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends courseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, courseDefaultArgs<ExtArgs>>): Prisma__courseClient<$Result.GetResult<Prisma.$coursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the courseintent model
   */
  interface courseintentFieldRefs {
    readonly id: FieldRef<"courseintent", 'Int'>
    readonly courseId: FieldRef<"courseintent", 'Int'>
    readonly name: FieldRef<"courseintent", 'String'>
    readonly email: FieldRef<"courseintent", 'String'>
    readonly phone: FieldRef<"courseintent", 'String'>
    readonly message: FieldRef<"courseintent", 'String'>
    readonly createdAt: FieldRef<"courseintent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * courseintent findUnique
   */
  export type courseintentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    /**
     * Filter, which courseintent to fetch.
     */
    where: courseintentWhereUniqueInput
  }

  /**
   * courseintent findUniqueOrThrow
   */
  export type courseintentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    /**
     * Filter, which courseintent to fetch.
     */
    where: courseintentWhereUniqueInput
  }

  /**
   * courseintent findFirst
   */
  export type courseintentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    /**
     * Filter, which courseintent to fetch.
     */
    where?: courseintentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courseintents to fetch.
     */
    orderBy?: courseintentOrderByWithRelationInput | courseintentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courseintents.
     */
    cursor?: courseintentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courseintents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courseintents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courseintents.
     */
    distinct?: CourseintentScalarFieldEnum | CourseintentScalarFieldEnum[]
  }

  /**
   * courseintent findFirstOrThrow
   */
  export type courseintentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    /**
     * Filter, which courseintent to fetch.
     */
    where?: courseintentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courseintents to fetch.
     */
    orderBy?: courseintentOrderByWithRelationInput | courseintentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courseintents.
     */
    cursor?: courseintentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courseintents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courseintents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courseintents.
     */
    distinct?: CourseintentScalarFieldEnum | CourseintentScalarFieldEnum[]
  }

  /**
   * courseintent findMany
   */
  export type courseintentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    /**
     * Filter, which courseintents to fetch.
     */
    where?: courseintentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courseintents to fetch.
     */
    orderBy?: courseintentOrderByWithRelationInput | courseintentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing courseintents.
     */
    cursor?: courseintentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courseintents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courseintents.
     */
    skip?: number
    distinct?: CourseintentScalarFieldEnum | CourseintentScalarFieldEnum[]
  }

  /**
   * courseintent create
   */
  export type courseintentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    /**
     * The data needed to create a courseintent.
     */
    data: XOR<courseintentCreateInput, courseintentUncheckedCreateInput>
  }

  /**
   * courseintent createMany
   */
  export type courseintentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many courseintents.
     */
    data: courseintentCreateManyInput | courseintentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * courseintent update
   */
  export type courseintentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    /**
     * The data needed to update a courseintent.
     */
    data: XOR<courseintentUpdateInput, courseintentUncheckedUpdateInput>
    /**
     * Choose, which courseintent to update.
     */
    where: courseintentWhereUniqueInput
  }

  /**
   * courseintent updateMany
   */
  export type courseintentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update courseintents.
     */
    data: XOR<courseintentUpdateManyMutationInput, courseintentUncheckedUpdateManyInput>
    /**
     * Filter which courseintents to update
     */
    where?: courseintentWhereInput
    /**
     * Limit how many courseintents to update.
     */
    limit?: number
  }

  /**
   * courseintent upsert
   */
  export type courseintentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    /**
     * The filter to search for the courseintent to update in case it exists.
     */
    where: courseintentWhereUniqueInput
    /**
     * In case the courseintent found by the `where` argument doesn't exist, create a new courseintent with this data.
     */
    create: XOR<courseintentCreateInput, courseintentUncheckedCreateInput>
    /**
     * In case the courseintent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<courseintentUpdateInput, courseintentUncheckedUpdateInput>
  }

  /**
   * courseintent delete
   */
  export type courseintentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
    /**
     * Filter which courseintent to delete.
     */
    where: courseintentWhereUniqueInput
  }

  /**
   * courseintent deleteMany
   */
  export type courseintentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courseintents to delete
     */
    where?: courseintentWhereInput
    /**
     * Limit how many courseintents to delete.
     */
    limit?: number
  }

  /**
   * courseintent without action
   */
  export type courseintentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courseintent
     */
    select?: courseintentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courseintent
     */
    omit?: courseintentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: courseintentInclude<ExtArgs> | null
  }


  /**
   * Model discount_code
   */

  export type AggregateDiscount_code = {
    _count: Discount_codeCountAggregateOutputType | null
    _avg: Discount_codeAvgAggregateOutputType | null
    _sum: Discount_codeSumAggregateOutputType | null
    _min: Discount_codeMinAggregateOutputType | null
    _max: Discount_codeMaxAggregateOutputType | null
  }

  export type Discount_codeAvgAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type Discount_codeSumAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type Discount_codeMinAggregateOutputType = {
    id: number | null
    code: string | null
    type: string | null
    value: number | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type Discount_codeMaxAggregateOutputType = {
    id: number | null
    code: string | null
    type: string | null
    value: number | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type Discount_codeCountAggregateOutputType = {
    id: number
    code: number
    type: number
    value: number
    isActive: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type Discount_codeAvgAggregateInputType = {
    id?: true
    value?: true
  }

  export type Discount_codeSumAggregateInputType = {
    id?: true
    value?: true
  }

  export type Discount_codeMinAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
  }

  export type Discount_codeMaxAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
  }

  export type Discount_codeCountAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type Discount_codeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which discount_code to aggregate.
     */
    where?: discount_codeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discount_codes to fetch.
     */
    orderBy?: discount_codeOrderByWithRelationInput | discount_codeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: discount_codeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discount_codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discount_codes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned discount_codes
    **/
    _count?: true | Discount_codeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Discount_codeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Discount_codeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Discount_codeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Discount_codeMaxAggregateInputType
  }

  export type GetDiscount_codeAggregateType<T extends Discount_codeAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscount_code]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscount_code[P]>
      : GetScalarType<T[P], AggregateDiscount_code[P]>
  }




  export type discount_codeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: discount_codeWhereInput
    orderBy?: discount_codeOrderByWithAggregationInput | discount_codeOrderByWithAggregationInput[]
    by: Discount_codeScalarFieldEnum[] | Discount_codeScalarFieldEnum
    having?: discount_codeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Discount_codeCountAggregateInputType | true
    _avg?: Discount_codeAvgAggregateInputType
    _sum?: Discount_codeSumAggregateInputType
    _min?: Discount_codeMinAggregateInputType
    _max?: Discount_codeMaxAggregateInputType
  }

  export type Discount_codeGroupByOutputType = {
    id: number
    code: string
    type: string
    value: number
    isActive: boolean
    expiresAt: Date | null
    createdAt: Date
    _count: Discount_codeCountAggregateOutputType | null
    _avg: Discount_codeAvgAggregateOutputType | null
    _sum: Discount_codeSumAggregateOutputType | null
    _min: Discount_codeMinAggregateOutputType | null
    _max: Discount_codeMaxAggregateOutputType | null
  }

  type GetDiscount_codeGroupByPayload<T extends discount_codeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Discount_codeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Discount_codeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Discount_codeGroupByOutputType[P]>
            : GetScalarType<T[P], Discount_codeGroupByOutputType[P]>
        }
      >
    >


  export type discount_codeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["discount_code"]>



  export type discount_codeSelectScalar = {
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type discount_codeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "type" | "value" | "isActive" | "expiresAt" | "createdAt", ExtArgs["result"]["discount_code"]>

  export type $discount_codePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "discount_code"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      type: string
      value: number
      isActive: boolean
      expiresAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["discount_code"]>
    composites: {}
  }

  type discount_codeGetPayload<S extends boolean | null | undefined | discount_codeDefaultArgs> = $Result.GetResult<Prisma.$discount_codePayload, S>

  type discount_codeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<discount_codeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Discount_codeCountAggregateInputType | true
    }

  export interface discount_codeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discount_code'], meta: { name: 'discount_code' } }
    /**
     * Find zero or one Discount_code that matches the filter.
     * @param {discount_codeFindUniqueArgs} args - Arguments to find a Discount_code
     * @example
     * // Get one Discount_code
     * const discount_code = await prisma.discount_code.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends discount_codeFindUniqueArgs>(args: SelectSubset<T, discount_codeFindUniqueArgs<ExtArgs>>): Prisma__discount_codeClient<$Result.GetResult<Prisma.$discount_codePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Discount_code that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {discount_codeFindUniqueOrThrowArgs} args - Arguments to find a Discount_code
     * @example
     * // Get one Discount_code
     * const discount_code = await prisma.discount_code.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends discount_codeFindUniqueOrThrowArgs>(args: SelectSubset<T, discount_codeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discount_codeClient<$Result.GetResult<Prisma.$discount_codePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Discount_code that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discount_codeFindFirstArgs} args - Arguments to find a Discount_code
     * @example
     * // Get one Discount_code
     * const discount_code = await prisma.discount_code.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends discount_codeFindFirstArgs>(args?: SelectSubset<T, discount_codeFindFirstArgs<ExtArgs>>): Prisma__discount_codeClient<$Result.GetResult<Prisma.$discount_codePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Discount_code that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discount_codeFindFirstOrThrowArgs} args - Arguments to find a Discount_code
     * @example
     * // Get one Discount_code
     * const discount_code = await prisma.discount_code.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends discount_codeFindFirstOrThrowArgs>(args?: SelectSubset<T, discount_codeFindFirstOrThrowArgs<ExtArgs>>): Prisma__discount_codeClient<$Result.GetResult<Prisma.$discount_codePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Discount_codes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discount_codeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discount_codes
     * const discount_codes = await prisma.discount_code.findMany()
     * 
     * // Get first 10 Discount_codes
     * const discount_codes = await prisma.discount_code.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discount_codeWithIdOnly = await prisma.discount_code.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends discount_codeFindManyArgs>(args?: SelectSubset<T, discount_codeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discount_codePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Discount_code.
     * @param {discount_codeCreateArgs} args - Arguments to create a Discount_code.
     * @example
     * // Create one Discount_code
     * const Discount_code = await prisma.discount_code.create({
     *   data: {
     *     // ... data to create a Discount_code
     *   }
     * })
     * 
     */
    create<T extends discount_codeCreateArgs>(args: SelectSubset<T, discount_codeCreateArgs<ExtArgs>>): Prisma__discount_codeClient<$Result.GetResult<Prisma.$discount_codePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Discount_codes.
     * @param {discount_codeCreateManyArgs} args - Arguments to create many Discount_codes.
     * @example
     * // Create many Discount_codes
     * const discount_code = await prisma.discount_code.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends discount_codeCreateManyArgs>(args?: SelectSubset<T, discount_codeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Discount_code.
     * @param {discount_codeDeleteArgs} args - Arguments to delete one Discount_code.
     * @example
     * // Delete one Discount_code
     * const Discount_code = await prisma.discount_code.delete({
     *   where: {
     *     // ... filter to delete one Discount_code
     *   }
     * })
     * 
     */
    delete<T extends discount_codeDeleteArgs>(args: SelectSubset<T, discount_codeDeleteArgs<ExtArgs>>): Prisma__discount_codeClient<$Result.GetResult<Prisma.$discount_codePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Discount_code.
     * @param {discount_codeUpdateArgs} args - Arguments to update one Discount_code.
     * @example
     * // Update one Discount_code
     * const discount_code = await prisma.discount_code.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends discount_codeUpdateArgs>(args: SelectSubset<T, discount_codeUpdateArgs<ExtArgs>>): Prisma__discount_codeClient<$Result.GetResult<Prisma.$discount_codePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Discount_codes.
     * @param {discount_codeDeleteManyArgs} args - Arguments to filter Discount_codes to delete.
     * @example
     * // Delete a few Discount_codes
     * const { count } = await prisma.discount_code.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends discount_codeDeleteManyArgs>(args?: SelectSubset<T, discount_codeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discount_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discount_codeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discount_codes
     * const discount_code = await prisma.discount_code.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends discount_codeUpdateManyArgs>(args: SelectSubset<T, discount_codeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discount_code.
     * @param {discount_codeUpsertArgs} args - Arguments to update or create a Discount_code.
     * @example
     * // Update or create a Discount_code
     * const discount_code = await prisma.discount_code.upsert({
     *   create: {
     *     // ... data to create a Discount_code
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discount_code we want to update
     *   }
     * })
     */
    upsert<T extends discount_codeUpsertArgs>(args: SelectSubset<T, discount_codeUpsertArgs<ExtArgs>>): Prisma__discount_codeClient<$Result.GetResult<Prisma.$discount_codePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Discount_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discount_codeCountArgs} args - Arguments to filter Discount_codes to count.
     * @example
     * // Count the number of Discount_codes
     * const count = await prisma.discount_code.count({
     *   where: {
     *     // ... the filter for the Discount_codes we want to count
     *   }
     * })
    **/
    count<T extends discount_codeCountArgs>(
      args?: Subset<T, discount_codeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Discount_codeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discount_code.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Discount_codeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Discount_codeAggregateArgs>(args: Subset<T, Discount_codeAggregateArgs>): Prisma.PrismaPromise<GetDiscount_codeAggregateType<T>>

    /**
     * Group by Discount_code.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discount_codeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends discount_codeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: discount_codeGroupByArgs['orderBy'] }
        : { orderBy?: discount_codeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, discount_codeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscount_codeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the discount_code model
   */
  readonly fields: discount_codeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for discount_code.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__discount_codeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the discount_code model
   */
  interface discount_codeFieldRefs {
    readonly id: FieldRef<"discount_code", 'Int'>
    readonly code: FieldRef<"discount_code", 'String'>
    readonly type: FieldRef<"discount_code", 'String'>
    readonly value: FieldRef<"discount_code", 'Int'>
    readonly isActive: FieldRef<"discount_code", 'Boolean'>
    readonly expiresAt: FieldRef<"discount_code", 'DateTime'>
    readonly createdAt: FieldRef<"discount_code", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * discount_code findUnique
   */
  export type discount_codeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
    /**
     * Filter, which discount_code to fetch.
     */
    where: discount_codeWhereUniqueInput
  }

  /**
   * discount_code findUniqueOrThrow
   */
  export type discount_codeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
    /**
     * Filter, which discount_code to fetch.
     */
    where: discount_codeWhereUniqueInput
  }

  /**
   * discount_code findFirst
   */
  export type discount_codeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
    /**
     * Filter, which discount_code to fetch.
     */
    where?: discount_codeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discount_codes to fetch.
     */
    orderBy?: discount_codeOrderByWithRelationInput | discount_codeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discount_codes.
     */
    cursor?: discount_codeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discount_codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discount_codes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discount_codes.
     */
    distinct?: Discount_codeScalarFieldEnum | Discount_codeScalarFieldEnum[]
  }

  /**
   * discount_code findFirstOrThrow
   */
  export type discount_codeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
    /**
     * Filter, which discount_code to fetch.
     */
    where?: discount_codeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discount_codes to fetch.
     */
    orderBy?: discount_codeOrderByWithRelationInput | discount_codeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discount_codes.
     */
    cursor?: discount_codeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discount_codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discount_codes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discount_codes.
     */
    distinct?: Discount_codeScalarFieldEnum | Discount_codeScalarFieldEnum[]
  }

  /**
   * discount_code findMany
   */
  export type discount_codeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
    /**
     * Filter, which discount_codes to fetch.
     */
    where?: discount_codeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discount_codes to fetch.
     */
    orderBy?: discount_codeOrderByWithRelationInput | discount_codeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing discount_codes.
     */
    cursor?: discount_codeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discount_codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discount_codes.
     */
    skip?: number
    distinct?: Discount_codeScalarFieldEnum | Discount_codeScalarFieldEnum[]
  }

  /**
   * discount_code create
   */
  export type discount_codeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
    /**
     * The data needed to create a discount_code.
     */
    data: XOR<discount_codeCreateInput, discount_codeUncheckedCreateInput>
  }

  /**
   * discount_code createMany
   */
  export type discount_codeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many discount_codes.
     */
    data: discount_codeCreateManyInput | discount_codeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * discount_code update
   */
  export type discount_codeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
    /**
     * The data needed to update a discount_code.
     */
    data: XOR<discount_codeUpdateInput, discount_codeUncheckedUpdateInput>
    /**
     * Choose, which discount_code to update.
     */
    where: discount_codeWhereUniqueInput
  }

  /**
   * discount_code updateMany
   */
  export type discount_codeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update discount_codes.
     */
    data: XOR<discount_codeUpdateManyMutationInput, discount_codeUncheckedUpdateManyInput>
    /**
     * Filter which discount_codes to update
     */
    where?: discount_codeWhereInput
    /**
     * Limit how many discount_codes to update.
     */
    limit?: number
  }

  /**
   * discount_code upsert
   */
  export type discount_codeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
    /**
     * The filter to search for the discount_code to update in case it exists.
     */
    where: discount_codeWhereUniqueInput
    /**
     * In case the discount_code found by the `where` argument doesn't exist, create a new discount_code with this data.
     */
    create: XOR<discount_codeCreateInput, discount_codeUncheckedCreateInput>
    /**
     * In case the discount_code was found with the provided `where` argument, update it with this data.
     */
    update: XOR<discount_codeUpdateInput, discount_codeUncheckedUpdateInput>
  }

  /**
   * discount_code delete
   */
  export type discount_codeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
    /**
     * Filter which discount_code to delete.
     */
    where: discount_codeWhereUniqueInput
  }

  /**
   * discount_code deleteMany
   */
  export type discount_codeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which discount_codes to delete
     */
    where?: discount_codeWhereInput
    /**
     * Limit how many discount_codes to delete.
     */
    limit?: number
  }

  /**
   * discount_code without action
   */
  export type discount_codeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discount_code
     */
    select?: discount_codeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discount_code
     */
    omit?: discount_codeOmit<ExtArgs> | null
  }


  /**
   * Model order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    subtotal: Decimal | null
    shippingFee: Decimal | null
    discount: Decimal | null
    totalAmount: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    subtotal: Decimal | null
    shippingFee: Decimal | null
    discount: Decimal | null
    totalAmount: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    orderNo: string | null
    buyerName: string | null
    email: string | null
    phone: string | null
    address: string | null
    shippingMethod: $Enums.order_shippingMethod | null
    subtotal: Decimal | null
    shippingFee: Decimal | null
    discount: Decimal | null
    totalAmount: Decimal | null
    status: $Enums.order_status | null
    paymentMethod: $Enums.order_paymentMethod | null
    paidAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    orderNo: string | null
    buyerName: string | null
    email: string | null
    phone: string | null
    address: string | null
    shippingMethod: $Enums.order_shippingMethod | null
    subtotal: Decimal | null
    shippingFee: Decimal | null
    discount: Decimal | null
    totalAmount: Decimal | null
    status: $Enums.order_status | null
    paymentMethod: $Enums.order_paymentMethod | null
    paidAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    orderNo: number
    buyerName: number
    email: number
    phone: number
    address: number
    shippingMethod: number
    subtotal: number
    shippingFee: number
    discount: number
    totalAmount: number
    status: number
    paymentMethod: number
    paymentInfo: number
    paidAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    subtotal?: true
    shippingFee?: true
    discount?: true
    totalAmount?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    subtotal?: true
    shippingFee?: true
    discount?: true
    totalAmount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    orderNo?: true
    buyerName?: true
    email?: true
    phone?: true
    address?: true
    shippingMethod?: true
    subtotal?: true
    shippingFee?: true
    discount?: true
    totalAmount?: true
    status?: true
    paymentMethod?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    orderNo?: true
    buyerName?: true
    email?: true
    phone?: true
    address?: true
    shippingMethod?: true
    subtotal?: true
    shippingFee?: true
    discount?: true
    totalAmount?: true
    status?: true
    paymentMethod?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    orderNo?: true
    buyerName?: true
    email?: true
    phone?: true
    address?: true
    shippingMethod?: true
    subtotal?: true
    shippingFee?: true
    discount?: true
    totalAmount?: true
    status?: true
    paymentMethod?: true
    paymentInfo?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order to aggregate.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type orderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderWhereInput
    orderBy?: orderOrderByWithAggregationInput | orderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: orderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    orderNo: string
    buyerName: string
    email: string
    phone: string
    address: string
    shippingMethod: $Enums.order_shippingMethod
    subtotal: Decimal
    shippingFee: Decimal
    discount: Decimal
    totalAmount: Decimal
    status: $Enums.order_status
    paymentMethod: $Enums.order_paymentMethod
    paymentInfo: JsonValue | null
    paidAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends orderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type orderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNo?: boolean
    buyerName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    shippingMethod?: boolean
    subtotal?: boolean
    shippingFee?: boolean
    discount?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentInfo?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderitem?: boolean | order$orderitemArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>



  export type orderSelectScalar = {
    id?: boolean
    orderNo?: boolean
    buyerName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    shippingMethod?: boolean
    subtotal?: boolean
    shippingFee?: boolean
    discount?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentInfo?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type orderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderNo" | "buyerName" | "email" | "phone" | "address" | "shippingMethod" | "subtotal" | "shippingFee" | "discount" | "totalAmount" | "status" | "paymentMethod" | "paymentInfo" | "paidAt" | "createdAt" | "updatedAt", ExtArgs["result"]["order"]>
  export type orderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderitem?: boolean | order$orderitemArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $orderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "order"
    objects: {
      orderitem: Prisma.$orderitemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderNo: string
      buyerName: string
      email: string
      phone: string
      address: string
      shippingMethod: $Enums.order_shippingMethod
      subtotal: Prisma.Decimal
      shippingFee: Prisma.Decimal
      discount: Prisma.Decimal
      totalAmount: Prisma.Decimal
      status: $Enums.order_status
      paymentMethod: $Enums.order_paymentMethod
      paymentInfo: Prisma.JsonValue | null
      paidAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type orderGetPayload<S extends boolean | null | undefined | orderDefaultArgs> = $Result.GetResult<Prisma.$orderPayload, S>

  type orderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<orderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface orderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['order'], meta: { name: 'order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {orderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends orderFindUniqueArgs>(args: SelectSubset<T, orderFindUniqueArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {orderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends orderFindUniqueOrThrowArgs>(args: SelectSubset<T, orderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends orderFindFirstArgs>(args?: SelectSubset<T, orderFindFirstArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends orderFindFirstOrThrowArgs>(args?: SelectSubset<T, orderFindFirstOrThrowArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends orderFindManyArgs>(args?: SelectSubset<T, orderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {orderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends orderCreateArgs>(args: SelectSubset<T, orderCreateArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {orderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends orderCreateManyArgs>(args?: SelectSubset<T, orderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {orderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends orderDeleteArgs>(args: SelectSubset<T, orderDeleteArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {orderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends orderUpdateArgs>(args: SelectSubset<T, orderUpdateArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {orderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends orderDeleteManyArgs>(args?: SelectSubset<T, orderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends orderUpdateManyArgs>(args: SelectSubset<T, orderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {orderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends orderUpsertArgs>(args: SelectSubset<T, orderUpsertArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends orderCountArgs>(
      args?: Subset<T, orderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orderGroupByArgs['orderBy'] }
        : { orderBy?: orderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the order model
   */
  readonly fields: orderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderitem<T extends order$orderitemArgs<ExtArgs> = {}>(args?: Subset<T, order$orderitemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the order model
   */
  interface orderFieldRefs {
    readonly id: FieldRef<"order", 'Int'>
    readonly orderNo: FieldRef<"order", 'String'>
    readonly buyerName: FieldRef<"order", 'String'>
    readonly email: FieldRef<"order", 'String'>
    readonly phone: FieldRef<"order", 'String'>
    readonly address: FieldRef<"order", 'String'>
    readonly shippingMethod: FieldRef<"order", 'order_shippingMethod'>
    readonly subtotal: FieldRef<"order", 'Decimal'>
    readonly shippingFee: FieldRef<"order", 'Decimal'>
    readonly discount: FieldRef<"order", 'Decimal'>
    readonly totalAmount: FieldRef<"order", 'Decimal'>
    readonly status: FieldRef<"order", 'order_status'>
    readonly paymentMethod: FieldRef<"order", 'order_paymentMethod'>
    readonly paymentInfo: FieldRef<"order", 'Json'>
    readonly paidAt: FieldRef<"order", 'DateTime'>
    readonly createdAt: FieldRef<"order", 'DateTime'>
    readonly updatedAt: FieldRef<"order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * order findUnique
   */
  export type orderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order findUniqueOrThrow
   */
  export type orderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order findFirst
   */
  export type orderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * order findFirstOrThrow
   */
  export type orderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * order findMany
   */
  export type orderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * order create
   */
  export type orderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * The data needed to create a order.
     */
    data: XOR<orderCreateInput, orderUncheckedCreateInput>
  }

  /**
   * order createMany
   */
  export type orderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: orderCreateManyInput | orderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * order update
   */
  export type orderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * The data needed to update a order.
     */
    data: XOR<orderUpdateInput, orderUncheckedUpdateInput>
    /**
     * Choose, which order to update.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order updateMany
   */
  export type orderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: orderWhereInput
    /**
     * Limit how many orders to update.
     */
    limit?: number
  }

  /**
   * order upsert
   */
  export type orderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * The filter to search for the order to update in case it exists.
     */
    where: orderWhereUniqueInput
    /**
     * In case the order found by the `where` argument doesn't exist, create a new order with this data.
     */
    create: XOR<orderCreateInput, orderUncheckedCreateInput>
    /**
     * In case the order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderUpdateInput, orderUncheckedUpdateInput>
  }

  /**
   * order delete
   */
  export type orderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter which order to delete.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order deleteMany
   */
  export type orderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: orderWhereInput
    /**
     * Limit how many orders to delete.
     */
    limit?: number
  }

  /**
   * order.orderitem
   */
  export type order$orderitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    where?: orderitemWhereInput
    orderBy?: orderitemOrderByWithRelationInput | orderitemOrderByWithRelationInput[]
    cursor?: orderitemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderitemScalarFieldEnum | OrderitemScalarFieldEnum[]
  }

  /**
   * order without action
   */
  export type orderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
  }


  /**
   * Model orderitem
   */

  export type AggregateOrderitem = {
    _count: OrderitemCountAggregateOutputType | null
    _avg: OrderitemAvgAggregateOutputType | null
    _sum: OrderitemSumAggregateOutputType | null
    _min: OrderitemMinAggregateOutputType | null
    _max: OrderitemMaxAggregateOutputType | null
  }

  export type OrderitemAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    variantId: number | null
    qty: number | null
    unitPrice: Decimal | null
  }

  export type OrderitemSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    variantId: number | null
    qty: number | null
    unitPrice: Decimal | null
  }

  export type OrderitemMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    variantId: number | null
    qty: number | null
    unitPrice: Decimal | null
  }

  export type OrderitemMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    variantId: number | null
    qty: number | null
    unitPrice: Decimal | null
  }

  export type OrderitemCountAggregateOutputType = {
    id: number
    orderId: number
    productId: number
    variantId: number
    qty: number
    unitPrice: number
    addOnJson: number
    _all: number
  }


  export type OrderitemAvgAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    variantId?: true
    qty?: true
    unitPrice?: true
  }

  export type OrderitemSumAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    variantId?: true
    qty?: true
    unitPrice?: true
  }

  export type OrderitemMinAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    variantId?: true
    qty?: true
    unitPrice?: true
  }

  export type OrderitemMaxAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    variantId?: true
    qty?: true
    unitPrice?: true
  }

  export type OrderitemCountAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    variantId?: true
    qty?: true
    unitPrice?: true
    addOnJson?: true
    _all?: true
  }

  export type OrderitemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderitem to aggregate.
     */
    where?: orderitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderitems to fetch.
     */
    orderBy?: orderitemOrderByWithRelationInput | orderitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orderitems
    **/
    _count?: true | OrderitemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderitemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderitemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderitemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderitemMaxAggregateInputType
  }

  export type GetOrderitemAggregateType<T extends OrderitemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderitem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderitem[P]>
      : GetScalarType<T[P], AggregateOrderitem[P]>
  }




  export type orderitemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderitemWhereInput
    orderBy?: orderitemOrderByWithAggregationInput | orderitemOrderByWithAggregationInput[]
    by: OrderitemScalarFieldEnum[] | OrderitemScalarFieldEnum
    having?: orderitemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderitemCountAggregateInputType | true
    _avg?: OrderitemAvgAggregateInputType
    _sum?: OrderitemSumAggregateInputType
    _min?: OrderitemMinAggregateInputType
    _max?: OrderitemMaxAggregateInputType
  }

  export type OrderitemGroupByOutputType = {
    id: number
    orderId: number
    productId: number
    variantId: number | null
    qty: number
    unitPrice: Decimal
    addOnJson: JsonValue | null
    _count: OrderitemCountAggregateOutputType | null
    _avg: OrderitemAvgAggregateOutputType | null
    _sum: OrderitemSumAggregateOutputType | null
    _min: OrderitemMinAggregateOutputType | null
    _max: OrderitemMaxAggregateOutputType | null
  }

  type GetOrderitemGroupByPayload<T extends orderitemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderitemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderitemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderitemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderitemGroupByOutputType[P]>
        }
      >
    >


  export type orderitemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    variantId?: boolean
    qty?: boolean
    unitPrice?: boolean
    addOnJson?: boolean
    order?: boolean | orderDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    productvariant?: boolean | orderitem$productvariantArgs<ExtArgs>
  }, ExtArgs["result"]["orderitem"]>



  export type orderitemSelectScalar = {
    id?: boolean
    orderId?: boolean
    productId?: boolean
    variantId?: boolean
    qty?: boolean
    unitPrice?: boolean
    addOnJson?: boolean
  }

  export type orderitemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "productId" | "variantId" | "qty" | "unitPrice" | "addOnJson", ExtArgs["result"]["orderitem"]>
  export type orderitemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | orderDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    productvariant?: boolean | orderitem$productvariantArgs<ExtArgs>
  }

  export type $orderitemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orderitem"
    objects: {
      order: Prisma.$orderPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
      productvariant: Prisma.$productvariantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      productId: number
      variantId: number | null
      qty: number
      unitPrice: Prisma.Decimal
      addOnJson: Prisma.JsonValue | null
    }, ExtArgs["result"]["orderitem"]>
    composites: {}
  }

  type orderitemGetPayload<S extends boolean | null | undefined | orderitemDefaultArgs> = $Result.GetResult<Prisma.$orderitemPayload, S>

  type orderitemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<orderitemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderitemCountAggregateInputType | true
    }

  export interface orderitemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orderitem'], meta: { name: 'orderitem' } }
    /**
     * Find zero or one Orderitem that matches the filter.
     * @param {orderitemFindUniqueArgs} args - Arguments to find a Orderitem
     * @example
     * // Get one Orderitem
     * const orderitem = await prisma.orderitem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends orderitemFindUniqueArgs>(args: SelectSubset<T, orderitemFindUniqueArgs<ExtArgs>>): Prisma__orderitemClient<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Orderitem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {orderitemFindUniqueOrThrowArgs} args - Arguments to find a Orderitem
     * @example
     * // Get one Orderitem
     * const orderitem = await prisma.orderitem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends orderitemFindUniqueOrThrowArgs>(args: SelectSubset<T, orderitemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__orderitemClient<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Orderitem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderitemFindFirstArgs} args - Arguments to find a Orderitem
     * @example
     * // Get one Orderitem
     * const orderitem = await prisma.orderitem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends orderitemFindFirstArgs>(args?: SelectSubset<T, orderitemFindFirstArgs<ExtArgs>>): Prisma__orderitemClient<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Orderitem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderitemFindFirstOrThrowArgs} args - Arguments to find a Orderitem
     * @example
     * // Get one Orderitem
     * const orderitem = await prisma.orderitem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends orderitemFindFirstOrThrowArgs>(args?: SelectSubset<T, orderitemFindFirstOrThrowArgs<ExtArgs>>): Prisma__orderitemClient<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orderitems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderitemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orderitems
     * const orderitems = await prisma.orderitem.findMany()
     * 
     * // Get first 10 Orderitems
     * const orderitems = await prisma.orderitem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderitemWithIdOnly = await prisma.orderitem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends orderitemFindManyArgs>(args?: SelectSubset<T, orderitemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Orderitem.
     * @param {orderitemCreateArgs} args - Arguments to create a Orderitem.
     * @example
     * // Create one Orderitem
     * const Orderitem = await prisma.orderitem.create({
     *   data: {
     *     // ... data to create a Orderitem
     *   }
     * })
     * 
     */
    create<T extends orderitemCreateArgs>(args: SelectSubset<T, orderitemCreateArgs<ExtArgs>>): Prisma__orderitemClient<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orderitems.
     * @param {orderitemCreateManyArgs} args - Arguments to create many Orderitems.
     * @example
     * // Create many Orderitems
     * const orderitem = await prisma.orderitem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends orderitemCreateManyArgs>(args?: SelectSubset<T, orderitemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orderitem.
     * @param {orderitemDeleteArgs} args - Arguments to delete one Orderitem.
     * @example
     * // Delete one Orderitem
     * const Orderitem = await prisma.orderitem.delete({
     *   where: {
     *     // ... filter to delete one Orderitem
     *   }
     * })
     * 
     */
    delete<T extends orderitemDeleteArgs>(args: SelectSubset<T, orderitemDeleteArgs<ExtArgs>>): Prisma__orderitemClient<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Orderitem.
     * @param {orderitemUpdateArgs} args - Arguments to update one Orderitem.
     * @example
     * // Update one Orderitem
     * const orderitem = await prisma.orderitem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends orderitemUpdateArgs>(args: SelectSubset<T, orderitemUpdateArgs<ExtArgs>>): Prisma__orderitemClient<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orderitems.
     * @param {orderitemDeleteManyArgs} args - Arguments to filter Orderitems to delete.
     * @example
     * // Delete a few Orderitems
     * const { count } = await prisma.orderitem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends orderitemDeleteManyArgs>(args?: SelectSubset<T, orderitemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orderitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderitemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orderitems
     * const orderitem = await prisma.orderitem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends orderitemUpdateManyArgs>(args: SelectSubset<T, orderitemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orderitem.
     * @param {orderitemUpsertArgs} args - Arguments to update or create a Orderitem.
     * @example
     * // Update or create a Orderitem
     * const orderitem = await prisma.orderitem.upsert({
     *   create: {
     *     // ... data to create a Orderitem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orderitem we want to update
     *   }
     * })
     */
    upsert<T extends orderitemUpsertArgs>(args: SelectSubset<T, orderitemUpsertArgs<ExtArgs>>): Prisma__orderitemClient<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orderitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderitemCountArgs} args - Arguments to filter Orderitems to count.
     * @example
     * // Count the number of Orderitems
     * const count = await prisma.orderitem.count({
     *   where: {
     *     // ... the filter for the Orderitems we want to count
     *   }
     * })
    **/
    count<T extends orderitemCountArgs>(
      args?: Subset<T, orderitemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderitemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orderitem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderitemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderitemAggregateArgs>(args: Subset<T, OrderitemAggregateArgs>): Prisma.PrismaPromise<GetOrderitemAggregateType<T>>

    /**
     * Group by Orderitem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderitemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orderitemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orderitemGroupByArgs['orderBy'] }
        : { orderBy?: orderitemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orderitemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderitemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orderitem model
   */
  readonly fields: orderitemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orderitem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orderitemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends orderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, orderDefaultArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    productvariant<T extends orderitem$productvariantArgs<ExtArgs> = {}>(args?: Subset<T, orderitem$productvariantArgs<ExtArgs>>): Prisma__productvariantClient<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orderitem model
   */
  interface orderitemFieldRefs {
    readonly id: FieldRef<"orderitem", 'Int'>
    readonly orderId: FieldRef<"orderitem", 'Int'>
    readonly productId: FieldRef<"orderitem", 'Int'>
    readonly variantId: FieldRef<"orderitem", 'Int'>
    readonly qty: FieldRef<"orderitem", 'Int'>
    readonly unitPrice: FieldRef<"orderitem", 'Decimal'>
    readonly addOnJson: FieldRef<"orderitem", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * orderitem findUnique
   */
  export type orderitemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    /**
     * Filter, which orderitem to fetch.
     */
    where: orderitemWhereUniqueInput
  }

  /**
   * orderitem findUniqueOrThrow
   */
  export type orderitemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    /**
     * Filter, which orderitem to fetch.
     */
    where: orderitemWhereUniqueInput
  }

  /**
   * orderitem findFirst
   */
  export type orderitemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    /**
     * Filter, which orderitem to fetch.
     */
    where?: orderitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderitems to fetch.
     */
    orderBy?: orderitemOrderByWithRelationInput | orderitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderitems.
     */
    cursor?: orderitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderitems.
     */
    distinct?: OrderitemScalarFieldEnum | OrderitemScalarFieldEnum[]
  }

  /**
   * orderitem findFirstOrThrow
   */
  export type orderitemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    /**
     * Filter, which orderitem to fetch.
     */
    where?: orderitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderitems to fetch.
     */
    orderBy?: orderitemOrderByWithRelationInput | orderitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderitems.
     */
    cursor?: orderitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderitems.
     */
    distinct?: OrderitemScalarFieldEnum | OrderitemScalarFieldEnum[]
  }

  /**
   * orderitem findMany
   */
  export type orderitemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    /**
     * Filter, which orderitems to fetch.
     */
    where?: orderitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderitems to fetch.
     */
    orderBy?: orderitemOrderByWithRelationInput | orderitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orderitems.
     */
    cursor?: orderitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderitems.
     */
    skip?: number
    distinct?: OrderitemScalarFieldEnum | OrderitemScalarFieldEnum[]
  }

  /**
   * orderitem create
   */
  export type orderitemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    /**
     * The data needed to create a orderitem.
     */
    data: XOR<orderitemCreateInput, orderitemUncheckedCreateInput>
  }

  /**
   * orderitem createMany
   */
  export type orderitemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orderitems.
     */
    data: orderitemCreateManyInput | orderitemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orderitem update
   */
  export type orderitemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    /**
     * The data needed to update a orderitem.
     */
    data: XOR<orderitemUpdateInput, orderitemUncheckedUpdateInput>
    /**
     * Choose, which orderitem to update.
     */
    where: orderitemWhereUniqueInput
  }

  /**
   * orderitem updateMany
   */
  export type orderitemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orderitems.
     */
    data: XOR<orderitemUpdateManyMutationInput, orderitemUncheckedUpdateManyInput>
    /**
     * Filter which orderitems to update
     */
    where?: orderitemWhereInput
    /**
     * Limit how many orderitems to update.
     */
    limit?: number
  }

  /**
   * orderitem upsert
   */
  export type orderitemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    /**
     * The filter to search for the orderitem to update in case it exists.
     */
    where: orderitemWhereUniqueInput
    /**
     * In case the orderitem found by the `where` argument doesn't exist, create a new orderitem with this data.
     */
    create: XOR<orderitemCreateInput, orderitemUncheckedCreateInput>
    /**
     * In case the orderitem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderitemUpdateInput, orderitemUncheckedUpdateInput>
  }

  /**
   * orderitem delete
   */
  export type orderitemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    /**
     * Filter which orderitem to delete.
     */
    where: orderitemWhereUniqueInput
  }

  /**
   * orderitem deleteMany
   */
  export type orderitemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderitems to delete
     */
    where?: orderitemWhereInput
    /**
     * Limit how many orderitems to delete.
     */
    limit?: number
  }

  /**
   * orderitem.productvariant
   */
  export type orderitem$productvariantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    where?: productvariantWhereInput
  }

  /**
   * orderitem without action
   */
  export type orderitemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
  }


  /**
   * Model product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    subcategoryId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    subcategoryId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    categoryId: number | null
    subcategoryId: number | null
    isAddon: boolean | null
    isVisible: boolean | null
    description: string | null
    heroImage: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isHot: boolean | null
    ingredients: string | null
    shelfLife: string | null
    flavorProfile: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    categoryId: number | null
    subcategoryId: number | null
    isAddon: boolean | null
    isVisible: boolean | null
    description: string | null
    heroImage: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isHot: boolean | null
    ingredients: string | null
    shelfLife: string | null
    flavorProfile: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    categoryId: number
    subcategoryId: number
    isAddon: number
    isVisible: number
    description: number
    heroImage: number
    status: number
    createdAt: number
    updatedAt: number
    isHot: number
    ingredients: number
    shelfLife: number
    flavorProfile: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    categoryId?: true
    subcategoryId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    categoryId?: true
    subcategoryId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    categoryId?: true
    subcategoryId?: true
    isAddon?: true
    isVisible?: true
    description?: true
    heroImage?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    isHot?: true
    ingredients?: true
    shelfLife?: true
    flavorProfile?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    categoryId?: true
    subcategoryId?: true
    isAddon?: true
    isVisible?: true
    description?: true
    heroImage?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    isHot?: true
    ingredients?: true
    shelfLife?: true
    flavorProfile?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    categoryId?: true
    subcategoryId?: true
    isAddon?: true
    isVisible?: true
    description?: true
    heroImage?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    isHot?: true
    ingredients?: true
    shelfLife?: true
    flavorProfile?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product to aggregate.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type productGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
    orderBy?: productOrderByWithAggregationInput | productOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    slug: string
    categoryId: number
    subcategoryId: number | null
    isAddon: boolean
    isVisible: boolean
    description: string | null
    heroImage: string | null
    status: boolean
    createdAt: Date
    updatedAt: Date
    isHot: boolean
    ingredients: string | null
    shelfLife: string | null
    flavorProfile: string | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends productGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    categoryId?: boolean
    subcategoryId?: boolean
    isAddon?: boolean
    isVisible?: boolean
    description?: boolean
    heroImage?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isHot?: boolean
    ingredients?: boolean
    shelfLife?: boolean
    flavorProfile?: boolean
    category?: boolean | product_categoryDefaultArgs<ExtArgs>
    subcategory?: boolean | product$subcategoryArgs<ExtArgs>
    orderitem?: boolean | product$orderitemArgs<ExtArgs>
    productvariant?: boolean | product$productvariantArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>



  export type productSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    categoryId?: boolean
    subcategoryId?: boolean
    isAddon?: boolean
    isVisible?: boolean
    description?: boolean
    heroImage?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isHot?: boolean
    ingredients?: boolean
    shelfLife?: boolean
    flavorProfile?: boolean
  }

  export type productOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "categoryId" | "subcategoryId" | "isAddon" | "isVisible" | "description" | "heroImage" | "status" | "createdAt" | "updatedAt" | "isHot" | "ingredients" | "shelfLife" | "flavorProfile", ExtArgs["result"]["product"]>
  export type productInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | product_categoryDefaultArgs<ExtArgs>
    subcategory?: boolean | product$subcategoryArgs<ExtArgs>
    orderitem?: boolean | product$orderitemArgs<ExtArgs>
    productvariant?: boolean | product$productvariantArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $productPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product"
    objects: {
      category: Prisma.$product_categoryPayload<ExtArgs>
      subcategory: Prisma.$product_subcategoryPayload<ExtArgs> | null
      orderitem: Prisma.$orderitemPayload<ExtArgs>[]
      productvariant: Prisma.$productvariantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      categoryId: number
      subcategoryId: number | null
      isAddon: boolean
      isVisible: boolean
      description: string | null
      heroImage: string | null
      status: boolean
      createdAt: Date
      updatedAt: Date
      isHot: boolean
      ingredients: string | null
      shelfLife: string | null
      flavorProfile: string | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type productGetPayload<S extends boolean | null | undefined | productDefaultArgs> = $Result.GetResult<Prisma.$productPayload, S>

  type productCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<productFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface productDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product'], meta: { name: 'product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productFindUniqueArgs>(args: SelectSubset<T, productFindUniqueArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs>(args: SelectSubset<T, productFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productFindFirstArgs>(args?: SelectSubset<T, productFindFirstArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productFindFirstOrThrowArgs>(args?: SelectSubset<T, productFindFirstOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productFindManyArgs>(args?: SelectSubset<T, productFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends productCreateArgs>(args: SelectSubset<T, productCreateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {productCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productCreateManyArgs>(args?: SelectSubset<T, productCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends productDeleteArgs>(args: SelectSubset<T, productDeleteArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productUpdateArgs>(args: SelectSubset<T, productUpdateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productDeleteManyArgs>(args?: SelectSubset<T, productDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productUpdateManyArgs>(args: SelectSubset<T, productUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends productUpsertArgs>(args: SelectSubset<T, productUpsertArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productGroupByArgs['orderBy'] }
        : { orderBy?: productGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product model
   */
  readonly fields: productFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends product_categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, product_categoryDefaultArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subcategory<T extends product$subcategoryArgs<ExtArgs> = {}>(args?: Subset<T, product$subcategoryArgs<ExtArgs>>): Prisma__product_subcategoryClient<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    orderitem<T extends product$orderitemArgs<ExtArgs> = {}>(args?: Subset<T, product$orderitemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    productvariant<T extends product$productvariantArgs<ExtArgs> = {}>(args?: Subset<T, product$productvariantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product model
   */
  interface productFieldRefs {
    readonly id: FieldRef<"product", 'Int'>
    readonly name: FieldRef<"product", 'String'>
    readonly slug: FieldRef<"product", 'String'>
    readonly categoryId: FieldRef<"product", 'Int'>
    readonly subcategoryId: FieldRef<"product", 'Int'>
    readonly isAddon: FieldRef<"product", 'Boolean'>
    readonly isVisible: FieldRef<"product", 'Boolean'>
    readonly description: FieldRef<"product", 'String'>
    readonly heroImage: FieldRef<"product", 'String'>
    readonly status: FieldRef<"product", 'Boolean'>
    readonly createdAt: FieldRef<"product", 'DateTime'>
    readonly updatedAt: FieldRef<"product", 'DateTime'>
    readonly isHot: FieldRef<"product", 'Boolean'>
    readonly ingredients: FieldRef<"product", 'String'>
    readonly shelfLife: FieldRef<"product", 'String'>
    readonly flavorProfile: FieldRef<"product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * product findUnique
   */
  export type productFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findFirst
   */
  export type productFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findMany
   */
  export type productFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product create
   */
  export type productCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to create a product.
     */
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }

  /**
   * product createMany
   */
  export type productCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productCreateManyInput | productCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product update
   */
  export type productUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to update a product.
     */
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     */
    where: productWhereUniqueInput
  }

  /**
   * product updateMany
   */
  export type productUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
    /**
     * Limit how many products to update.
     */
    limit?: number
  }

  /**
   * product upsert
   */
  export type productUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The filter to search for the product to update in case it exists.
     */
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     */
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }

  /**
   * product delete
   */
  export type productDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter which product to delete.
     */
    where: productWhereUniqueInput
  }

  /**
   * product deleteMany
   */
  export type productDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productWhereInput
    /**
     * Limit how many products to delete.
     */
    limit?: number
  }

  /**
   * product.subcategory
   */
  export type product$subcategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    where?: product_subcategoryWhereInput
  }

  /**
   * product.orderitem
   */
  export type product$orderitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    where?: orderitemWhereInput
    orderBy?: orderitemOrderByWithRelationInput | orderitemOrderByWithRelationInput[]
    cursor?: orderitemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderitemScalarFieldEnum | OrderitemScalarFieldEnum[]
  }

  /**
   * product.productvariant
   */
  export type product$productvariantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    where?: productvariantWhereInput
    orderBy?: productvariantOrderByWithRelationInput | productvariantOrderByWithRelationInput[]
    cursor?: productvariantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductvariantScalarFieldEnum | ProductvariantScalarFieldEnum[]
  }

  /**
   * product without action
   */
  export type productDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
  }


  /**
   * Model product_category
   */

  export type AggregateProduct_category = {
    _count: Product_categoryCountAggregateOutputType | null
    _avg: Product_categoryAvgAggregateOutputType | null
    _sum: Product_categorySumAggregateOutputType | null
    _min: Product_categoryMinAggregateOutputType | null
    _max: Product_categoryMaxAggregateOutputType | null
  }

  export type Product_categoryAvgAggregateOutputType = {
    id: number | null
    orderIndex: number | null
  }

  export type Product_categorySumAggregateOutputType = {
    id: number | null
    orderIndex: number | null
  }

  export type Product_categoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    orderIndex: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Product_categoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    orderIndex: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Product_categoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    orderIndex: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type Product_categoryAvgAggregateInputType = {
    id?: true
    orderIndex?: true
  }

  export type Product_categorySumAggregateInputType = {
    id?: true
    orderIndex?: true
  }

  export type Product_categoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Product_categoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Product_categoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type Product_categoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_category to aggregate.
     */
    where?: product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_categories
    **/
    _count?: true | Product_categoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_categoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_categorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_categoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_categoryMaxAggregateInputType
  }

  export type GetProduct_categoryAggregateType<T extends Product_categoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_category]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_category[P]>
      : GetScalarType<T[P], AggregateProduct_category[P]>
  }




  export type product_categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_categoryWhereInput
    orderBy?: product_categoryOrderByWithAggregationInput | product_categoryOrderByWithAggregationInput[]
    by: Product_categoryScalarFieldEnum[] | Product_categoryScalarFieldEnum
    having?: product_categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_categoryCountAggregateInputType | true
    _avg?: Product_categoryAvgAggregateInputType
    _sum?: Product_categorySumAggregateInputType
    _min?: Product_categoryMinAggregateInputType
    _max?: Product_categoryMaxAggregateInputType
  }

  export type Product_categoryGroupByOutputType = {
    id: number
    name: string
    slug: string
    description: string | null
    orderIndex: number | null
    createdAt: Date
    updatedAt: Date
    _count: Product_categoryCountAggregateOutputType | null
    _avg: Product_categoryAvgAggregateOutputType | null
    _sum: Product_categorySumAggregateOutputType | null
    _min: Product_categoryMinAggregateOutputType | null
    _max: Product_categoryMaxAggregateOutputType | null
  }

  type GetProduct_categoryGroupByPayload<T extends product_categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_categoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_categoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_categoryGroupByOutputType[P]>
            : GetScalarType<T[P], Product_categoryGroupByOutputType[P]>
        }
      >
    >


  export type product_categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    products?: boolean | product_category$productsArgs<ExtArgs>
    subcategories?: boolean | product_category$subcategoriesArgs<ExtArgs>
    _count?: boolean | Product_categoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_category"]>



  export type product_categorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type product_categoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "orderIndex" | "createdAt" | "updatedAt", ExtArgs["result"]["product_category"]>
  export type product_categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | product_category$productsArgs<ExtArgs>
    subcategories?: boolean | product_category$subcategoriesArgs<ExtArgs>
    _count?: boolean | Product_categoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $product_categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_category"
    objects: {
      products: Prisma.$productPayload<ExtArgs>[]
      subcategories: Prisma.$product_subcategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      description: string | null
      orderIndex: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product_category"]>
    composites: {}
  }

  type product_categoryGetPayload<S extends boolean | null | undefined | product_categoryDefaultArgs> = $Result.GetResult<Prisma.$product_categoryPayload, S>

  type product_categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<product_categoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Product_categoryCountAggregateInputType | true
    }

  export interface product_categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_category'], meta: { name: 'product_category' } }
    /**
     * Find zero or one Product_category that matches the filter.
     * @param {product_categoryFindUniqueArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends product_categoryFindUniqueArgs>(args: SelectSubset<T, product_categoryFindUniqueArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product_category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {product_categoryFindUniqueOrThrowArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends product_categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, product_categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product_category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryFindFirstArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends product_categoryFindFirstArgs>(args?: SelectSubset<T, product_categoryFindFirstArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product_category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryFindFirstOrThrowArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends product_categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, product_categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Product_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_categories
     * const product_categories = await prisma.product_category.findMany()
     * 
     * // Get first 10 Product_categories
     * const product_categories = await prisma.product_category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_categoryWithIdOnly = await prisma.product_category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends product_categoryFindManyArgs>(args?: SelectSubset<T, product_categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product_category.
     * @param {product_categoryCreateArgs} args - Arguments to create a Product_category.
     * @example
     * // Create one Product_category
     * const Product_category = await prisma.product_category.create({
     *   data: {
     *     // ... data to create a Product_category
     *   }
     * })
     * 
     */
    create<T extends product_categoryCreateArgs>(args: SelectSubset<T, product_categoryCreateArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Product_categories.
     * @param {product_categoryCreateManyArgs} args - Arguments to create many Product_categories.
     * @example
     * // Create many Product_categories
     * const product_category = await prisma.product_category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends product_categoryCreateManyArgs>(args?: SelectSubset<T, product_categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_category.
     * @param {product_categoryDeleteArgs} args - Arguments to delete one Product_category.
     * @example
     * // Delete one Product_category
     * const Product_category = await prisma.product_category.delete({
     *   where: {
     *     // ... filter to delete one Product_category
     *   }
     * })
     * 
     */
    delete<T extends product_categoryDeleteArgs>(args: SelectSubset<T, product_categoryDeleteArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product_category.
     * @param {product_categoryUpdateArgs} args - Arguments to update one Product_category.
     * @example
     * // Update one Product_category
     * const product_category = await prisma.product_category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends product_categoryUpdateArgs>(args: SelectSubset<T, product_categoryUpdateArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Product_categories.
     * @param {product_categoryDeleteManyArgs} args - Arguments to filter Product_categories to delete.
     * @example
     * // Delete a few Product_categories
     * const { count } = await prisma.product_category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends product_categoryDeleteManyArgs>(args?: SelectSubset<T, product_categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_categories
     * const product_category = await prisma.product_category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends product_categoryUpdateManyArgs>(args: SelectSubset<T, product_categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_category.
     * @param {product_categoryUpsertArgs} args - Arguments to update or create a Product_category.
     * @example
     * // Update or create a Product_category
     * const product_category = await prisma.product_category.upsert({
     *   create: {
     *     // ... data to create a Product_category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_category we want to update
     *   }
     * })
     */
    upsert<T extends product_categoryUpsertArgs>(args: SelectSubset<T, product_categoryUpsertArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryCountArgs} args - Arguments to filter Product_categories to count.
     * @example
     * // Count the number of Product_categories
     * const count = await prisma.product_category.count({
     *   where: {
     *     // ... the filter for the Product_categories we want to count
     *   }
     * })
    **/
    count<T extends product_categoryCountArgs>(
      args?: Subset<T, product_categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_categoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_categoryAggregateArgs>(args: Subset<T, Product_categoryAggregateArgs>): Prisma.PrismaPromise<GetProduct_categoryAggregateType<T>>

    /**
     * Group by Product_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_categoryGroupByArgs['orderBy'] }
        : { orderBy?: product_categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_categoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_category model
   */
  readonly fields: product_categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends product_category$productsArgs<ExtArgs> = {}>(args?: Subset<T, product_category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subcategories<T extends product_category$subcategoriesArgs<ExtArgs> = {}>(args?: Subset<T, product_category$subcategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product_category model
   */
  interface product_categoryFieldRefs {
    readonly id: FieldRef<"product_category", 'Int'>
    readonly name: FieldRef<"product_category", 'String'>
    readonly slug: FieldRef<"product_category", 'String'>
    readonly description: FieldRef<"product_category", 'String'>
    readonly orderIndex: FieldRef<"product_category", 'Int'>
    readonly createdAt: FieldRef<"product_category", 'DateTime'>
    readonly updatedAt: FieldRef<"product_category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * product_category findUnique
   */
  export type product_categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_category to fetch.
     */
    where: product_categoryWhereUniqueInput
  }

  /**
   * product_category findUniqueOrThrow
   */
  export type product_categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_category to fetch.
     */
    where: product_categoryWhereUniqueInput
  }

  /**
   * product_category findFirst
   */
  export type product_categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_category to fetch.
     */
    where?: product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_categories.
     */
    cursor?: product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_categories.
     */
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }

  /**
   * product_category findFirstOrThrow
   */
  export type product_categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_category to fetch.
     */
    where?: product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_categories.
     */
    cursor?: product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_categories.
     */
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }

  /**
   * product_category findMany
   */
  export type product_categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_categories to fetch.
     */
    where?: product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_categories.
     */
    cursor?: product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }

  /**
   * product_category create
   */
  export type product_categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a product_category.
     */
    data: XOR<product_categoryCreateInput, product_categoryUncheckedCreateInput>
  }

  /**
   * product_category createMany
   */
  export type product_categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_categories.
     */
    data: product_categoryCreateManyInput | product_categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_category update
   */
  export type product_categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a product_category.
     */
    data: XOR<product_categoryUpdateInput, product_categoryUncheckedUpdateInput>
    /**
     * Choose, which product_category to update.
     */
    where: product_categoryWhereUniqueInput
  }

  /**
   * product_category updateMany
   */
  export type product_categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_categories.
     */
    data: XOR<product_categoryUpdateManyMutationInput, product_categoryUncheckedUpdateManyInput>
    /**
     * Filter which product_categories to update
     */
    where?: product_categoryWhereInput
    /**
     * Limit how many product_categories to update.
     */
    limit?: number
  }

  /**
   * product_category upsert
   */
  export type product_categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the product_category to update in case it exists.
     */
    where: product_categoryWhereUniqueInput
    /**
     * In case the product_category found by the `where` argument doesn't exist, create a new product_category with this data.
     */
    create: XOR<product_categoryCreateInput, product_categoryUncheckedCreateInput>
    /**
     * In case the product_category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_categoryUpdateInput, product_categoryUncheckedUpdateInput>
  }

  /**
   * product_category delete
   */
  export type product_categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter which product_category to delete.
     */
    where: product_categoryWhereUniqueInput
  }

  /**
   * product_category deleteMany
   */
  export type product_categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_categories to delete
     */
    where?: product_categoryWhereInput
    /**
     * Limit how many product_categories to delete.
     */
    limit?: number
  }

  /**
   * product_category.products
   */
  export type product_category$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product_category.subcategories
   */
  export type product_category$subcategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    where?: product_subcategoryWhereInput
    orderBy?: product_subcategoryOrderByWithRelationInput | product_subcategoryOrderByWithRelationInput[]
    cursor?: product_subcategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_subcategoryScalarFieldEnum | Product_subcategoryScalarFieldEnum[]
  }

  /**
   * product_category without action
   */
  export type product_categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_category
     */
    omit?: product_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
  }


  /**
   * Model product_subcategory
   */

  export type AggregateProduct_subcategory = {
    _count: Product_subcategoryCountAggregateOutputType | null
    _avg: Product_subcategoryAvgAggregateOutputType | null
    _sum: Product_subcategorySumAggregateOutputType | null
    _min: Product_subcategoryMinAggregateOutputType | null
    _max: Product_subcategoryMaxAggregateOutputType | null
  }

  export type Product_subcategoryAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    orderIndex: number | null
  }

  export type Product_subcategorySumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    orderIndex: number | null
  }

  export type Product_subcategoryMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    slug: string | null
    orderIndex: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Product_subcategoryMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    slug: string | null
    orderIndex: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Product_subcategoryCountAggregateOutputType = {
    id: number
    categoryId: number
    name: number
    slug: number
    orderIndex: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type Product_subcategoryAvgAggregateInputType = {
    id?: true
    categoryId?: true
    orderIndex?: true
  }

  export type Product_subcategorySumAggregateInputType = {
    id?: true
    categoryId?: true
    orderIndex?: true
  }

  export type Product_subcategoryMinAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    slug?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Product_subcategoryMaxAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    slug?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Product_subcategoryCountAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    slug?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type Product_subcategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_subcategory to aggregate.
     */
    where?: product_subcategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_subcategories to fetch.
     */
    orderBy?: product_subcategoryOrderByWithRelationInput | product_subcategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_subcategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_subcategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_subcategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_subcategories
    **/
    _count?: true | Product_subcategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_subcategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_subcategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_subcategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_subcategoryMaxAggregateInputType
  }

  export type GetProduct_subcategoryAggregateType<T extends Product_subcategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_subcategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_subcategory[P]>
      : GetScalarType<T[P], AggregateProduct_subcategory[P]>
  }




  export type product_subcategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_subcategoryWhereInput
    orderBy?: product_subcategoryOrderByWithAggregationInput | product_subcategoryOrderByWithAggregationInput[]
    by: Product_subcategoryScalarFieldEnum[] | Product_subcategoryScalarFieldEnum
    having?: product_subcategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_subcategoryCountAggregateInputType | true
    _avg?: Product_subcategoryAvgAggregateInputType
    _sum?: Product_subcategorySumAggregateInputType
    _min?: Product_subcategoryMinAggregateInputType
    _max?: Product_subcategoryMaxAggregateInputType
  }

  export type Product_subcategoryGroupByOutputType = {
    id: number
    categoryId: number
    name: string
    slug: string
    orderIndex: number | null
    createdAt: Date
    updatedAt: Date
    _count: Product_subcategoryCountAggregateOutputType | null
    _avg: Product_subcategoryAvgAggregateOutputType | null
    _sum: Product_subcategorySumAggregateOutputType | null
    _min: Product_subcategoryMinAggregateOutputType | null
    _max: Product_subcategoryMaxAggregateOutputType | null
  }

  type GetProduct_subcategoryGroupByPayload<T extends product_subcategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_subcategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_subcategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_subcategoryGroupByOutputType[P]>
            : GetScalarType<T[P], Product_subcategoryGroupByOutputType[P]>
        }
      >
    >


  export type product_subcategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    slug?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | product_categoryDefaultArgs<ExtArgs>
    products?: boolean | product_subcategory$productsArgs<ExtArgs>
    _count?: boolean | Product_subcategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_subcategory"]>



  export type product_subcategorySelectScalar = {
    id?: boolean
    categoryId?: boolean
    name?: boolean
    slug?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type product_subcategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "categoryId" | "name" | "slug" | "orderIndex" | "createdAt" | "updatedAt", ExtArgs["result"]["product_subcategory"]>
  export type product_subcategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | product_categoryDefaultArgs<ExtArgs>
    products?: boolean | product_subcategory$productsArgs<ExtArgs>
    _count?: boolean | Product_subcategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $product_subcategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_subcategory"
    objects: {
      category: Prisma.$product_categoryPayload<ExtArgs>
      products: Prisma.$productPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: number
      name: string
      slug: string
      orderIndex: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product_subcategory"]>
    composites: {}
  }

  type product_subcategoryGetPayload<S extends boolean | null | undefined | product_subcategoryDefaultArgs> = $Result.GetResult<Prisma.$product_subcategoryPayload, S>

  type product_subcategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<product_subcategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Product_subcategoryCountAggregateInputType | true
    }

  export interface product_subcategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_subcategory'], meta: { name: 'product_subcategory' } }
    /**
     * Find zero or one Product_subcategory that matches the filter.
     * @param {product_subcategoryFindUniqueArgs} args - Arguments to find a Product_subcategory
     * @example
     * // Get one Product_subcategory
     * const product_subcategory = await prisma.product_subcategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends product_subcategoryFindUniqueArgs>(args: SelectSubset<T, product_subcategoryFindUniqueArgs<ExtArgs>>): Prisma__product_subcategoryClient<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product_subcategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {product_subcategoryFindUniqueOrThrowArgs} args - Arguments to find a Product_subcategory
     * @example
     * // Get one Product_subcategory
     * const product_subcategory = await prisma.product_subcategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends product_subcategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, product_subcategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__product_subcategoryClient<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product_subcategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_subcategoryFindFirstArgs} args - Arguments to find a Product_subcategory
     * @example
     * // Get one Product_subcategory
     * const product_subcategory = await prisma.product_subcategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends product_subcategoryFindFirstArgs>(args?: SelectSubset<T, product_subcategoryFindFirstArgs<ExtArgs>>): Prisma__product_subcategoryClient<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product_subcategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_subcategoryFindFirstOrThrowArgs} args - Arguments to find a Product_subcategory
     * @example
     * // Get one Product_subcategory
     * const product_subcategory = await prisma.product_subcategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends product_subcategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, product_subcategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__product_subcategoryClient<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Product_subcategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_subcategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_subcategories
     * const product_subcategories = await prisma.product_subcategory.findMany()
     * 
     * // Get first 10 Product_subcategories
     * const product_subcategories = await prisma.product_subcategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_subcategoryWithIdOnly = await prisma.product_subcategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends product_subcategoryFindManyArgs>(args?: SelectSubset<T, product_subcategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product_subcategory.
     * @param {product_subcategoryCreateArgs} args - Arguments to create a Product_subcategory.
     * @example
     * // Create one Product_subcategory
     * const Product_subcategory = await prisma.product_subcategory.create({
     *   data: {
     *     // ... data to create a Product_subcategory
     *   }
     * })
     * 
     */
    create<T extends product_subcategoryCreateArgs>(args: SelectSubset<T, product_subcategoryCreateArgs<ExtArgs>>): Prisma__product_subcategoryClient<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Product_subcategories.
     * @param {product_subcategoryCreateManyArgs} args - Arguments to create many Product_subcategories.
     * @example
     * // Create many Product_subcategories
     * const product_subcategory = await prisma.product_subcategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends product_subcategoryCreateManyArgs>(args?: SelectSubset<T, product_subcategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_subcategory.
     * @param {product_subcategoryDeleteArgs} args - Arguments to delete one Product_subcategory.
     * @example
     * // Delete one Product_subcategory
     * const Product_subcategory = await prisma.product_subcategory.delete({
     *   where: {
     *     // ... filter to delete one Product_subcategory
     *   }
     * })
     * 
     */
    delete<T extends product_subcategoryDeleteArgs>(args: SelectSubset<T, product_subcategoryDeleteArgs<ExtArgs>>): Prisma__product_subcategoryClient<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product_subcategory.
     * @param {product_subcategoryUpdateArgs} args - Arguments to update one Product_subcategory.
     * @example
     * // Update one Product_subcategory
     * const product_subcategory = await prisma.product_subcategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends product_subcategoryUpdateArgs>(args: SelectSubset<T, product_subcategoryUpdateArgs<ExtArgs>>): Prisma__product_subcategoryClient<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Product_subcategories.
     * @param {product_subcategoryDeleteManyArgs} args - Arguments to filter Product_subcategories to delete.
     * @example
     * // Delete a few Product_subcategories
     * const { count } = await prisma.product_subcategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends product_subcategoryDeleteManyArgs>(args?: SelectSubset<T, product_subcategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_subcategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_subcategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_subcategories
     * const product_subcategory = await prisma.product_subcategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends product_subcategoryUpdateManyArgs>(args: SelectSubset<T, product_subcategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_subcategory.
     * @param {product_subcategoryUpsertArgs} args - Arguments to update or create a Product_subcategory.
     * @example
     * // Update or create a Product_subcategory
     * const product_subcategory = await prisma.product_subcategory.upsert({
     *   create: {
     *     // ... data to create a Product_subcategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_subcategory we want to update
     *   }
     * })
     */
    upsert<T extends product_subcategoryUpsertArgs>(args: SelectSubset<T, product_subcategoryUpsertArgs<ExtArgs>>): Prisma__product_subcategoryClient<$Result.GetResult<Prisma.$product_subcategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Product_subcategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_subcategoryCountArgs} args - Arguments to filter Product_subcategories to count.
     * @example
     * // Count the number of Product_subcategories
     * const count = await prisma.product_subcategory.count({
     *   where: {
     *     // ... the filter for the Product_subcategories we want to count
     *   }
     * })
    **/
    count<T extends product_subcategoryCountArgs>(
      args?: Subset<T, product_subcategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_subcategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_subcategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_subcategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_subcategoryAggregateArgs>(args: Subset<T, Product_subcategoryAggregateArgs>): Prisma.PrismaPromise<GetProduct_subcategoryAggregateType<T>>

    /**
     * Group by Product_subcategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_subcategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_subcategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_subcategoryGroupByArgs['orderBy'] }
        : { orderBy?: product_subcategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_subcategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_subcategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_subcategory model
   */
  readonly fields: product_subcategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_subcategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_subcategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends product_categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, product_categoryDefaultArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    products<T extends product_subcategory$productsArgs<ExtArgs> = {}>(args?: Subset<T, product_subcategory$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product_subcategory model
   */
  interface product_subcategoryFieldRefs {
    readonly id: FieldRef<"product_subcategory", 'Int'>
    readonly categoryId: FieldRef<"product_subcategory", 'Int'>
    readonly name: FieldRef<"product_subcategory", 'String'>
    readonly slug: FieldRef<"product_subcategory", 'String'>
    readonly orderIndex: FieldRef<"product_subcategory", 'Int'>
    readonly createdAt: FieldRef<"product_subcategory", 'DateTime'>
    readonly updatedAt: FieldRef<"product_subcategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * product_subcategory findUnique
   */
  export type product_subcategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    /**
     * Filter, which product_subcategory to fetch.
     */
    where: product_subcategoryWhereUniqueInput
  }

  /**
   * product_subcategory findUniqueOrThrow
   */
  export type product_subcategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    /**
     * Filter, which product_subcategory to fetch.
     */
    where: product_subcategoryWhereUniqueInput
  }

  /**
   * product_subcategory findFirst
   */
  export type product_subcategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    /**
     * Filter, which product_subcategory to fetch.
     */
    where?: product_subcategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_subcategories to fetch.
     */
    orderBy?: product_subcategoryOrderByWithRelationInput | product_subcategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_subcategories.
     */
    cursor?: product_subcategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_subcategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_subcategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_subcategories.
     */
    distinct?: Product_subcategoryScalarFieldEnum | Product_subcategoryScalarFieldEnum[]
  }

  /**
   * product_subcategory findFirstOrThrow
   */
  export type product_subcategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    /**
     * Filter, which product_subcategory to fetch.
     */
    where?: product_subcategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_subcategories to fetch.
     */
    orderBy?: product_subcategoryOrderByWithRelationInput | product_subcategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_subcategories.
     */
    cursor?: product_subcategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_subcategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_subcategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_subcategories.
     */
    distinct?: Product_subcategoryScalarFieldEnum | Product_subcategoryScalarFieldEnum[]
  }

  /**
   * product_subcategory findMany
   */
  export type product_subcategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    /**
     * Filter, which product_subcategories to fetch.
     */
    where?: product_subcategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_subcategories to fetch.
     */
    orderBy?: product_subcategoryOrderByWithRelationInput | product_subcategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_subcategories.
     */
    cursor?: product_subcategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_subcategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_subcategories.
     */
    skip?: number
    distinct?: Product_subcategoryScalarFieldEnum | Product_subcategoryScalarFieldEnum[]
  }

  /**
   * product_subcategory create
   */
  export type product_subcategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a product_subcategory.
     */
    data: XOR<product_subcategoryCreateInput, product_subcategoryUncheckedCreateInput>
  }

  /**
   * product_subcategory createMany
   */
  export type product_subcategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_subcategories.
     */
    data: product_subcategoryCreateManyInput | product_subcategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_subcategory update
   */
  export type product_subcategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a product_subcategory.
     */
    data: XOR<product_subcategoryUpdateInput, product_subcategoryUncheckedUpdateInput>
    /**
     * Choose, which product_subcategory to update.
     */
    where: product_subcategoryWhereUniqueInput
  }

  /**
   * product_subcategory updateMany
   */
  export type product_subcategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_subcategories.
     */
    data: XOR<product_subcategoryUpdateManyMutationInput, product_subcategoryUncheckedUpdateManyInput>
    /**
     * Filter which product_subcategories to update
     */
    where?: product_subcategoryWhereInput
    /**
     * Limit how many product_subcategories to update.
     */
    limit?: number
  }

  /**
   * product_subcategory upsert
   */
  export type product_subcategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the product_subcategory to update in case it exists.
     */
    where: product_subcategoryWhereUniqueInput
    /**
     * In case the product_subcategory found by the `where` argument doesn't exist, create a new product_subcategory with this data.
     */
    create: XOR<product_subcategoryCreateInput, product_subcategoryUncheckedCreateInput>
    /**
     * In case the product_subcategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_subcategoryUpdateInput, product_subcategoryUncheckedUpdateInput>
  }

  /**
   * product_subcategory delete
   */
  export type product_subcategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
    /**
     * Filter which product_subcategory to delete.
     */
    where: product_subcategoryWhereUniqueInput
  }

  /**
   * product_subcategory deleteMany
   */
  export type product_subcategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_subcategories to delete
     */
    where?: product_subcategoryWhereInput
    /**
     * Limit how many product_subcategories to delete.
     */
    limit?: number
  }

  /**
   * product_subcategory.products
   */
  export type product_subcategory$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product_subcategory without action
   */
  export type product_subcategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_subcategory
     */
    select?: product_subcategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_subcategory
     */
    omit?: product_subcategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_subcategoryInclude<ExtArgs> | null
  }


  /**
   * Model productvariant
   */

  export type AggregateProductvariant = {
    _count: ProductvariantCountAggregateOutputType | null
    _avg: ProductvariantAvgAggregateOutputType | null
    _sum: ProductvariantSumAggregateOutputType | null
    _min: ProductvariantMinAggregateOutputType | null
    _max: ProductvariantMaxAggregateOutputType | null
  }

  export type ProductvariantAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    price: Decimal | null
  }

  export type ProductvariantSumAggregateOutputType = {
    id: number | null
    productId: number | null
    price: Decimal | null
  }

  export type ProductvariantMinAggregateOutputType = {
    id: number | null
    productId: number | null
    variantName: string | null
    price: Decimal | null
    isDefault: boolean | null
  }

  export type ProductvariantMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    variantName: string | null
    price: Decimal | null
    isDefault: boolean | null
  }

  export type ProductvariantCountAggregateOutputType = {
    id: number
    productId: number
    variantName: number
    price: number
    isDefault: number
    _all: number
  }


  export type ProductvariantAvgAggregateInputType = {
    id?: true
    productId?: true
    price?: true
  }

  export type ProductvariantSumAggregateInputType = {
    id?: true
    productId?: true
    price?: true
  }

  export type ProductvariantMinAggregateInputType = {
    id?: true
    productId?: true
    variantName?: true
    price?: true
    isDefault?: true
  }

  export type ProductvariantMaxAggregateInputType = {
    id?: true
    productId?: true
    variantName?: true
    price?: true
    isDefault?: true
  }

  export type ProductvariantCountAggregateInputType = {
    id?: true
    productId?: true
    variantName?: true
    price?: true
    isDefault?: true
    _all?: true
  }

  export type ProductvariantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productvariant to aggregate.
     */
    where?: productvariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productvariants to fetch.
     */
    orderBy?: productvariantOrderByWithRelationInput | productvariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productvariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productvariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productvariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productvariants
    **/
    _count?: true | ProductvariantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductvariantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductvariantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductvariantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductvariantMaxAggregateInputType
  }

  export type GetProductvariantAggregateType<T extends ProductvariantAggregateArgs> = {
        [P in keyof T & keyof AggregateProductvariant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductvariant[P]>
      : GetScalarType<T[P], AggregateProductvariant[P]>
  }




  export type productvariantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productvariantWhereInput
    orderBy?: productvariantOrderByWithAggregationInput | productvariantOrderByWithAggregationInput[]
    by: ProductvariantScalarFieldEnum[] | ProductvariantScalarFieldEnum
    having?: productvariantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductvariantCountAggregateInputType | true
    _avg?: ProductvariantAvgAggregateInputType
    _sum?: ProductvariantSumAggregateInputType
    _min?: ProductvariantMinAggregateInputType
    _max?: ProductvariantMaxAggregateInputType
  }

  export type ProductvariantGroupByOutputType = {
    id: number
    productId: number
    variantName: string
    price: Decimal
    isDefault: boolean
    _count: ProductvariantCountAggregateOutputType | null
    _avg: ProductvariantAvgAggregateOutputType | null
    _sum: ProductvariantSumAggregateOutputType | null
    _min: ProductvariantMinAggregateOutputType | null
    _max: ProductvariantMaxAggregateOutputType | null
  }

  type GetProductvariantGroupByPayload<T extends productvariantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductvariantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductvariantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductvariantGroupByOutputType[P]>
            : GetScalarType<T[P], ProductvariantGroupByOutputType[P]>
        }
      >
    >


  export type productvariantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    variantName?: boolean
    price?: boolean
    isDefault?: boolean
    orderitem?: boolean | productvariant$orderitemArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    _count?: boolean | ProductvariantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productvariant"]>



  export type productvariantSelectScalar = {
    id?: boolean
    productId?: boolean
    variantName?: boolean
    price?: boolean
    isDefault?: boolean
  }

  export type productvariantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "variantName" | "price" | "isDefault", ExtArgs["result"]["productvariant"]>
  export type productvariantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderitem?: boolean | productvariant$orderitemArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    _count?: boolean | ProductvariantCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $productvariantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "productvariant"
    objects: {
      orderitem: Prisma.$orderitemPayload<ExtArgs>[]
      product: Prisma.$productPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: number
      variantName: string
      price: Prisma.Decimal
      isDefault: boolean
    }, ExtArgs["result"]["productvariant"]>
    composites: {}
  }

  type productvariantGetPayload<S extends boolean | null | undefined | productvariantDefaultArgs> = $Result.GetResult<Prisma.$productvariantPayload, S>

  type productvariantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<productvariantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductvariantCountAggregateInputType | true
    }

  export interface productvariantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productvariant'], meta: { name: 'productvariant' } }
    /**
     * Find zero or one Productvariant that matches the filter.
     * @param {productvariantFindUniqueArgs} args - Arguments to find a Productvariant
     * @example
     * // Get one Productvariant
     * const productvariant = await prisma.productvariant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productvariantFindUniqueArgs>(args: SelectSubset<T, productvariantFindUniqueArgs<ExtArgs>>): Prisma__productvariantClient<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Productvariant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {productvariantFindUniqueOrThrowArgs} args - Arguments to find a Productvariant
     * @example
     * // Get one Productvariant
     * const productvariant = await prisma.productvariant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productvariantFindUniqueOrThrowArgs>(args: SelectSubset<T, productvariantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productvariantClient<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Productvariant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productvariantFindFirstArgs} args - Arguments to find a Productvariant
     * @example
     * // Get one Productvariant
     * const productvariant = await prisma.productvariant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productvariantFindFirstArgs>(args?: SelectSubset<T, productvariantFindFirstArgs<ExtArgs>>): Prisma__productvariantClient<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Productvariant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productvariantFindFirstOrThrowArgs} args - Arguments to find a Productvariant
     * @example
     * // Get one Productvariant
     * const productvariant = await prisma.productvariant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productvariantFindFirstOrThrowArgs>(args?: SelectSubset<T, productvariantFindFirstOrThrowArgs<ExtArgs>>): Prisma__productvariantClient<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Productvariants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productvariantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productvariants
     * const productvariants = await prisma.productvariant.findMany()
     * 
     * // Get first 10 Productvariants
     * const productvariants = await prisma.productvariant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productvariantWithIdOnly = await prisma.productvariant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productvariantFindManyArgs>(args?: SelectSubset<T, productvariantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Productvariant.
     * @param {productvariantCreateArgs} args - Arguments to create a Productvariant.
     * @example
     * // Create one Productvariant
     * const Productvariant = await prisma.productvariant.create({
     *   data: {
     *     // ... data to create a Productvariant
     *   }
     * })
     * 
     */
    create<T extends productvariantCreateArgs>(args: SelectSubset<T, productvariantCreateArgs<ExtArgs>>): Prisma__productvariantClient<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Productvariants.
     * @param {productvariantCreateManyArgs} args - Arguments to create many Productvariants.
     * @example
     * // Create many Productvariants
     * const productvariant = await prisma.productvariant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productvariantCreateManyArgs>(args?: SelectSubset<T, productvariantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Productvariant.
     * @param {productvariantDeleteArgs} args - Arguments to delete one Productvariant.
     * @example
     * // Delete one Productvariant
     * const Productvariant = await prisma.productvariant.delete({
     *   where: {
     *     // ... filter to delete one Productvariant
     *   }
     * })
     * 
     */
    delete<T extends productvariantDeleteArgs>(args: SelectSubset<T, productvariantDeleteArgs<ExtArgs>>): Prisma__productvariantClient<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Productvariant.
     * @param {productvariantUpdateArgs} args - Arguments to update one Productvariant.
     * @example
     * // Update one Productvariant
     * const productvariant = await prisma.productvariant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productvariantUpdateArgs>(args: SelectSubset<T, productvariantUpdateArgs<ExtArgs>>): Prisma__productvariantClient<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Productvariants.
     * @param {productvariantDeleteManyArgs} args - Arguments to filter Productvariants to delete.
     * @example
     * // Delete a few Productvariants
     * const { count } = await prisma.productvariant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productvariantDeleteManyArgs>(args?: SelectSubset<T, productvariantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productvariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productvariantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productvariants
     * const productvariant = await prisma.productvariant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productvariantUpdateManyArgs>(args: SelectSubset<T, productvariantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Productvariant.
     * @param {productvariantUpsertArgs} args - Arguments to update or create a Productvariant.
     * @example
     * // Update or create a Productvariant
     * const productvariant = await prisma.productvariant.upsert({
     *   create: {
     *     // ... data to create a Productvariant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Productvariant we want to update
     *   }
     * })
     */
    upsert<T extends productvariantUpsertArgs>(args: SelectSubset<T, productvariantUpsertArgs<ExtArgs>>): Prisma__productvariantClient<$Result.GetResult<Prisma.$productvariantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Productvariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productvariantCountArgs} args - Arguments to filter Productvariants to count.
     * @example
     * // Count the number of Productvariants
     * const count = await prisma.productvariant.count({
     *   where: {
     *     // ... the filter for the Productvariants we want to count
     *   }
     * })
    **/
    count<T extends productvariantCountArgs>(
      args?: Subset<T, productvariantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductvariantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Productvariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductvariantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductvariantAggregateArgs>(args: Subset<T, ProductvariantAggregateArgs>): Prisma.PrismaPromise<GetProductvariantAggregateType<T>>

    /**
     * Group by Productvariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productvariantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productvariantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productvariantGroupByArgs['orderBy'] }
        : { orderBy?: productvariantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productvariantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductvariantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productvariant model
   */
  readonly fields: productvariantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productvariant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productvariantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderitem<T extends productvariant$orderitemArgs<ExtArgs> = {}>(args?: Subset<T, productvariant$orderitemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the productvariant model
   */
  interface productvariantFieldRefs {
    readonly id: FieldRef<"productvariant", 'Int'>
    readonly productId: FieldRef<"productvariant", 'Int'>
    readonly variantName: FieldRef<"productvariant", 'String'>
    readonly price: FieldRef<"productvariant", 'Decimal'>
    readonly isDefault: FieldRef<"productvariant", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * productvariant findUnique
   */
  export type productvariantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    /**
     * Filter, which productvariant to fetch.
     */
    where: productvariantWhereUniqueInput
  }

  /**
   * productvariant findUniqueOrThrow
   */
  export type productvariantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    /**
     * Filter, which productvariant to fetch.
     */
    where: productvariantWhereUniqueInput
  }

  /**
   * productvariant findFirst
   */
  export type productvariantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    /**
     * Filter, which productvariant to fetch.
     */
    where?: productvariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productvariants to fetch.
     */
    orderBy?: productvariantOrderByWithRelationInput | productvariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productvariants.
     */
    cursor?: productvariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productvariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productvariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productvariants.
     */
    distinct?: ProductvariantScalarFieldEnum | ProductvariantScalarFieldEnum[]
  }

  /**
   * productvariant findFirstOrThrow
   */
  export type productvariantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    /**
     * Filter, which productvariant to fetch.
     */
    where?: productvariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productvariants to fetch.
     */
    orderBy?: productvariantOrderByWithRelationInput | productvariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productvariants.
     */
    cursor?: productvariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productvariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productvariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productvariants.
     */
    distinct?: ProductvariantScalarFieldEnum | ProductvariantScalarFieldEnum[]
  }

  /**
   * productvariant findMany
   */
  export type productvariantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    /**
     * Filter, which productvariants to fetch.
     */
    where?: productvariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productvariants to fetch.
     */
    orderBy?: productvariantOrderByWithRelationInput | productvariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productvariants.
     */
    cursor?: productvariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productvariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productvariants.
     */
    skip?: number
    distinct?: ProductvariantScalarFieldEnum | ProductvariantScalarFieldEnum[]
  }

  /**
   * productvariant create
   */
  export type productvariantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    /**
     * The data needed to create a productvariant.
     */
    data: XOR<productvariantCreateInput, productvariantUncheckedCreateInput>
  }

  /**
   * productvariant createMany
   */
  export type productvariantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productvariants.
     */
    data: productvariantCreateManyInput | productvariantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * productvariant update
   */
  export type productvariantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    /**
     * The data needed to update a productvariant.
     */
    data: XOR<productvariantUpdateInput, productvariantUncheckedUpdateInput>
    /**
     * Choose, which productvariant to update.
     */
    where: productvariantWhereUniqueInput
  }

  /**
   * productvariant updateMany
   */
  export type productvariantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productvariants.
     */
    data: XOR<productvariantUpdateManyMutationInput, productvariantUncheckedUpdateManyInput>
    /**
     * Filter which productvariants to update
     */
    where?: productvariantWhereInput
    /**
     * Limit how many productvariants to update.
     */
    limit?: number
  }

  /**
   * productvariant upsert
   */
  export type productvariantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    /**
     * The filter to search for the productvariant to update in case it exists.
     */
    where: productvariantWhereUniqueInput
    /**
     * In case the productvariant found by the `where` argument doesn't exist, create a new productvariant with this data.
     */
    create: XOR<productvariantCreateInput, productvariantUncheckedCreateInput>
    /**
     * In case the productvariant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productvariantUpdateInput, productvariantUncheckedUpdateInput>
  }

  /**
   * productvariant delete
   */
  export type productvariantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
    /**
     * Filter which productvariant to delete.
     */
    where: productvariantWhereUniqueInput
  }

  /**
   * productvariant deleteMany
   */
  export type productvariantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productvariants to delete
     */
    where?: productvariantWhereInput
    /**
     * Limit how many productvariants to delete.
     */
    limit?: number
  }

  /**
   * productvariant.orderitem
   */
  export type productvariant$orderitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderitem
     */
    select?: orderitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderitem
     */
    omit?: orderitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderitemInclude<ExtArgs> | null
    where?: orderitemWhereInput
    orderBy?: orderitemOrderByWithRelationInput | orderitemOrderByWithRelationInput[]
    cursor?: orderitemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderitemScalarFieldEnum | OrderitemScalarFieldEnum[]
  }

  /**
   * productvariant without action
   */
  export type productvariantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productvariant
     */
    select?: productvariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productvariant
     */
    omit?: productvariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productvariantInclude<ExtArgs> | null
  }


  /**
   * Model news
   */

  export type AggregateNews = {
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  export type NewsAvgAggregateOutputType = {
    id: number | null
  }

  export type NewsSumAggregateOutputType = {
    id: number | null
  }

  export type NewsMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    image: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type NewsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    image: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type NewsCountAggregateOutputType = {
    id: number
    title: number
    content: number
    image: number
    date: number
    createdAt: number
    _all: number
  }


  export type NewsAvgAggregateInputType = {
    id?: true
  }

  export type NewsSumAggregateInputType = {
    id?: true
  }

  export type NewsMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    image?: true
    date?: true
    createdAt?: true
  }

  export type NewsMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    image?: true
    date?: true
    createdAt?: true
  }

  export type NewsCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    image?: true
    date?: true
    createdAt?: true
    _all?: true
  }

  export type NewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which news to aggregate.
     */
    where?: newsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of news to fetch.
     */
    orderBy?: newsOrderByWithRelationInput | newsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` news from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` news.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned news
    **/
    _count?: true | NewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsMaxAggregateInputType
  }

  export type GetNewsAggregateType<T extends NewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNews[P]>
      : GetScalarType<T[P], AggregateNews[P]>
  }




  export type newsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: newsWhereInput
    orderBy?: newsOrderByWithAggregationInput | newsOrderByWithAggregationInput[]
    by: NewsScalarFieldEnum[] | NewsScalarFieldEnum
    having?: newsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCountAggregateInputType | true
    _avg?: NewsAvgAggregateInputType
    _sum?: NewsSumAggregateInputType
    _min?: NewsMinAggregateInputType
    _max?: NewsMaxAggregateInputType
  }

  export type NewsGroupByOutputType = {
    id: number
    title: string
    content: string
    image: string | null
    date: Date
    createdAt: Date
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  type GetNewsGroupByPayload<T extends newsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsGroupByOutputType[P]>
            : GetScalarType<T[P], NewsGroupByOutputType[P]>
        }
      >
    >


  export type newsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    image?: boolean
    date?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["news"]>



  export type newsSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    image?: boolean
    date?: boolean
    createdAt?: boolean
  }

  export type newsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "image" | "date" | "createdAt", ExtArgs["result"]["news"]>

  export type $newsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "news"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      content: string
      image: string | null
      date: Date
      createdAt: Date
    }, ExtArgs["result"]["news"]>
    composites: {}
  }

  type newsGetPayload<S extends boolean | null | undefined | newsDefaultArgs> = $Result.GetResult<Prisma.$newsPayload, S>

  type newsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<newsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NewsCountAggregateInputType | true
    }

  export interface newsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['news'], meta: { name: 'news' } }
    /**
     * Find zero or one News that matches the filter.
     * @param {newsFindUniqueArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends newsFindUniqueArgs>(args: SelectSubset<T, newsFindUniqueArgs<ExtArgs>>): Prisma__newsClient<$Result.GetResult<Prisma.$newsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one News that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {newsFindUniqueOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends newsFindUniqueOrThrowArgs>(args: SelectSubset<T, newsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__newsClient<$Result.GetResult<Prisma.$newsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsFindFirstArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends newsFindFirstArgs>(args?: SelectSubset<T, newsFindFirstArgs<ExtArgs>>): Prisma__newsClient<$Result.GetResult<Prisma.$newsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first News that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsFindFirstOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends newsFindFirstOrThrowArgs>(args?: SelectSubset<T, newsFindFirstOrThrowArgs<ExtArgs>>): Prisma__newsClient<$Result.GetResult<Prisma.$newsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all News
     * const news = await prisma.news.findMany()
     * 
     * // Get first 10 News
     * const news = await prisma.news.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsWithIdOnly = await prisma.news.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends newsFindManyArgs>(args?: SelectSubset<T, newsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$newsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a News.
     * @param {newsCreateArgs} args - Arguments to create a News.
     * @example
     * // Create one News
     * const News = await prisma.news.create({
     *   data: {
     *     // ... data to create a News
     *   }
     * })
     * 
     */
    create<T extends newsCreateArgs>(args: SelectSubset<T, newsCreateArgs<ExtArgs>>): Prisma__newsClient<$Result.GetResult<Prisma.$newsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many News.
     * @param {newsCreateManyArgs} args - Arguments to create many News.
     * @example
     * // Create many News
     * const news = await prisma.news.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends newsCreateManyArgs>(args?: SelectSubset<T, newsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a News.
     * @param {newsDeleteArgs} args - Arguments to delete one News.
     * @example
     * // Delete one News
     * const News = await prisma.news.delete({
     *   where: {
     *     // ... filter to delete one News
     *   }
     * })
     * 
     */
    delete<T extends newsDeleteArgs>(args: SelectSubset<T, newsDeleteArgs<ExtArgs>>): Prisma__newsClient<$Result.GetResult<Prisma.$newsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one News.
     * @param {newsUpdateArgs} args - Arguments to update one News.
     * @example
     * // Update one News
     * const news = await prisma.news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends newsUpdateArgs>(args: SelectSubset<T, newsUpdateArgs<ExtArgs>>): Prisma__newsClient<$Result.GetResult<Prisma.$newsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more News.
     * @param {newsDeleteManyArgs} args - Arguments to filter News to delete.
     * @example
     * // Delete a few News
     * const { count } = await prisma.news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends newsDeleteManyArgs>(args?: SelectSubset<T, newsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many News
     * const news = await prisma.news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends newsUpdateManyArgs>(args: SelectSubset<T, newsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one News.
     * @param {newsUpsertArgs} args - Arguments to update or create a News.
     * @example
     * // Update or create a News
     * const news = await prisma.news.upsert({
     *   create: {
     *     // ... data to create a News
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the News we want to update
     *   }
     * })
     */
    upsert<T extends newsUpsertArgs>(args: SelectSubset<T, newsUpsertArgs<ExtArgs>>): Prisma__newsClient<$Result.GetResult<Prisma.$newsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsCountArgs} args - Arguments to filter News to count.
     * @example
     * // Count the number of News
     * const count = await prisma.news.count({
     *   where: {
     *     // ... the filter for the News we want to count
     *   }
     * })
    **/
    count<T extends newsCountArgs>(
      args?: Subset<T, newsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsAggregateArgs>(args: Subset<T, NewsAggregateArgs>): Prisma.PrismaPromise<GetNewsAggregateType<T>>

    /**
     * Group by News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends newsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: newsGroupByArgs['orderBy'] }
        : { orderBy?: newsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, newsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the news model
   */
  readonly fields: newsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for news.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__newsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the news model
   */
  interface newsFieldRefs {
    readonly id: FieldRef<"news", 'Int'>
    readonly title: FieldRef<"news", 'String'>
    readonly content: FieldRef<"news", 'String'>
    readonly image: FieldRef<"news", 'String'>
    readonly date: FieldRef<"news", 'DateTime'>
    readonly createdAt: FieldRef<"news", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * news findUnique
   */
  export type newsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
    /**
     * Filter, which news to fetch.
     */
    where: newsWhereUniqueInput
  }

  /**
   * news findUniqueOrThrow
   */
  export type newsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
    /**
     * Filter, which news to fetch.
     */
    where: newsWhereUniqueInput
  }

  /**
   * news findFirst
   */
  export type newsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
    /**
     * Filter, which news to fetch.
     */
    where?: newsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of news to fetch.
     */
    orderBy?: newsOrderByWithRelationInput | newsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for news.
     */
    cursor?: newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` news from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` news.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of news.
     */
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * news findFirstOrThrow
   */
  export type newsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
    /**
     * Filter, which news to fetch.
     */
    where?: newsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of news to fetch.
     */
    orderBy?: newsOrderByWithRelationInput | newsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for news.
     */
    cursor?: newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` news from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` news.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of news.
     */
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * news findMany
   */
  export type newsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
    /**
     * Filter, which news to fetch.
     */
    where?: newsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of news to fetch.
     */
    orderBy?: newsOrderByWithRelationInput | newsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing news.
     */
    cursor?: newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` news from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` news.
     */
    skip?: number
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * news create
   */
  export type newsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
    /**
     * The data needed to create a news.
     */
    data: XOR<newsCreateInput, newsUncheckedCreateInput>
  }

  /**
   * news createMany
   */
  export type newsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many news.
     */
    data: newsCreateManyInput | newsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * news update
   */
  export type newsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
    /**
     * The data needed to update a news.
     */
    data: XOR<newsUpdateInput, newsUncheckedUpdateInput>
    /**
     * Choose, which news to update.
     */
    where: newsWhereUniqueInput
  }

  /**
   * news updateMany
   */
  export type newsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update news.
     */
    data: XOR<newsUpdateManyMutationInput, newsUncheckedUpdateManyInput>
    /**
     * Filter which news to update
     */
    where?: newsWhereInput
    /**
     * Limit how many news to update.
     */
    limit?: number
  }

  /**
   * news upsert
   */
  export type newsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
    /**
     * The filter to search for the news to update in case it exists.
     */
    where: newsWhereUniqueInput
    /**
     * In case the news found by the `where` argument doesn't exist, create a new news with this data.
     */
    create: XOR<newsCreateInput, newsUncheckedCreateInput>
    /**
     * In case the news was found with the provided `where` argument, update it with this data.
     */
    update: XOR<newsUpdateInput, newsUncheckedUpdateInput>
  }

  /**
   * news delete
   */
  export type newsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
    /**
     * Filter which news to delete.
     */
    where: newsWhereUniqueInput
  }

  /**
   * news deleteMany
   */
  export type newsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which news to delete
     */
    where?: newsWhereInput
    /**
     * Limit how many news to delete.
     */
    limit?: number
  }

  /**
   * news without action
   */
  export type newsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the news
     */
    omit?: newsOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ArticleCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    orderIndex: 'orderIndex'
  };

  export type ArticleCategoryScalarFieldEnum = (typeof ArticleCategoryScalarFieldEnum)[keyof typeof ArticleCategoryScalarFieldEnum]


  export const ArticleSubCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    orderIndex: 'orderIndex',
    categoryId: 'categoryId'
  };

  export type ArticleSubCategoryScalarFieldEnum = (typeof ArticleSubCategoryScalarFieldEnum)[keyof typeof ArticleSubCategoryScalarFieldEnum]


  export const ArticleScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    excerpt: 'excerpt',
    content: 'content',
    coverImageUrl: 'coverImageUrl',
    publishedAt: 'publishedAt',
    categoryId: 'categoryId',
    subCategoryId: 'subCategoryId'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const BannersScalarFieldEnum: {
    id: 'id',
    image: 'image',
    title: 'title',
    buttonText: 'buttonText',
    buttonLink: 'buttonLink',
    created_at: 'created_at',
    fontColor: 'fontColor'
  };

  export type BannersScalarFieldEnum = (typeof BannersScalarFieldEnum)[keyof typeof BannersScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    coverImage: 'coverImage',
    description: 'description',
    price: 'price',
    capacity: 'capacity',
    status: 'status',
    startAt: 'startAt',
    durationMinutes: 'durationMinutes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const CourseintentScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    name: 'name',
    email: 'email',
    phone: 'phone',
    message: 'message',
    createdAt: 'createdAt'
  };

  export type CourseintentScalarFieldEnum = (typeof CourseintentScalarFieldEnum)[keyof typeof CourseintentScalarFieldEnum]


  export const Discount_codeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    type: 'type',
    value: 'value',
    isActive: 'isActive',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type Discount_codeScalarFieldEnum = (typeof Discount_codeScalarFieldEnum)[keyof typeof Discount_codeScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    orderNo: 'orderNo',
    buyerName: 'buyerName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    shippingMethod: 'shippingMethod',
    subtotal: 'subtotal',
    shippingFee: 'shippingFee',
    discount: 'discount',
    totalAmount: 'totalAmount',
    status: 'status',
    paymentMethod: 'paymentMethod',
    paymentInfo: 'paymentInfo',
    paidAt: 'paidAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderitemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    productId: 'productId',
    variantId: 'variantId',
    qty: 'qty',
    unitPrice: 'unitPrice',
    addOnJson: 'addOnJson'
  };

  export type OrderitemScalarFieldEnum = (typeof OrderitemScalarFieldEnum)[keyof typeof OrderitemScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    categoryId: 'categoryId',
    subcategoryId: 'subcategoryId',
    isAddon: 'isAddon',
    isVisible: 'isVisible',
    description: 'description',
    heroImage: 'heroImage',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isHot: 'isHot',
    ingredients: 'ingredients',
    shelfLife: 'shelfLife',
    flavorProfile: 'flavorProfile'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const Product_categoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    orderIndex: 'orderIndex',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type Product_categoryScalarFieldEnum = (typeof Product_categoryScalarFieldEnum)[keyof typeof Product_categoryScalarFieldEnum]


  export const Product_subcategoryScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    name: 'name',
    slug: 'slug',
    orderIndex: 'orderIndex',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type Product_subcategoryScalarFieldEnum = (typeof Product_subcategoryScalarFieldEnum)[keyof typeof Product_subcategoryScalarFieldEnum]


  export const ProductvariantScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    variantName: 'variantName',
    price: 'price',
    isDefault: 'isDefault'
  };

  export type ProductvariantScalarFieldEnum = (typeof ProductvariantScalarFieldEnum)[keyof typeof ProductvariantScalarFieldEnum]


  export const NewsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    image: 'image',
    date: 'date',
    createdAt: 'createdAt'
  };

  export type NewsScalarFieldEnum = (typeof NewsScalarFieldEnum)[keyof typeof NewsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const ArticleCategoryOrderByRelevanceFieldEnum: {
    name: 'name',
    slug: 'slug'
  };

  export type ArticleCategoryOrderByRelevanceFieldEnum = (typeof ArticleCategoryOrderByRelevanceFieldEnum)[keyof typeof ArticleCategoryOrderByRelevanceFieldEnum]


  export const ArticleSubCategoryOrderByRelevanceFieldEnum: {
    name: 'name',
    slug: 'slug'
  };

  export type ArticleSubCategoryOrderByRelevanceFieldEnum = (typeof ArticleSubCategoryOrderByRelevanceFieldEnum)[keyof typeof ArticleSubCategoryOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const ArticleOrderByRelevanceFieldEnum: {
    title: 'title',
    slug: 'slug',
    excerpt: 'excerpt',
    content: 'content',
    coverImageUrl: 'coverImageUrl'
  };

  export type ArticleOrderByRelevanceFieldEnum = (typeof ArticleOrderByRelevanceFieldEnum)[keyof typeof ArticleOrderByRelevanceFieldEnum]


  export const bannersOrderByRelevanceFieldEnum: {
    image: 'image',
    title: 'title',
    buttonText: 'buttonText',
    buttonLink: 'buttonLink'
  };

  export type bannersOrderByRelevanceFieldEnum = (typeof bannersOrderByRelevanceFieldEnum)[keyof typeof bannersOrderByRelevanceFieldEnum]


  export const courseOrderByRelevanceFieldEnum: {
    title: 'title',
    slug: 'slug',
    coverImage: 'coverImage',
    description: 'description'
  };

  export type courseOrderByRelevanceFieldEnum = (typeof courseOrderByRelevanceFieldEnum)[keyof typeof courseOrderByRelevanceFieldEnum]


  export const courseintentOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    phone: 'phone',
    message: 'message'
  };

  export type courseintentOrderByRelevanceFieldEnum = (typeof courseintentOrderByRelevanceFieldEnum)[keyof typeof courseintentOrderByRelevanceFieldEnum]


  export const discount_codeOrderByRelevanceFieldEnum: {
    code: 'code',
    type: 'type'
  };

  export type discount_codeOrderByRelevanceFieldEnum = (typeof discount_codeOrderByRelevanceFieldEnum)[keyof typeof discount_codeOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const orderOrderByRelevanceFieldEnum: {
    orderNo: 'orderNo',
    buyerName: 'buyerName',
    email: 'email',
    phone: 'phone',
    address: 'address'
  };

  export type orderOrderByRelevanceFieldEnum = (typeof orderOrderByRelevanceFieldEnum)[keyof typeof orderOrderByRelevanceFieldEnum]


  export const productOrderByRelevanceFieldEnum: {
    name: 'name',
    slug: 'slug',
    description: 'description',
    heroImage: 'heroImage',
    ingredients: 'ingredients',
    shelfLife: 'shelfLife',
    flavorProfile: 'flavorProfile'
  };

  export type productOrderByRelevanceFieldEnum = (typeof productOrderByRelevanceFieldEnum)[keyof typeof productOrderByRelevanceFieldEnum]


  export const product_categoryOrderByRelevanceFieldEnum: {
    name: 'name',
    slug: 'slug',
    description: 'description'
  };

  export type product_categoryOrderByRelevanceFieldEnum = (typeof product_categoryOrderByRelevanceFieldEnum)[keyof typeof product_categoryOrderByRelevanceFieldEnum]


  export const product_subcategoryOrderByRelevanceFieldEnum: {
    name: 'name',
    slug: 'slug'
  };

  export type product_subcategoryOrderByRelevanceFieldEnum = (typeof product_subcategoryOrderByRelevanceFieldEnum)[keyof typeof product_subcategoryOrderByRelevanceFieldEnum]


  export const productvariantOrderByRelevanceFieldEnum: {
    variantName: 'variantName'
  };

  export type productvariantOrderByRelevanceFieldEnum = (typeof productvariantOrderByRelevanceFieldEnum)[keyof typeof productvariantOrderByRelevanceFieldEnum]


  export const newsOrderByRelevanceFieldEnum: {
    title: 'title',
    content: 'content',
    image: 'image'
  };

  export type newsOrderByRelevanceFieldEnum = (typeof newsOrderByRelevanceFieldEnum)[keyof typeof newsOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'banners_fontColor'
   */
  export type Enumbanners_fontColorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'banners_fontColor'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'order_shippingMethod'
   */
  export type Enumorder_shippingMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'order_shippingMethod'>
    


  /**
   * Reference to a field of type 'order_status'
   */
  export type Enumorder_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'order_status'>
    


  /**
   * Reference to a field of type 'order_paymentMethod'
   */
  export type Enumorder_paymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'order_paymentMethod'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ArticleCategoryWhereInput = {
    AND?: ArticleCategoryWhereInput | ArticleCategoryWhereInput[]
    OR?: ArticleCategoryWhereInput[]
    NOT?: ArticleCategoryWhereInput | ArticleCategoryWhereInput[]
    id?: IntFilter<"ArticleCategory"> | number
    name?: StringFilter<"ArticleCategory"> | string
    slug?: StringFilter<"ArticleCategory"> | string
    orderIndex?: IntFilter<"ArticleCategory"> | number
    subcategories?: ArticleSubCategoryListRelationFilter
    articles?: ArticleListRelationFilter
  }

  export type ArticleCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    subcategories?: ArticleSubCategoryOrderByRelationAggregateInput
    articles?: ArticleOrderByRelationAggregateInput
    _relevance?: ArticleCategoryOrderByRelevanceInput
  }

  export type ArticleCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: ArticleCategoryWhereInput | ArticleCategoryWhereInput[]
    OR?: ArticleCategoryWhereInput[]
    NOT?: ArticleCategoryWhereInput | ArticleCategoryWhereInput[]
    name?: StringFilter<"ArticleCategory"> | string
    orderIndex?: IntFilter<"ArticleCategory"> | number
    subcategories?: ArticleSubCategoryListRelationFilter
    articles?: ArticleListRelationFilter
  }, "id" | "slug">

  export type ArticleCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    _count?: ArticleCategoryCountOrderByAggregateInput
    _avg?: ArticleCategoryAvgOrderByAggregateInput
    _max?: ArticleCategoryMaxOrderByAggregateInput
    _min?: ArticleCategoryMinOrderByAggregateInput
    _sum?: ArticleCategorySumOrderByAggregateInput
  }

  export type ArticleCategoryScalarWhereWithAggregatesInput = {
    AND?: ArticleCategoryScalarWhereWithAggregatesInput | ArticleCategoryScalarWhereWithAggregatesInput[]
    OR?: ArticleCategoryScalarWhereWithAggregatesInput[]
    NOT?: ArticleCategoryScalarWhereWithAggregatesInput | ArticleCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArticleCategory"> | number
    name?: StringWithAggregatesFilter<"ArticleCategory"> | string
    slug?: StringWithAggregatesFilter<"ArticleCategory"> | string
    orderIndex?: IntWithAggregatesFilter<"ArticleCategory"> | number
  }

  export type ArticleSubCategoryWhereInput = {
    AND?: ArticleSubCategoryWhereInput | ArticleSubCategoryWhereInput[]
    OR?: ArticleSubCategoryWhereInput[]
    NOT?: ArticleSubCategoryWhereInput | ArticleSubCategoryWhereInput[]
    id?: IntFilter<"ArticleSubCategory"> | number
    name?: StringFilter<"ArticleSubCategory"> | string
    slug?: StringFilter<"ArticleSubCategory"> | string
    orderIndex?: IntFilter<"ArticleSubCategory"> | number
    categoryId?: IntFilter<"ArticleSubCategory"> | number
    category?: XOR<ArticleCategoryScalarRelationFilter, ArticleCategoryWhereInput>
    articles?: ArticleListRelationFilter
  }

  export type ArticleSubCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    categoryId?: SortOrder
    category?: ArticleCategoryOrderByWithRelationInput
    articles?: ArticleOrderByRelationAggregateInput
    _relevance?: ArticleSubCategoryOrderByRelevanceInput
  }

  export type ArticleSubCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: ArticleSubCategoryWhereInput | ArticleSubCategoryWhereInput[]
    OR?: ArticleSubCategoryWhereInput[]
    NOT?: ArticleSubCategoryWhereInput | ArticleSubCategoryWhereInput[]
    name?: StringFilter<"ArticleSubCategory"> | string
    orderIndex?: IntFilter<"ArticleSubCategory"> | number
    categoryId?: IntFilter<"ArticleSubCategory"> | number
    category?: XOR<ArticleCategoryScalarRelationFilter, ArticleCategoryWhereInput>
    articles?: ArticleListRelationFilter
  }, "id" | "slug">

  export type ArticleSubCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    categoryId?: SortOrder
    _count?: ArticleSubCategoryCountOrderByAggregateInput
    _avg?: ArticleSubCategoryAvgOrderByAggregateInput
    _max?: ArticleSubCategoryMaxOrderByAggregateInput
    _min?: ArticleSubCategoryMinOrderByAggregateInput
    _sum?: ArticleSubCategorySumOrderByAggregateInput
  }

  export type ArticleSubCategoryScalarWhereWithAggregatesInput = {
    AND?: ArticleSubCategoryScalarWhereWithAggregatesInput | ArticleSubCategoryScalarWhereWithAggregatesInput[]
    OR?: ArticleSubCategoryScalarWhereWithAggregatesInput[]
    NOT?: ArticleSubCategoryScalarWhereWithAggregatesInput | ArticleSubCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArticleSubCategory"> | number
    name?: StringWithAggregatesFilter<"ArticleSubCategory"> | string
    slug?: StringWithAggregatesFilter<"ArticleSubCategory"> | string
    orderIndex?: IntWithAggregatesFilter<"ArticleSubCategory"> | number
    categoryId?: IntWithAggregatesFilter<"ArticleSubCategory"> | number
  }

  export type ArticleWhereInput = {
    AND?: ArticleWhereInput | ArticleWhereInput[]
    OR?: ArticleWhereInput[]
    NOT?: ArticleWhereInput | ArticleWhereInput[]
    id?: IntFilter<"Article"> | number
    title?: StringFilter<"Article"> | string
    slug?: StringFilter<"Article"> | string
    excerpt?: StringFilter<"Article"> | string
    content?: StringFilter<"Article"> | string
    coverImageUrl?: StringNullableFilter<"Article"> | string | null
    publishedAt?: DateTimeFilter<"Article"> | Date | string
    categoryId?: IntFilter<"Article"> | number
    subCategoryId?: IntFilter<"Article"> | number
    category?: XOR<ArticleCategoryScalarRelationFilter, ArticleCategoryWhereInput>
    subcategory?: XOR<ArticleSubCategoryScalarRelationFilter, ArticleSubCategoryWhereInput>
  }

  export type ArticleOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    coverImageUrl?: SortOrderInput | SortOrder
    publishedAt?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    category?: ArticleCategoryOrderByWithRelationInput
    subcategory?: ArticleSubCategoryOrderByWithRelationInput
    _relevance?: ArticleOrderByRelevanceInput
  }

  export type ArticleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: ArticleWhereInput | ArticleWhereInput[]
    OR?: ArticleWhereInput[]
    NOT?: ArticleWhereInput | ArticleWhereInput[]
    title?: StringFilter<"Article"> | string
    excerpt?: StringFilter<"Article"> | string
    content?: StringFilter<"Article"> | string
    coverImageUrl?: StringNullableFilter<"Article"> | string | null
    publishedAt?: DateTimeFilter<"Article"> | Date | string
    categoryId?: IntFilter<"Article"> | number
    subCategoryId?: IntFilter<"Article"> | number
    category?: XOR<ArticleCategoryScalarRelationFilter, ArticleCategoryWhereInput>
    subcategory?: XOR<ArticleSubCategoryScalarRelationFilter, ArticleSubCategoryWhereInput>
  }, "id" | "slug">

  export type ArticleOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    coverImageUrl?: SortOrderInput | SortOrder
    publishedAt?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    _count?: ArticleCountOrderByAggregateInput
    _avg?: ArticleAvgOrderByAggregateInput
    _max?: ArticleMaxOrderByAggregateInput
    _min?: ArticleMinOrderByAggregateInput
    _sum?: ArticleSumOrderByAggregateInput
  }

  export type ArticleScalarWhereWithAggregatesInput = {
    AND?: ArticleScalarWhereWithAggregatesInput | ArticleScalarWhereWithAggregatesInput[]
    OR?: ArticleScalarWhereWithAggregatesInput[]
    NOT?: ArticleScalarWhereWithAggregatesInput | ArticleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Article"> | number
    title?: StringWithAggregatesFilter<"Article"> | string
    slug?: StringWithAggregatesFilter<"Article"> | string
    excerpt?: StringWithAggregatesFilter<"Article"> | string
    content?: StringWithAggregatesFilter<"Article"> | string
    coverImageUrl?: StringNullableWithAggregatesFilter<"Article"> | string | null
    publishedAt?: DateTimeWithAggregatesFilter<"Article"> | Date | string
    categoryId?: IntWithAggregatesFilter<"Article"> | number
    subCategoryId?: IntWithAggregatesFilter<"Article"> | number
  }

  export type bannersWhereInput = {
    AND?: bannersWhereInput | bannersWhereInput[]
    OR?: bannersWhereInput[]
    NOT?: bannersWhereInput | bannersWhereInput[]
    id?: IntFilter<"banners"> | number
    image?: StringNullableFilter<"banners"> | string | null
    title?: StringFilter<"banners"> | string
    buttonText?: StringNullableFilter<"banners"> | string | null
    buttonLink?: StringNullableFilter<"banners"> | string | null
    created_at?: DateTimeNullableFilter<"banners"> | Date | string | null
    fontColor?: Enumbanners_fontColorNullableFilter<"banners"> | $Enums.banners_fontColor | null
  }

  export type bannersOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrderInput | SortOrder
    title?: SortOrder
    buttonText?: SortOrderInput | SortOrder
    buttonLink?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    fontColor?: SortOrderInput | SortOrder
    _relevance?: bannersOrderByRelevanceInput
  }

  export type bannersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: bannersWhereInput | bannersWhereInput[]
    OR?: bannersWhereInput[]
    NOT?: bannersWhereInput | bannersWhereInput[]
    image?: StringNullableFilter<"banners"> | string | null
    title?: StringFilter<"banners"> | string
    buttonText?: StringNullableFilter<"banners"> | string | null
    buttonLink?: StringNullableFilter<"banners"> | string | null
    created_at?: DateTimeNullableFilter<"banners"> | Date | string | null
    fontColor?: Enumbanners_fontColorNullableFilter<"banners"> | $Enums.banners_fontColor | null
  }, "id">

  export type bannersOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrderInput | SortOrder
    title?: SortOrder
    buttonText?: SortOrderInput | SortOrder
    buttonLink?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    fontColor?: SortOrderInput | SortOrder
    _count?: bannersCountOrderByAggregateInput
    _avg?: bannersAvgOrderByAggregateInput
    _max?: bannersMaxOrderByAggregateInput
    _min?: bannersMinOrderByAggregateInput
    _sum?: bannersSumOrderByAggregateInput
  }

  export type bannersScalarWhereWithAggregatesInput = {
    AND?: bannersScalarWhereWithAggregatesInput | bannersScalarWhereWithAggregatesInput[]
    OR?: bannersScalarWhereWithAggregatesInput[]
    NOT?: bannersScalarWhereWithAggregatesInput | bannersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"banners"> | number
    image?: StringNullableWithAggregatesFilter<"banners"> | string | null
    title?: StringWithAggregatesFilter<"banners"> | string
    buttonText?: StringNullableWithAggregatesFilter<"banners"> | string | null
    buttonLink?: StringNullableWithAggregatesFilter<"banners"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"banners"> | Date | string | null
    fontColor?: Enumbanners_fontColorNullableWithAggregatesFilter<"banners"> | $Enums.banners_fontColor | null
  }

  export type courseWhereInput = {
    AND?: courseWhereInput | courseWhereInput[]
    OR?: courseWhereInput[]
    NOT?: courseWhereInput | courseWhereInput[]
    id?: IntFilter<"course"> | number
    title?: StringFilter<"course"> | string
    slug?: StringFilter<"course"> | string
    coverImage?: StringNullableFilter<"course"> | string | null
    description?: StringNullableFilter<"course"> | string | null
    price?: DecimalFilter<"course"> | Decimal | DecimalJsLike | number | string
    capacity?: IntFilter<"course"> | number
    status?: BoolFilter<"course"> | boolean
    startAt?: DateTimeNullableFilter<"course"> | Date | string | null
    durationMinutes?: IntNullableFilter<"course"> | number | null
    createdAt?: DateTimeFilter<"course"> | Date | string
    updatedAt?: DateTimeFilter<"course"> | Date | string
    courseintent?: CourseintentListRelationFilter
  }

  export type courseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    coverImage?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    startAt?: SortOrderInput | SortOrder
    durationMinutes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    courseintent?: courseintentOrderByRelationAggregateInput
    _relevance?: courseOrderByRelevanceInput
  }

  export type courseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: courseWhereInput | courseWhereInput[]
    OR?: courseWhereInput[]
    NOT?: courseWhereInput | courseWhereInput[]
    title?: StringFilter<"course"> | string
    coverImage?: StringNullableFilter<"course"> | string | null
    description?: StringNullableFilter<"course"> | string | null
    price?: DecimalFilter<"course"> | Decimal | DecimalJsLike | number | string
    capacity?: IntFilter<"course"> | number
    status?: BoolFilter<"course"> | boolean
    startAt?: DateTimeNullableFilter<"course"> | Date | string | null
    durationMinutes?: IntNullableFilter<"course"> | number | null
    createdAt?: DateTimeFilter<"course"> | Date | string
    updatedAt?: DateTimeFilter<"course"> | Date | string
    courseintent?: CourseintentListRelationFilter
  }, "id" | "slug">

  export type courseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    coverImage?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    startAt?: SortOrderInput | SortOrder
    durationMinutes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: courseCountOrderByAggregateInput
    _avg?: courseAvgOrderByAggregateInput
    _max?: courseMaxOrderByAggregateInput
    _min?: courseMinOrderByAggregateInput
    _sum?: courseSumOrderByAggregateInput
  }

  export type courseScalarWhereWithAggregatesInput = {
    AND?: courseScalarWhereWithAggregatesInput | courseScalarWhereWithAggregatesInput[]
    OR?: courseScalarWhereWithAggregatesInput[]
    NOT?: courseScalarWhereWithAggregatesInput | courseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"course"> | number
    title?: StringWithAggregatesFilter<"course"> | string
    slug?: StringWithAggregatesFilter<"course"> | string
    coverImage?: StringNullableWithAggregatesFilter<"course"> | string | null
    description?: StringNullableWithAggregatesFilter<"course"> | string | null
    price?: DecimalWithAggregatesFilter<"course"> | Decimal | DecimalJsLike | number | string
    capacity?: IntWithAggregatesFilter<"course"> | number
    status?: BoolWithAggregatesFilter<"course"> | boolean
    startAt?: DateTimeNullableWithAggregatesFilter<"course"> | Date | string | null
    durationMinutes?: IntNullableWithAggregatesFilter<"course"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"course"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"course"> | Date | string
  }

  export type courseintentWhereInput = {
    AND?: courseintentWhereInput | courseintentWhereInput[]
    OR?: courseintentWhereInput[]
    NOT?: courseintentWhereInput | courseintentWhereInput[]
    id?: IntFilter<"courseintent"> | number
    courseId?: IntFilter<"courseintent"> | number
    name?: StringFilter<"courseintent"> | string
    email?: StringFilter<"courseintent"> | string
    phone?: StringFilter<"courseintent"> | string
    message?: StringNullableFilter<"courseintent"> | string | null
    createdAt?: DateTimeFilter<"courseintent"> | Date | string
    course?: XOR<CourseScalarRelationFilter, courseWhereInput>
  }

  export type courseintentOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    course?: courseOrderByWithRelationInput
    _relevance?: courseintentOrderByRelevanceInput
  }

  export type courseintentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: courseintentWhereInput | courseintentWhereInput[]
    OR?: courseintentWhereInput[]
    NOT?: courseintentWhereInput | courseintentWhereInput[]
    courseId?: IntFilter<"courseintent"> | number
    name?: StringFilter<"courseintent"> | string
    email?: StringFilter<"courseintent"> | string
    phone?: StringFilter<"courseintent"> | string
    message?: StringNullableFilter<"courseintent"> | string | null
    createdAt?: DateTimeFilter<"courseintent"> | Date | string
    course?: XOR<CourseScalarRelationFilter, courseWhereInput>
  }, "id">

  export type courseintentOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: courseintentCountOrderByAggregateInput
    _avg?: courseintentAvgOrderByAggregateInput
    _max?: courseintentMaxOrderByAggregateInput
    _min?: courseintentMinOrderByAggregateInput
    _sum?: courseintentSumOrderByAggregateInput
  }

  export type courseintentScalarWhereWithAggregatesInput = {
    AND?: courseintentScalarWhereWithAggregatesInput | courseintentScalarWhereWithAggregatesInput[]
    OR?: courseintentScalarWhereWithAggregatesInput[]
    NOT?: courseintentScalarWhereWithAggregatesInput | courseintentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"courseintent"> | number
    courseId?: IntWithAggregatesFilter<"courseintent"> | number
    name?: StringWithAggregatesFilter<"courseintent"> | string
    email?: StringWithAggregatesFilter<"courseintent"> | string
    phone?: StringWithAggregatesFilter<"courseintent"> | string
    message?: StringNullableWithAggregatesFilter<"courseintent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"courseintent"> | Date | string
  }

  export type discount_codeWhereInput = {
    AND?: discount_codeWhereInput | discount_codeWhereInput[]
    OR?: discount_codeWhereInput[]
    NOT?: discount_codeWhereInput | discount_codeWhereInput[]
    id?: IntFilter<"discount_code"> | number
    code?: StringFilter<"discount_code"> | string
    type?: StringFilter<"discount_code"> | string
    value?: IntFilter<"discount_code"> | number
    isActive?: BoolFilter<"discount_code"> | boolean
    expiresAt?: DateTimeNullableFilter<"discount_code"> | Date | string | null
    createdAt?: DateTimeFilter<"discount_code"> | Date | string
  }

  export type discount_codeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _relevance?: discount_codeOrderByRelevanceInput
  }

  export type discount_codeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: discount_codeWhereInput | discount_codeWhereInput[]
    OR?: discount_codeWhereInput[]
    NOT?: discount_codeWhereInput | discount_codeWhereInput[]
    type?: StringFilter<"discount_code"> | string
    value?: IntFilter<"discount_code"> | number
    isActive?: BoolFilter<"discount_code"> | boolean
    expiresAt?: DateTimeNullableFilter<"discount_code"> | Date | string | null
    createdAt?: DateTimeFilter<"discount_code"> | Date | string
  }, "id" | "code">

  export type discount_codeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: discount_codeCountOrderByAggregateInput
    _avg?: discount_codeAvgOrderByAggregateInput
    _max?: discount_codeMaxOrderByAggregateInput
    _min?: discount_codeMinOrderByAggregateInput
    _sum?: discount_codeSumOrderByAggregateInput
  }

  export type discount_codeScalarWhereWithAggregatesInput = {
    AND?: discount_codeScalarWhereWithAggregatesInput | discount_codeScalarWhereWithAggregatesInput[]
    OR?: discount_codeScalarWhereWithAggregatesInput[]
    NOT?: discount_codeScalarWhereWithAggregatesInput | discount_codeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"discount_code"> | number
    code?: StringWithAggregatesFilter<"discount_code"> | string
    type?: StringWithAggregatesFilter<"discount_code"> | string
    value?: IntWithAggregatesFilter<"discount_code"> | number
    isActive?: BoolWithAggregatesFilter<"discount_code"> | boolean
    expiresAt?: DateTimeNullableWithAggregatesFilter<"discount_code"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"discount_code"> | Date | string
  }

  export type orderWhereInput = {
    AND?: orderWhereInput | orderWhereInput[]
    OR?: orderWhereInput[]
    NOT?: orderWhereInput | orderWhereInput[]
    id?: IntFilter<"order"> | number
    orderNo?: StringFilter<"order"> | string
    buyerName?: StringFilter<"order"> | string
    email?: StringFilter<"order"> | string
    phone?: StringFilter<"order"> | string
    address?: StringFilter<"order"> | string
    shippingMethod?: Enumorder_shippingMethodFilter<"order"> | $Enums.order_shippingMethod
    subtotal?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    shippingFee?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    status?: Enumorder_statusFilter<"order"> | $Enums.order_status
    paymentMethod?: Enumorder_paymentMethodFilter<"order"> | $Enums.order_paymentMethod
    paymentInfo?: JsonNullableFilter<"order">
    paidAt?: DateTimeNullableFilter<"order"> | Date | string | null
    createdAt?: DateTimeFilter<"order"> | Date | string
    updatedAt?: DateTimeFilter<"order"> | Date | string
    orderitem?: OrderitemListRelationFilter
  }

  export type orderOrderByWithRelationInput = {
    id?: SortOrder
    orderNo?: SortOrder
    buyerName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    shippingMethod?: SortOrder
    subtotal?: SortOrder
    shippingFee?: SortOrder
    discount?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentInfo?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderitem?: orderitemOrderByRelationAggregateInput
    _relevance?: orderOrderByRelevanceInput
  }

  export type orderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    orderNo?: string
    AND?: orderWhereInput | orderWhereInput[]
    OR?: orderWhereInput[]
    NOT?: orderWhereInput | orderWhereInput[]
    buyerName?: StringFilter<"order"> | string
    email?: StringFilter<"order"> | string
    phone?: StringFilter<"order"> | string
    address?: StringFilter<"order"> | string
    shippingMethod?: Enumorder_shippingMethodFilter<"order"> | $Enums.order_shippingMethod
    subtotal?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    shippingFee?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    status?: Enumorder_statusFilter<"order"> | $Enums.order_status
    paymentMethod?: Enumorder_paymentMethodFilter<"order"> | $Enums.order_paymentMethod
    paymentInfo?: JsonNullableFilter<"order">
    paidAt?: DateTimeNullableFilter<"order"> | Date | string | null
    createdAt?: DateTimeFilter<"order"> | Date | string
    updatedAt?: DateTimeFilter<"order"> | Date | string
    orderitem?: OrderitemListRelationFilter
  }, "id" | "orderNo">

  export type orderOrderByWithAggregationInput = {
    id?: SortOrder
    orderNo?: SortOrder
    buyerName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    shippingMethod?: SortOrder
    subtotal?: SortOrder
    shippingFee?: SortOrder
    discount?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentInfo?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: orderCountOrderByAggregateInput
    _avg?: orderAvgOrderByAggregateInput
    _max?: orderMaxOrderByAggregateInput
    _min?: orderMinOrderByAggregateInput
    _sum?: orderSumOrderByAggregateInput
  }

  export type orderScalarWhereWithAggregatesInput = {
    AND?: orderScalarWhereWithAggregatesInput | orderScalarWhereWithAggregatesInput[]
    OR?: orderScalarWhereWithAggregatesInput[]
    NOT?: orderScalarWhereWithAggregatesInput | orderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"order"> | number
    orderNo?: StringWithAggregatesFilter<"order"> | string
    buyerName?: StringWithAggregatesFilter<"order"> | string
    email?: StringWithAggregatesFilter<"order"> | string
    phone?: StringWithAggregatesFilter<"order"> | string
    address?: StringWithAggregatesFilter<"order"> | string
    shippingMethod?: Enumorder_shippingMethodWithAggregatesFilter<"order"> | $Enums.order_shippingMethod
    subtotal?: DecimalWithAggregatesFilter<"order"> | Decimal | DecimalJsLike | number | string
    shippingFee?: DecimalWithAggregatesFilter<"order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalWithAggregatesFilter<"order"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalWithAggregatesFilter<"order"> | Decimal | DecimalJsLike | number | string
    status?: Enumorder_statusWithAggregatesFilter<"order"> | $Enums.order_status
    paymentMethod?: Enumorder_paymentMethodWithAggregatesFilter<"order"> | $Enums.order_paymentMethod
    paymentInfo?: JsonNullableWithAggregatesFilter<"order">
    paidAt?: DateTimeNullableWithAggregatesFilter<"order"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"order"> | Date | string
  }

  export type orderitemWhereInput = {
    AND?: orderitemWhereInput | orderitemWhereInput[]
    OR?: orderitemWhereInput[]
    NOT?: orderitemWhereInput | orderitemWhereInput[]
    id?: IntFilter<"orderitem"> | number
    orderId?: IntFilter<"orderitem"> | number
    productId?: IntFilter<"orderitem"> | number
    variantId?: IntNullableFilter<"orderitem"> | number | null
    qty?: IntFilter<"orderitem"> | number
    unitPrice?: DecimalFilter<"orderitem"> | Decimal | DecimalJsLike | number | string
    addOnJson?: JsonNullableFilter<"orderitem">
    order?: XOR<OrderScalarRelationFilter, orderWhereInput>
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
    productvariant?: XOR<ProductvariantNullableScalarRelationFilter, productvariantWhereInput> | null
  }

  export type orderitemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrderInput | SortOrder
    qty?: SortOrder
    unitPrice?: SortOrder
    addOnJson?: SortOrderInput | SortOrder
    order?: orderOrderByWithRelationInput
    product?: productOrderByWithRelationInput
    productvariant?: productvariantOrderByWithRelationInput
  }

  export type orderitemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: orderitemWhereInput | orderitemWhereInput[]
    OR?: orderitemWhereInput[]
    NOT?: orderitemWhereInput | orderitemWhereInput[]
    orderId?: IntFilter<"orderitem"> | number
    productId?: IntFilter<"orderitem"> | number
    variantId?: IntNullableFilter<"orderitem"> | number | null
    qty?: IntFilter<"orderitem"> | number
    unitPrice?: DecimalFilter<"orderitem"> | Decimal | DecimalJsLike | number | string
    addOnJson?: JsonNullableFilter<"orderitem">
    order?: XOR<OrderScalarRelationFilter, orderWhereInput>
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
    productvariant?: XOR<ProductvariantNullableScalarRelationFilter, productvariantWhereInput> | null
  }, "id">

  export type orderitemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrderInput | SortOrder
    qty?: SortOrder
    unitPrice?: SortOrder
    addOnJson?: SortOrderInput | SortOrder
    _count?: orderitemCountOrderByAggregateInput
    _avg?: orderitemAvgOrderByAggregateInput
    _max?: orderitemMaxOrderByAggregateInput
    _min?: orderitemMinOrderByAggregateInput
    _sum?: orderitemSumOrderByAggregateInput
  }

  export type orderitemScalarWhereWithAggregatesInput = {
    AND?: orderitemScalarWhereWithAggregatesInput | orderitemScalarWhereWithAggregatesInput[]
    OR?: orderitemScalarWhereWithAggregatesInput[]
    NOT?: orderitemScalarWhereWithAggregatesInput | orderitemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"orderitem"> | number
    orderId?: IntWithAggregatesFilter<"orderitem"> | number
    productId?: IntWithAggregatesFilter<"orderitem"> | number
    variantId?: IntNullableWithAggregatesFilter<"orderitem"> | number | null
    qty?: IntWithAggregatesFilter<"orderitem"> | number
    unitPrice?: DecimalWithAggregatesFilter<"orderitem"> | Decimal | DecimalJsLike | number | string
    addOnJson?: JsonNullableWithAggregatesFilter<"orderitem">
  }

  export type productWhereInput = {
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    id?: IntFilter<"product"> | number
    name?: StringFilter<"product"> | string
    slug?: StringFilter<"product"> | string
    categoryId?: IntFilter<"product"> | number
    subcategoryId?: IntNullableFilter<"product"> | number | null
    isAddon?: BoolFilter<"product"> | boolean
    isVisible?: BoolFilter<"product"> | boolean
    description?: StringNullableFilter<"product"> | string | null
    heroImage?: StringNullableFilter<"product"> | string | null
    status?: BoolFilter<"product"> | boolean
    createdAt?: DateTimeFilter<"product"> | Date | string
    updatedAt?: DateTimeFilter<"product"> | Date | string
    isHot?: BoolFilter<"product"> | boolean
    ingredients?: StringNullableFilter<"product"> | string | null
    shelfLife?: StringNullableFilter<"product"> | string | null
    flavorProfile?: StringNullableFilter<"product"> | string | null
    category?: XOR<Product_categoryScalarRelationFilter, product_categoryWhereInput>
    subcategory?: XOR<Product_subcategoryNullableScalarRelationFilter, product_subcategoryWhereInput> | null
    orderitem?: OrderitemListRelationFilter
    productvariant?: ProductvariantListRelationFilter
  }

  export type productOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrderInput | SortOrder
    isAddon?: SortOrder
    isVisible?: SortOrder
    description?: SortOrderInput | SortOrder
    heroImage?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isHot?: SortOrder
    ingredients?: SortOrderInput | SortOrder
    shelfLife?: SortOrderInput | SortOrder
    flavorProfile?: SortOrderInput | SortOrder
    category?: product_categoryOrderByWithRelationInput
    subcategory?: product_subcategoryOrderByWithRelationInput
    orderitem?: orderitemOrderByRelationAggregateInput
    productvariant?: productvariantOrderByRelationAggregateInput
    _relevance?: productOrderByRelevanceInput
  }

  export type productWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    name?: StringFilter<"product"> | string
    categoryId?: IntFilter<"product"> | number
    subcategoryId?: IntNullableFilter<"product"> | number | null
    isAddon?: BoolFilter<"product"> | boolean
    isVisible?: BoolFilter<"product"> | boolean
    description?: StringNullableFilter<"product"> | string | null
    heroImage?: StringNullableFilter<"product"> | string | null
    status?: BoolFilter<"product"> | boolean
    createdAt?: DateTimeFilter<"product"> | Date | string
    updatedAt?: DateTimeFilter<"product"> | Date | string
    isHot?: BoolFilter<"product"> | boolean
    ingredients?: StringNullableFilter<"product"> | string | null
    shelfLife?: StringNullableFilter<"product"> | string | null
    flavorProfile?: StringNullableFilter<"product"> | string | null
    category?: XOR<Product_categoryScalarRelationFilter, product_categoryWhereInput>
    subcategory?: XOR<Product_subcategoryNullableScalarRelationFilter, product_subcategoryWhereInput> | null
    orderitem?: OrderitemListRelationFilter
    productvariant?: ProductvariantListRelationFilter
  }, "id" | "slug">

  export type productOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrderInput | SortOrder
    isAddon?: SortOrder
    isVisible?: SortOrder
    description?: SortOrderInput | SortOrder
    heroImage?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isHot?: SortOrder
    ingredients?: SortOrderInput | SortOrder
    shelfLife?: SortOrderInput | SortOrder
    flavorProfile?: SortOrderInput | SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    OR?: productScalarWhereWithAggregatesInput[]
    NOT?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product"> | number
    name?: StringWithAggregatesFilter<"product"> | string
    slug?: StringWithAggregatesFilter<"product"> | string
    categoryId?: IntWithAggregatesFilter<"product"> | number
    subcategoryId?: IntNullableWithAggregatesFilter<"product"> | number | null
    isAddon?: BoolWithAggregatesFilter<"product"> | boolean
    isVisible?: BoolWithAggregatesFilter<"product"> | boolean
    description?: StringNullableWithAggregatesFilter<"product"> | string | null
    heroImage?: StringNullableWithAggregatesFilter<"product"> | string | null
    status?: BoolWithAggregatesFilter<"product"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"product"> | Date | string
    isHot?: BoolWithAggregatesFilter<"product"> | boolean
    ingredients?: StringNullableWithAggregatesFilter<"product"> | string | null
    shelfLife?: StringNullableWithAggregatesFilter<"product"> | string | null
    flavorProfile?: StringNullableWithAggregatesFilter<"product"> | string | null
  }

  export type product_categoryWhereInput = {
    AND?: product_categoryWhereInput | product_categoryWhereInput[]
    OR?: product_categoryWhereInput[]
    NOT?: product_categoryWhereInput | product_categoryWhereInput[]
    id?: IntFilter<"product_category"> | number
    name?: StringFilter<"product_category"> | string
    slug?: StringFilter<"product_category"> | string
    description?: StringNullableFilter<"product_category"> | string | null
    orderIndex?: IntNullableFilter<"product_category"> | number | null
    createdAt?: DateTimeFilter<"product_category"> | Date | string
    updatedAt?: DateTimeFilter<"product_category"> | Date | string
    products?: ProductListRelationFilter
    subcategories?: Product_subcategoryListRelationFilter
  }

  export type product_categoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    orderIndex?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    products?: productOrderByRelationAggregateInput
    subcategories?: product_subcategoryOrderByRelationAggregateInput
    _relevance?: product_categoryOrderByRelevanceInput
  }

  export type product_categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    slug?: string
    AND?: product_categoryWhereInput | product_categoryWhereInput[]
    OR?: product_categoryWhereInput[]
    NOT?: product_categoryWhereInput | product_categoryWhereInput[]
    description?: StringNullableFilter<"product_category"> | string | null
    orderIndex?: IntNullableFilter<"product_category"> | number | null
    createdAt?: DateTimeFilter<"product_category"> | Date | string
    updatedAt?: DateTimeFilter<"product_category"> | Date | string
    products?: ProductListRelationFilter
    subcategories?: Product_subcategoryListRelationFilter
  }, "id" | "name" | "slug">

  export type product_categoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    orderIndex?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: product_categoryCountOrderByAggregateInput
    _avg?: product_categoryAvgOrderByAggregateInput
    _max?: product_categoryMaxOrderByAggregateInput
    _min?: product_categoryMinOrderByAggregateInput
    _sum?: product_categorySumOrderByAggregateInput
  }

  export type product_categoryScalarWhereWithAggregatesInput = {
    AND?: product_categoryScalarWhereWithAggregatesInput | product_categoryScalarWhereWithAggregatesInput[]
    OR?: product_categoryScalarWhereWithAggregatesInput[]
    NOT?: product_categoryScalarWhereWithAggregatesInput | product_categoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_category"> | number
    name?: StringWithAggregatesFilter<"product_category"> | string
    slug?: StringWithAggregatesFilter<"product_category"> | string
    description?: StringNullableWithAggregatesFilter<"product_category"> | string | null
    orderIndex?: IntNullableWithAggregatesFilter<"product_category"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"product_category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"product_category"> | Date | string
  }

  export type product_subcategoryWhereInput = {
    AND?: product_subcategoryWhereInput | product_subcategoryWhereInput[]
    OR?: product_subcategoryWhereInput[]
    NOT?: product_subcategoryWhereInput | product_subcategoryWhereInput[]
    id?: IntFilter<"product_subcategory"> | number
    categoryId?: IntFilter<"product_subcategory"> | number
    name?: StringFilter<"product_subcategory"> | string
    slug?: StringFilter<"product_subcategory"> | string
    orderIndex?: IntNullableFilter<"product_subcategory"> | number | null
    createdAt?: DateTimeFilter<"product_subcategory"> | Date | string
    updatedAt?: DateTimeFilter<"product_subcategory"> | Date | string
    category?: XOR<Product_categoryScalarRelationFilter, product_categoryWhereInput>
    products?: ProductListRelationFilter
  }

  export type product_subcategoryOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: product_categoryOrderByWithRelationInput
    products?: productOrderByRelationAggregateInput
    _relevance?: product_subcategoryOrderByRelevanceInput
  }

  export type product_subcategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: product_subcategoryWhereInput | product_subcategoryWhereInput[]
    OR?: product_subcategoryWhereInput[]
    NOT?: product_subcategoryWhereInput | product_subcategoryWhereInput[]
    categoryId?: IntFilter<"product_subcategory"> | number
    name?: StringFilter<"product_subcategory"> | string
    orderIndex?: IntNullableFilter<"product_subcategory"> | number | null
    createdAt?: DateTimeFilter<"product_subcategory"> | Date | string
    updatedAt?: DateTimeFilter<"product_subcategory"> | Date | string
    category?: XOR<Product_categoryScalarRelationFilter, product_categoryWhereInput>
    products?: ProductListRelationFilter
  }, "id" | "slug">

  export type product_subcategoryOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: product_subcategoryCountOrderByAggregateInput
    _avg?: product_subcategoryAvgOrderByAggregateInput
    _max?: product_subcategoryMaxOrderByAggregateInput
    _min?: product_subcategoryMinOrderByAggregateInput
    _sum?: product_subcategorySumOrderByAggregateInput
  }

  export type product_subcategoryScalarWhereWithAggregatesInput = {
    AND?: product_subcategoryScalarWhereWithAggregatesInput | product_subcategoryScalarWhereWithAggregatesInput[]
    OR?: product_subcategoryScalarWhereWithAggregatesInput[]
    NOT?: product_subcategoryScalarWhereWithAggregatesInput | product_subcategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_subcategory"> | number
    categoryId?: IntWithAggregatesFilter<"product_subcategory"> | number
    name?: StringWithAggregatesFilter<"product_subcategory"> | string
    slug?: StringWithAggregatesFilter<"product_subcategory"> | string
    orderIndex?: IntNullableWithAggregatesFilter<"product_subcategory"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"product_subcategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"product_subcategory"> | Date | string
  }

  export type productvariantWhereInput = {
    AND?: productvariantWhereInput | productvariantWhereInput[]
    OR?: productvariantWhereInput[]
    NOT?: productvariantWhereInput | productvariantWhereInput[]
    id?: IntFilter<"productvariant"> | number
    productId?: IntFilter<"productvariant"> | number
    variantName?: StringFilter<"productvariant"> | string
    price?: DecimalFilter<"productvariant"> | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFilter<"productvariant"> | boolean
    orderitem?: OrderitemListRelationFilter
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
  }

  export type productvariantOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    variantName?: SortOrder
    price?: SortOrder
    isDefault?: SortOrder
    orderitem?: orderitemOrderByRelationAggregateInput
    product?: productOrderByWithRelationInput
    _relevance?: productvariantOrderByRelevanceInput
  }

  export type productvariantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productvariantWhereInput | productvariantWhereInput[]
    OR?: productvariantWhereInput[]
    NOT?: productvariantWhereInput | productvariantWhereInput[]
    productId?: IntFilter<"productvariant"> | number
    variantName?: StringFilter<"productvariant"> | string
    price?: DecimalFilter<"productvariant"> | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFilter<"productvariant"> | boolean
    orderitem?: OrderitemListRelationFilter
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
  }, "id">

  export type productvariantOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    variantName?: SortOrder
    price?: SortOrder
    isDefault?: SortOrder
    _count?: productvariantCountOrderByAggregateInput
    _avg?: productvariantAvgOrderByAggregateInput
    _max?: productvariantMaxOrderByAggregateInput
    _min?: productvariantMinOrderByAggregateInput
    _sum?: productvariantSumOrderByAggregateInput
  }

  export type productvariantScalarWhereWithAggregatesInput = {
    AND?: productvariantScalarWhereWithAggregatesInput | productvariantScalarWhereWithAggregatesInput[]
    OR?: productvariantScalarWhereWithAggregatesInput[]
    NOT?: productvariantScalarWhereWithAggregatesInput | productvariantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"productvariant"> | number
    productId?: IntWithAggregatesFilter<"productvariant"> | number
    variantName?: StringWithAggregatesFilter<"productvariant"> | string
    price?: DecimalWithAggregatesFilter<"productvariant"> | Decimal | DecimalJsLike | number | string
    isDefault?: BoolWithAggregatesFilter<"productvariant"> | boolean
  }

  export type newsWhereInput = {
    AND?: newsWhereInput | newsWhereInput[]
    OR?: newsWhereInput[]
    NOT?: newsWhereInput | newsWhereInput[]
    id?: IntFilter<"news"> | number
    title?: StringFilter<"news"> | string
    content?: StringFilter<"news"> | string
    image?: StringNullableFilter<"news"> | string | null
    date?: DateTimeFilter<"news"> | Date | string
    createdAt?: DateTimeFilter<"news"> | Date | string
  }

  export type newsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    _relevance?: newsOrderByRelevanceInput
  }

  export type newsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: newsWhereInput | newsWhereInput[]
    OR?: newsWhereInput[]
    NOT?: newsWhereInput | newsWhereInput[]
    title?: StringFilter<"news"> | string
    content?: StringFilter<"news"> | string
    image?: StringNullableFilter<"news"> | string | null
    date?: DateTimeFilter<"news"> | Date | string
    createdAt?: DateTimeFilter<"news"> | Date | string
  }, "id">

  export type newsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    _count?: newsCountOrderByAggregateInput
    _avg?: newsAvgOrderByAggregateInput
    _max?: newsMaxOrderByAggregateInput
    _min?: newsMinOrderByAggregateInput
    _sum?: newsSumOrderByAggregateInput
  }

  export type newsScalarWhereWithAggregatesInput = {
    AND?: newsScalarWhereWithAggregatesInput | newsScalarWhereWithAggregatesInput[]
    OR?: newsScalarWhereWithAggregatesInput[]
    NOT?: newsScalarWhereWithAggregatesInput | newsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"news"> | number
    title?: StringWithAggregatesFilter<"news"> | string
    content?: StringWithAggregatesFilter<"news"> | string
    image?: StringNullableWithAggregatesFilter<"news"> | string | null
    date?: DateTimeWithAggregatesFilter<"news"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"news"> | Date | string
  }

  export type ArticleCategoryCreateInput = {
    name: string
    slug: string
    orderIndex: number
    subcategories?: ArticleSubCategoryCreateNestedManyWithoutCategoryInput
    articles?: ArticleCreateNestedManyWithoutCategoryInput
  }

  export type ArticleCategoryUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    orderIndex: number
    subcategories?: ArticleSubCategoryUncheckedCreateNestedManyWithoutCategoryInput
    articles?: ArticleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ArticleCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    subcategories?: ArticleSubCategoryUpdateManyWithoutCategoryNestedInput
    articles?: ArticleUpdateManyWithoutCategoryNestedInput
  }

  export type ArticleCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    subcategories?: ArticleSubCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    articles?: ArticleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ArticleCategoryCreateManyInput = {
    id?: number
    name: string
    slug: string
    orderIndex: number
  }

  export type ArticleCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
  }

  export type ArticleCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
  }

  export type ArticleSubCategoryCreateInput = {
    name: string
    slug: string
    orderIndex: number
    category: ArticleCategoryCreateNestedOneWithoutSubcategoriesInput
    articles?: ArticleCreateNestedManyWithoutSubcategoryInput
  }

  export type ArticleSubCategoryUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    orderIndex: number
    categoryId: number
    articles?: ArticleUncheckedCreateNestedManyWithoutSubcategoryInput
  }

  export type ArticleSubCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    category?: ArticleCategoryUpdateOneRequiredWithoutSubcategoriesNestedInput
    articles?: ArticleUpdateManyWithoutSubcategoryNestedInput
  }

  export type ArticleSubCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    articles?: ArticleUncheckedUpdateManyWithoutSubcategoryNestedInput
  }

  export type ArticleSubCategoryCreateManyInput = {
    id?: number
    name: string
    slug: string
    orderIndex: number
    categoryId: number
  }

  export type ArticleSubCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
  }

  export type ArticleSubCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type ArticleCreateInput = {
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl?: string | null
    publishedAt?: Date | string
    category: ArticleCategoryCreateNestedOneWithoutArticlesInput
    subcategory: ArticleSubCategoryCreateNestedOneWithoutArticlesInput
  }

  export type ArticleUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl?: string | null
    publishedAt?: Date | string
    categoryId: number
    subCategoryId: number
  }

  export type ArticleUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ArticleCategoryUpdateOneRequiredWithoutArticlesNestedInput
    subcategory?: ArticleSubCategoryUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
    subCategoryId?: IntFieldUpdateOperationsInput | number
  }

  export type ArticleCreateManyInput = {
    id?: number
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl?: string | null
    publishedAt?: Date | string
    categoryId: number
    subCategoryId: number
  }

  export type ArticleUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
    subCategoryId?: IntFieldUpdateOperationsInput | number
  }

  export type bannersCreateInput = {
    image?: string | null
    title: string
    buttonText?: string | null
    buttonLink?: string | null
    created_at?: Date | string | null
    fontColor?: $Enums.banners_fontColor | null
  }

  export type bannersUncheckedCreateInput = {
    id?: number
    image?: string | null
    title: string
    buttonText?: string | null
    buttonLink?: string | null
    created_at?: Date | string | null
    fontColor?: $Enums.banners_fontColor | null
  }

  export type bannersUpdateInput = {
    image?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    buttonText?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLink?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fontColor?: NullableEnumbanners_fontColorFieldUpdateOperationsInput | $Enums.banners_fontColor | null
  }

  export type bannersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    buttonText?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLink?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fontColor?: NullableEnumbanners_fontColorFieldUpdateOperationsInput | $Enums.banners_fontColor | null
  }

  export type bannersCreateManyInput = {
    id?: number
    image?: string | null
    title: string
    buttonText?: string | null
    buttonLink?: string | null
    created_at?: Date | string | null
    fontColor?: $Enums.banners_fontColor | null
  }

  export type bannersUpdateManyMutationInput = {
    image?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    buttonText?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLink?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fontColor?: NullableEnumbanners_fontColorFieldUpdateOperationsInput | $Enums.banners_fontColor | null
  }

  export type bannersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    buttonText?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLink?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fontColor?: NullableEnumbanners_fontColorFieldUpdateOperationsInput | $Enums.banners_fontColor | null
  }

  export type courseCreateInput = {
    title: string
    slug: string
    coverImage?: string | null
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    capacity?: number
    status?: boolean
    startAt?: Date | string | null
    durationMinutes?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    courseintent?: courseintentCreateNestedManyWithoutCourseInput
  }

  export type courseUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    coverImage?: string | null
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    capacity?: number
    status?: boolean
    startAt?: Date | string | null
    durationMinutes?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    courseintent?: courseintentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type courseUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    capacity?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courseintent?: courseintentUpdateManyWithoutCourseNestedInput
  }

  export type courseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    capacity?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courseintent?: courseintentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type courseCreateManyInput = {
    id?: number
    title: string
    slug: string
    coverImage?: string | null
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    capacity?: number
    status?: boolean
    startAt?: Date | string | null
    durationMinutes?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type courseUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    capacity?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type courseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    capacity?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type courseintentCreateInput = {
    name: string
    email: string
    phone: string
    message?: string | null
    createdAt?: Date | string
    course: courseCreateNestedOneWithoutCourseintentInput
  }

  export type courseintentUncheckedCreateInput = {
    id?: number
    courseId: number
    name: string
    email: string
    phone: string
    message?: string | null
    createdAt?: Date | string
  }

  export type courseintentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: courseUpdateOneRequiredWithoutCourseintentNestedInput
  }

  export type courseintentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type courseintentCreateManyInput = {
    id?: number
    courseId: number
    name: string
    email: string
    phone: string
    message?: string | null
    createdAt?: Date | string
  }

  export type courseintentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type courseintentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type discount_codeCreateInput = {
    code: string
    type: string
    value: number
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type discount_codeUncheckedCreateInput = {
    id?: number
    code: string
    type: string
    value: number
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type discount_codeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type discount_codeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type discount_codeCreateManyInput = {
    id?: number
    code: string
    type: string
    value: number
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type discount_codeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type discount_codeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderCreateInput = {
    orderNo: string
    buyerName: string
    email: string
    phone: string
    address: string
    shippingMethod: $Enums.order_shippingMethod
    subtotal: Decimal | DecimalJsLike | number | string
    shippingFee: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.order_status
    paymentMethod: $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderitem?: orderitemCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateInput = {
    id?: number
    orderNo: string
    buyerName: string
    email: string
    phone: string
    address: string
    shippingMethod: $Enums.order_shippingMethod
    subtotal: Decimal | DecimalJsLike | number | string
    shippingFee: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.order_status
    paymentMethod: $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderitem?: orderitemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderUpdateInput = {
    orderNo?: StringFieldUpdateOperationsInput | string
    buyerName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    shippingMethod?: Enumorder_shippingMethodFieldUpdateOperationsInput | $Enums.order_shippingMethod
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingFee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: Enumorder_statusFieldUpdateOperationsInput | $Enums.order_status
    paymentMethod?: Enumorder_paymentMethodFieldUpdateOperationsInput | $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderitem?: orderitemUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNo?: StringFieldUpdateOperationsInput | string
    buyerName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    shippingMethod?: Enumorder_shippingMethodFieldUpdateOperationsInput | $Enums.order_shippingMethod
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingFee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: Enumorder_statusFieldUpdateOperationsInput | $Enums.order_status
    paymentMethod?: Enumorder_paymentMethodFieldUpdateOperationsInput | $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderitem?: orderitemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderCreateManyInput = {
    id?: number
    orderNo: string
    buyerName: string
    email: string
    phone: string
    address: string
    shippingMethod: $Enums.order_shippingMethod
    subtotal: Decimal | DecimalJsLike | number | string
    shippingFee: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.order_status
    paymentMethod: $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderUpdateManyMutationInput = {
    orderNo?: StringFieldUpdateOperationsInput | string
    buyerName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    shippingMethod?: Enumorder_shippingMethodFieldUpdateOperationsInput | $Enums.order_shippingMethod
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingFee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: Enumorder_statusFieldUpdateOperationsInput | $Enums.order_status
    paymentMethod?: Enumorder_paymentMethodFieldUpdateOperationsInput | $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNo?: StringFieldUpdateOperationsInput | string
    buyerName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    shippingMethod?: Enumorder_shippingMethodFieldUpdateOperationsInput | $Enums.order_shippingMethod
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingFee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: Enumorder_statusFieldUpdateOperationsInput | $Enums.order_status
    paymentMethod?: Enumorder_paymentMethodFieldUpdateOperationsInput | $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderitemCreateInput = {
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
    order: orderCreateNestedOneWithoutOrderitemInput
    product: productCreateNestedOneWithoutOrderitemInput
    productvariant?: productvariantCreateNestedOneWithoutOrderitemInput
  }

  export type orderitemUncheckedCreateInput = {
    id?: number
    orderId: number
    productId: number
    variantId?: number | null
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemUpdateInput = {
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
    order?: orderUpdateOneRequiredWithoutOrderitemNestedInput
    product?: productUpdateOneRequiredWithoutOrderitemNestedInput
    productvariant?: productvariantUpdateOneWithoutOrderitemNestedInput
  }

  export type orderitemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: NullableIntFieldUpdateOperationsInput | number | null
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemCreateManyInput = {
    id?: number
    orderId: number
    productId: number
    variantId?: number | null
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemUpdateManyMutationInput = {
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: NullableIntFieldUpdateOperationsInput | number | null
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type productCreateInput = {
    name: string
    slug: string
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    category: product_categoryCreateNestedOneWithoutProductsInput
    subcategory?: product_subcategoryCreateNestedOneWithoutProductsInput
    orderitem?: orderitemCreateNestedManyWithoutProductInput
    productvariant?: productvariantCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    categoryId: number
    subcategoryId?: number | null
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    orderitem?: orderitemUncheckedCreateNestedManyWithoutProductInput
    productvariant?: productvariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    category?: product_categoryUpdateOneRequiredWithoutProductsNestedInput
    subcategory?: product_subcategoryUpdateOneWithoutProductsNestedInput
    orderitem?: orderitemUpdateManyWithoutProductNestedInput
    productvariant?: productvariantUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    orderitem?: orderitemUncheckedUpdateManyWithoutProductNestedInput
    productvariant?: productvariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateManyInput = {
    id?: number
    name: string
    slug: string
    categoryId: number
    subcategoryId?: number | null
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
  }

  export type productUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_categoryCreateInput = {
    name: string
    slug: string
    description?: string | null
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productCreateNestedManyWithoutCategoryInput
    subcategories?: product_subcategoryCreateNestedManyWithoutCategoryInput
  }

  export type product_categoryUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productUncheckedCreateNestedManyWithoutCategoryInput
    subcategories?: product_subcategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type product_categoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productUpdateManyWithoutCategoryNestedInput
    subcategories?: product_subcategoryUpdateManyWithoutCategoryNestedInput
  }

  export type product_categoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productUncheckedUpdateManyWithoutCategoryNestedInput
    subcategories?: product_subcategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type product_categoryCreateManyInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type product_categoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_categoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_subcategoryCreateInput = {
    name: string
    slug: string
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: product_categoryCreateNestedOneWithoutSubcategoriesInput
    products?: productCreateNestedManyWithoutSubcategoryInput
  }

  export type product_subcategoryUncheckedCreateInput = {
    id?: number
    categoryId: number
    name: string
    slug: string
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productUncheckedCreateNestedManyWithoutSubcategoryInput
  }

  export type product_subcategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: product_categoryUpdateOneRequiredWithoutSubcategoriesNestedInput
    products?: productUpdateManyWithoutSubcategoryNestedInput
  }

  export type product_subcategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productUncheckedUpdateManyWithoutSubcategoryNestedInput
  }

  export type product_subcategoryCreateManyInput = {
    id?: number
    categoryId: number
    name: string
    slug: string
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type product_subcategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_subcategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productvariantCreateInput = {
    variantName: string
    price: Decimal | DecimalJsLike | number | string
    isDefault?: boolean
    orderitem?: orderitemCreateNestedManyWithoutProductvariantInput
    product: productCreateNestedOneWithoutProductvariantInput
  }

  export type productvariantUncheckedCreateInput = {
    id?: number
    productId: number
    variantName: string
    price: Decimal | DecimalJsLike | number | string
    isDefault?: boolean
    orderitem?: orderitemUncheckedCreateNestedManyWithoutProductvariantInput
  }

  export type productvariantUpdateInput = {
    variantName?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    orderitem?: orderitemUpdateManyWithoutProductvariantNestedInput
    product?: productUpdateOneRequiredWithoutProductvariantNestedInput
  }

  export type productvariantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantName?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    orderitem?: orderitemUncheckedUpdateManyWithoutProductvariantNestedInput
  }

  export type productvariantCreateManyInput = {
    id?: number
    productId: number
    variantName: string
    price: Decimal | DecimalJsLike | number | string
    isDefault?: boolean
  }

  export type productvariantUpdateManyMutationInput = {
    variantName?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productvariantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantName?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type newsCreateInput = {
    title: string
    content: string
    image?: string | null
    date: Date | string
    createdAt?: Date | string
  }

  export type newsUncheckedCreateInput = {
    id?: number
    title: string
    content: string
    image?: string | null
    date: Date | string
    createdAt?: Date | string
  }

  export type newsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type newsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type newsCreateManyInput = {
    id?: number
    title: string
    content: string
    image?: string | null
    date: Date | string
    createdAt?: Date | string
  }

  export type newsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type newsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ArticleSubCategoryListRelationFilter = {
    every?: ArticleSubCategoryWhereInput
    some?: ArticleSubCategoryWhereInput
    none?: ArticleSubCategoryWhereInput
  }

  export type ArticleListRelationFilter = {
    every?: ArticleWhereInput
    some?: ArticleWhereInput
    none?: ArticleWhereInput
  }

  export type ArticleSubCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArticleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArticleCategoryOrderByRelevanceInput = {
    fields: ArticleCategoryOrderByRelevanceFieldEnum | ArticleCategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ArticleCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
  }

  export type ArticleCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    orderIndex?: SortOrder
  }

  export type ArticleCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
  }

  export type ArticleCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
  }

  export type ArticleCategorySumOrderByAggregateInput = {
    id?: SortOrder
    orderIndex?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ArticleCategoryScalarRelationFilter = {
    is?: ArticleCategoryWhereInput
    isNot?: ArticleCategoryWhereInput
  }

  export type ArticleSubCategoryOrderByRelevanceInput = {
    fields: ArticleSubCategoryOrderByRelevanceFieldEnum | ArticleSubCategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ArticleSubCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    categoryId?: SortOrder
  }

  export type ArticleSubCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    orderIndex?: SortOrder
    categoryId?: SortOrder
  }

  export type ArticleSubCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    categoryId?: SortOrder
  }

  export type ArticleSubCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    categoryId?: SortOrder
  }

  export type ArticleSubCategorySumOrderByAggregateInput = {
    id?: SortOrder
    orderIndex?: SortOrder
    categoryId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ArticleSubCategoryScalarRelationFilter = {
    is?: ArticleSubCategoryWhereInput
    isNot?: ArticleSubCategoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ArticleOrderByRelevanceInput = {
    fields: ArticleOrderByRelevanceFieldEnum | ArticleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ArticleCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    coverImageUrl?: SortOrder
    publishedAt?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
  }

  export type ArticleAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
  }

  export type ArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    coverImageUrl?: SortOrder
    publishedAt?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
  }

  export type ArticleMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    coverImageUrl?: SortOrder
    publishedAt?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
  }

  export type ArticleSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Enumbanners_fontColorNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.banners_fontColor | Enumbanners_fontColorFieldRefInput<$PrismaModel> | null
    in?: $Enums.banners_fontColor[] | null
    notIn?: $Enums.banners_fontColor[] | null
    not?: NestedEnumbanners_fontColorNullableFilter<$PrismaModel> | $Enums.banners_fontColor | null
  }

  export type bannersOrderByRelevanceInput = {
    fields: bannersOrderByRelevanceFieldEnum | bannersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type bannersCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    buttonText?: SortOrder
    buttonLink?: SortOrder
    created_at?: SortOrder
    fontColor?: SortOrder
  }

  export type bannersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type bannersMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    buttonText?: SortOrder
    buttonLink?: SortOrder
    created_at?: SortOrder
    fontColor?: SortOrder
  }

  export type bannersMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    buttonText?: SortOrder
    buttonLink?: SortOrder
    created_at?: SortOrder
    fontColor?: SortOrder
  }

  export type bannersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type Enumbanners_fontColorNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.banners_fontColor | Enumbanners_fontColorFieldRefInput<$PrismaModel> | null
    in?: $Enums.banners_fontColor[] | null
    notIn?: $Enums.banners_fontColor[] | null
    not?: NestedEnumbanners_fontColorNullableWithAggregatesFilter<$PrismaModel> | $Enums.banners_fontColor | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumbanners_fontColorNullableFilter<$PrismaModel>
    _max?: NestedEnumbanners_fontColorNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CourseintentListRelationFilter = {
    every?: courseintentWhereInput
    some?: courseintentWhereInput
    none?: courseintentWhereInput
  }

  export type courseintentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type courseOrderByRelevanceInput = {
    fields: courseOrderByRelevanceFieldEnum | courseOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type courseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    coverImage?: SortOrder
    description?: SortOrder
    price?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    startAt?: SortOrder
    durationMinutes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type courseAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    capacity?: SortOrder
    durationMinutes?: SortOrder
  }

  export type courseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    coverImage?: SortOrder
    description?: SortOrder
    price?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    startAt?: SortOrder
    durationMinutes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type courseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    coverImage?: SortOrder
    description?: SortOrder
    price?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    startAt?: SortOrder
    durationMinutes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type courseSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    capacity?: SortOrder
    durationMinutes?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CourseScalarRelationFilter = {
    is?: courseWhereInput
    isNot?: courseWhereInput
  }

  export type courseintentOrderByRelevanceInput = {
    fields: courseintentOrderByRelevanceFieldEnum | courseintentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type courseintentCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type courseintentAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
  }

  export type courseintentMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type courseintentMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type courseintentSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
  }

  export type discount_codeOrderByRelevanceInput = {
    fields: discount_codeOrderByRelevanceFieldEnum | discount_codeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type discount_codeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type discount_codeAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type discount_codeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type discount_codeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type discount_codeSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type Enumorder_shippingMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.order_shippingMethod | Enumorder_shippingMethodFieldRefInput<$PrismaModel>
    in?: $Enums.order_shippingMethod[]
    notIn?: $Enums.order_shippingMethod[]
    not?: NestedEnumorder_shippingMethodFilter<$PrismaModel> | $Enums.order_shippingMethod
  }

  export type Enumorder_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.order_status | Enumorder_statusFieldRefInput<$PrismaModel>
    in?: $Enums.order_status[]
    notIn?: $Enums.order_status[]
    not?: NestedEnumorder_statusFilter<$PrismaModel> | $Enums.order_status
  }

  export type Enumorder_paymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.order_paymentMethod | Enumorder_paymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.order_paymentMethod[]
    notIn?: $Enums.order_paymentMethod[]
    not?: NestedEnumorder_paymentMethodFilter<$PrismaModel> | $Enums.order_paymentMethod
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type OrderitemListRelationFilter = {
    every?: orderitemWhereInput
    some?: orderitemWhereInput
    none?: orderitemWhereInput
  }

  export type orderitemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type orderOrderByRelevanceInput = {
    fields: orderOrderByRelevanceFieldEnum | orderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type orderCountOrderByAggregateInput = {
    id?: SortOrder
    orderNo?: SortOrder
    buyerName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    shippingMethod?: SortOrder
    subtotal?: SortOrder
    shippingFee?: SortOrder
    discount?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentInfo?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderAvgOrderByAggregateInput = {
    id?: SortOrder
    subtotal?: SortOrder
    shippingFee?: SortOrder
    discount?: SortOrder
    totalAmount?: SortOrder
  }

  export type orderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNo?: SortOrder
    buyerName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    shippingMethod?: SortOrder
    subtotal?: SortOrder
    shippingFee?: SortOrder
    discount?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderMinOrderByAggregateInput = {
    id?: SortOrder
    orderNo?: SortOrder
    buyerName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    shippingMethod?: SortOrder
    subtotal?: SortOrder
    shippingFee?: SortOrder
    discount?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderSumOrderByAggregateInput = {
    id?: SortOrder
    subtotal?: SortOrder
    shippingFee?: SortOrder
    discount?: SortOrder
    totalAmount?: SortOrder
  }

  export type Enumorder_shippingMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.order_shippingMethod | Enumorder_shippingMethodFieldRefInput<$PrismaModel>
    in?: $Enums.order_shippingMethod[]
    notIn?: $Enums.order_shippingMethod[]
    not?: NestedEnumorder_shippingMethodWithAggregatesFilter<$PrismaModel> | $Enums.order_shippingMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumorder_shippingMethodFilter<$PrismaModel>
    _max?: NestedEnumorder_shippingMethodFilter<$PrismaModel>
  }

  export type Enumorder_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.order_status | Enumorder_statusFieldRefInput<$PrismaModel>
    in?: $Enums.order_status[]
    notIn?: $Enums.order_status[]
    not?: NestedEnumorder_statusWithAggregatesFilter<$PrismaModel> | $Enums.order_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumorder_statusFilter<$PrismaModel>
    _max?: NestedEnumorder_statusFilter<$PrismaModel>
  }

  export type Enumorder_paymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.order_paymentMethod | Enumorder_paymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.order_paymentMethod[]
    notIn?: $Enums.order_paymentMethod[]
    not?: NestedEnumorder_paymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.order_paymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumorder_paymentMethodFilter<$PrismaModel>
    _max?: NestedEnumorder_paymentMethodFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type OrderScalarRelationFilter = {
    is?: orderWhereInput
    isNot?: orderWhereInput
  }

  export type ProductScalarRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type ProductvariantNullableScalarRelationFilter = {
    is?: productvariantWhereInput | null
    isNot?: productvariantWhereInput | null
  }

  export type orderitemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    qty?: SortOrder
    unitPrice?: SortOrder
    addOnJson?: SortOrder
  }

  export type orderitemAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    qty?: SortOrder
    unitPrice?: SortOrder
  }

  export type orderitemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    qty?: SortOrder
    unitPrice?: SortOrder
  }

  export type orderitemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    qty?: SortOrder
    unitPrice?: SortOrder
  }

  export type orderitemSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    qty?: SortOrder
    unitPrice?: SortOrder
  }

  export type Product_categoryScalarRelationFilter = {
    is?: product_categoryWhereInput
    isNot?: product_categoryWhereInput
  }

  export type Product_subcategoryNullableScalarRelationFilter = {
    is?: product_subcategoryWhereInput | null
    isNot?: product_subcategoryWhereInput | null
  }

  export type ProductvariantListRelationFilter = {
    every?: productvariantWhereInput
    some?: productvariantWhereInput
    none?: productvariantWhereInput
  }

  export type productvariantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productOrderByRelevanceInput = {
    fields: productOrderByRelevanceFieldEnum | productOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type productCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
    isAddon?: SortOrder
    isVisible?: SortOrder
    description?: SortOrder
    heroImage?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isHot?: SortOrder
    ingredients?: SortOrder
    shelfLife?: SortOrder
    flavorProfile?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
    isAddon?: SortOrder
    isVisible?: SortOrder
    description?: SortOrder
    heroImage?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isHot?: SortOrder
    ingredients?: SortOrder
    shelfLife?: SortOrder
    flavorProfile?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
    isAddon?: SortOrder
    isVisible?: SortOrder
    description?: SortOrder
    heroImage?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isHot?: SortOrder
    ingredients?: SortOrder
    shelfLife?: SortOrder
    flavorProfile?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
  }

  export type ProductListRelationFilter = {
    every?: productWhereInput
    some?: productWhereInput
    none?: productWhereInput
  }

  export type Product_subcategoryListRelationFilter = {
    every?: product_subcategoryWhereInput
    some?: product_subcategoryWhereInput
    none?: product_subcategoryWhereInput
  }

  export type productOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_subcategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_categoryOrderByRelevanceInput = {
    fields: product_categoryOrderByRelevanceFieldEnum | product_categoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type product_categoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type product_categoryAvgOrderByAggregateInput = {
    id?: SortOrder
    orderIndex?: SortOrder
  }

  export type product_categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type product_categoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type product_categorySumOrderByAggregateInput = {
    id?: SortOrder
    orderIndex?: SortOrder
  }

  export type product_subcategoryOrderByRelevanceInput = {
    fields: product_subcategoryOrderByRelevanceFieldEnum | product_subcategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type product_subcategoryCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type product_subcategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    orderIndex?: SortOrder
  }

  export type product_subcategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type product_subcategoryMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type product_subcategorySumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    orderIndex?: SortOrder
  }

  export type productvariantOrderByRelevanceInput = {
    fields: productvariantOrderByRelevanceFieldEnum | productvariantOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type productvariantCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    variantName?: SortOrder
    price?: SortOrder
    isDefault?: SortOrder
  }

  export type productvariantAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    price?: SortOrder
  }

  export type productvariantMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    variantName?: SortOrder
    price?: SortOrder
    isDefault?: SortOrder
  }

  export type productvariantMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    variantName?: SortOrder
    price?: SortOrder
    isDefault?: SortOrder
  }

  export type productvariantSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    price?: SortOrder
  }

  export type newsOrderByRelevanceInput = {
    fields: newsOrderByRelevanceFieldEnum | newsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type newsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type newsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type newsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type newsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type newsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ArticleSubCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ArticleSubCategoryCreateWithoutCategoryInput, ArticleSubCategoryUncheckedCreateWithoutCategoryInput> | ArticleSubCategoryCreateWithoutCategoryInput[] | ArticleSubCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleSubCategoryCreateOrConnectWithoutCategoryInput | ArticleSubCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: ArticleSubCategoryCreateManyCategoryInputEnvelope
    connect?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
  }

  export type ArticleCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput> | ArticleCreateWithoutCategoryInput[] | ArticleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoryInput | ArticleCreateOrConnectWithoutCategoryInput[]
    createMany?: ArticleCreateManyCategoryInputEnvelope
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
  }

  export type ArticleSubCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ArticleSubCategoryCreateWithoutCategoryInput, ArticleSubCategoryUncheckedCreateWithoutCategoryInput> | ArticleSubCategoryCreateWithoutCategoryInput[] | ArticleSubCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleSubCategoryCreateOrConnectWithoutCategoryInput | ArticleSubCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: ArticleSubCategoryCreateManyCategoryInputEnvelope
    connect?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
  }

  export type ArticleUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput> | ArticleCreateWithoutCategoryInput[] | ArticleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoryInput | ArticleCreateOrConnectWithoutCategoryInput[]
    createMany?: ArticleCreateManyCategoryInputEnvelope
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ArticleSubCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ArticleSubCategoryCreateWithoutCategoryInput, ArticleSubCategoryUncheckedCreateWithoutCategoryInput> | ArticleSubCategoryCreateWithoutCategoryInput[] | ArticleSubCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleSubCategoryCreateOrConnectWithoutCategoryInput | ArticleSubCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: ArticleSubCategoryUpsertWithWhereUniqueWithoutCategoryInput | ArticleSubCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ArticleSubCategoryCreateManyCategoryInputEnvelope
    set?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
    disconnect?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
    delete?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
    connect?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
    update?: ArticleSubCategoryUpdateWithWhereUniqueWithoutCategoryInput | ArticleSubCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ArticleSubCategoryUpdateManyWithWhereWithoutCategoryInput | ArticleSubCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ArticleSubCategoryScalarWhereInput | ArticleSubCategoryScalarWhereInput[]
  }

  export type ArticleUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput> | ArticleCreateWithoutCategoryInput[] | ArticleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoryInput | ArticleCreateOrConnectWithoutCategoryInput[]
    upsert?: ArticleUpsertWithWhereUniqueWithoutCategoryInput | ArticleUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ArticleCreateManyCategoryInputEnvelope
    set?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    disconnect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    delete?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    update?: ArticleUpdateWithWhereUniqueWithoutCategoryInput | ArticleUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ArticleUpdateManyWithWhereWithoutCategoryInput | ArticleUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
  }

  export type ArticleSubCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ArticleSubCategoryCreateWithoutCategoryInput, ArticleSubCategoryUncheckedCreateWithoutCategoryInput> | ArticleSubCategoryCreateWithoutCategoryInput[] | ArticleSubCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleSubCategoryCreateOrConnectWithoutCategoryInput | ArticleSubCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: ArticleSubCategoryUpsertWithWhereUniqueWithoutCategoryInput | ArticleSubCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ArticleSubCategoryCreateManyCategoryInputEnvelope
    set?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
    disconnect?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
    delete?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
    connect?: ArticleSubCategoryWhereUniqueInput | ArticleSubCategoryWhereUniqueInput[]
    update?: ArticleSubCategoryUpdateWithWhereUniqueWithoutCategoryInput | ArticleSubCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ArticleSubCategoryUpdateManyWithWhereWithoutCategoryInput | ArticleSubCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ArticleSubCategoryScalarWhereInput | ArticleSubCategoryScalarWhereInput[]
  }

  export type ArticleUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput> | ArticleCreateWithoutCategoryInput[] | ArticleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoryInput | ArticleCreateOrConnectWithoutCategoryInput[]
    upsert?: ArticleUpsertWithWhereUniqueWithoutCategoryInput | ArticleUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ArticleCreateManyCategoryInputEnvelope
    set?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    disconnect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    delete?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    update?: ArticleUpdateWithWhereUniqueWithoutCategoryInput | ArticleUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ArticleUpdateManyWithWhereWithoutCategoryInput | ArticleUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
  }

  export type ArticleCategoryCreateNestedOneWithoutSubcategoriesInput = {
    create?: XOR<ArticleCategoryCreateWithoutSubcategoriesInput, ArticleCategoryUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: ArticleCategoryCreateOrConnectWithoutSubcategoriesInput
    connect?: ArticleCategoryWhereUniqueInput
  }

  export type ArticleCreateNestedManyWithoutSubcategoryInput = {
    create?: XOR<ArticleCreateWithoutSubcategoryInput, ArticleUncheckedCreateWithoutSubcategoryInput> | ArticleCreateWithoutSubcategoryInput[] | ArticleUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutSubcategoryInput | ArticleCreateOrConnectWithoutSubcategoryInput[]
    createMany?: ArticleCreateManySubcategoryInputEnvelope
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
  }

  export type ArticleUncheckedCreateNestedManyWithoutSubcategoryInput = {
    create?: XOR<ArticleCreateWithoutSubcategoryInput, ArticleUncheckedCreateWithoutSubcategoryInput> | ArticleCreateWithoutSubcategoryInput[] | ArticleUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutSubcategoryInput | ArticleCreateOrConnectWithoutSubcategoryInput[]
    createMany?: ArticleCreateManySubcategoryInputEnvelope
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
  }

  export type ArticleCategoryUpdateOneRequiredWithoutSubcategoriesNestedInput = {
    create?: XOR<ArticleCategoryCreateWithoutSubcategoriesInput, ArticleCategoryUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: ArticleCategoryCreateOrConnectWithoutSubcategoriesInput
    upsert?: ArticleCategoryUpsertWithoutSubcategoriesInput
    connect?: ArticleCategoryWhereUniqueInput
    update?: XOR<XOR<ArticleCategoryUpdateToOneWithWhereWithoutSubcategoriesInput, ArticleCategoryUpdateWithoutSubcategoriesInput>, ArticleCategoryUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type ArticleUpdateManyWithoutSubcategoryNestedInput = {
    create?: XOR<ArticleCreateWithoutSubcategoryInput, ArticleUncheckedCreateWithoutSubcategoryInput> | ArticleCreateWithoutSubcategoryInput[] | ArticleUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutSubcategoryInput | ArticleCreateOrConnectWithoutSubcategoryInput[]
    upsert?: ArticleUpsertWithWhereUniqueWithoutSubcategoryInput | ArticleUpsertWithWhereUniqueWithoutSubcategoryInput[]
    createMany?: ArticleCreateManySubcategoryInputEnvelope
    set?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    disconnect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    delete?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    update?: ArticleUpdateWithWhereUniqueWithoutSubcategoryInput | ArticleUpdateWithWhereUniqueWithoutSubcategoryInput[]
    updateMany?: ArticleUpdateManyWithWhereWithoutSubcategoryInput | ArticleUpdateManyWithWhereWithoutSubcategoryInput[]
    deleteMany?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
  }

  export type ArticleUncheckedUpdateManyWithoutSubcategoryNestedInput = {
    create?: XOR<ArticleCreateWithoutSubcategoryInput, ArticleUncheckedCreateWithoutSubcategoryInput> | ArticleCreateWithoutSubcategoryInput[] | ArticleUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutSubcategoryInput | ArticleCreateOrConnectWithoutSubcategoryInput[]
    upsert?: ArticleUpsertWithWhereUniqueWithoutSubcategoryInput | ArticleUpsertWithWhereUniqueWithoutSubcategoryInput[]
    createMany?: ArticleCreateManySubcategoryInputEnvelope
    set?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    disconnect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    delete?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    update?: ArticleUpdateWithWhereUniqueWithoutSubcategoryInput | ArticleUpdateWithWhereUniqueWithoutSubcategoryInput[]
    updateMany?: ArticleUpdateManyWithWhereWithoutSubcategoryInput | ArticleUpdateManyWithWhereWithoutSubcategoryInput[]
    deleteMany?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
  }

  export type ArticleCategoryCreateNestedOneWithoutArticlesInput = {
    create?: XOR<ArticleCategoryCreateWithoutArticlesInput, ArticleCategoryUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: ArticleCategoryCreateOrConnectWithoutArticlesInput
    connect?: ArticleCategoryWhereUniqueInput
  }

  export type ArticleSubCategoryCreateNestedOneWithoutArticlesInput = {
    create?: XOR<ArticleSubCategoryCreateWithoutArticlesInput, ArticleSubCategoryUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: ArticleSubCategoryCreateOrConnectWithoutArticlesInput
    connect?: ArticleSubCategoryWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ArticleCategoryUpdateOneRequiredWithoutArticlesNestedInput = {
    create?: XOR<ArticleCategoryCreateWithoutArticlesInput, ArticleCategoryUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: ArticleCategoryCreateOrConnectWithoutArticlesInput
    upsert?: ArticleCategoryUpsertWithoutArticlesInput
    connect?: ArticleCategoryWhereUniqueInput
    update?: XOR<XOR<ArticleCategoryUpdateToOneWithWhereWithoutArticlesInput, ArticleCategoryUpdateWithoutArticlesInput>, ArticleCategoryUncheckedUpdateWithoutArticlesInput>
  }

  export type ArticleSubCategoryUpdateOneRequiredWithoutArticlesNestedInput = {
    create?: XOR<ArticleSubCategoryCreateWithoutArticlesInput, ArticleSubCategoryUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: ArticleSubCategoryCreateOrConnectWithoutArticlesInput
    upsert?: ArticleSubCategoryUpsertWithoutArticlesInput
    connect?: ArticleSubCategoryWhereUniqueInput
    update?: XOR<XOR<ArticleSubCategoryUpdateToOneWithWhereWithoutArticlesInput, ArticleSubCategoryUpdateWithoutArticlesInput>, ArticleSubCategoryUncheckedUpdateWithoutArticlesInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumbanners_fontColorFieldUpdateOperationsInput = {
    set?: $Enums.banners_fontColor | null
  }

  export type courseintentCreateNestedManyWithoutCourseInput = {
    create?: XOR<courseintentCreateWithoutCourseInput, courseintentUncheckedCreateWithoutCourseInput> | courseintentCreateWithoutCourseInput[] | courseintentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: courseintentCreateOrConnectWithoutCourseInput | courseintentCreateOrConnectWithoutCourseInput[]
    createMany?: courseintentCreateManyCourseInputEnvelope
    connect?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
  }

  export type courseintentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<courseintentCreateWithoutCourseInput, courseintentUncheckedCreateWithoutCourseInput> | courseintentCreateWithoutCourseInput[] | courseintentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: courseintentCreateOrConnectWithoutCourseInput | courseintentCreateOrConnectWithoutCourseInput[]
    createMany?: courseintentCreateManyCourseInputEnvelope
    connect?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type courseintentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<courseintentCreateWithoutCourseInput, courseintentUncheckedCreateWithoutCourseInput> | courseintentCreateWithoutCourseInput[] | courseintentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: courseintentCreateOrConnectWithoutCourseInput | courseintentCreateOrConnectWithoutCourseInput[]
    upsert?: courseintentUpsertWithWhereUniqueWithoutCourseInput | courseintentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: courseintentCreateManyCourseInputEnvelope
    set?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
    disconnect?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
    delete?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
    connect?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
    update?: courseintentUpdateWithWhereUniqueWithoutCourseInput | courseintentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: courseintentUpdateManyWithWhereWithoutCourseInput | courseintentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: courseintentScalarWhereInput | courseintentScalarWhereInput[]
  }

  export type courseintentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<courseintentCreateWithoutCourseInput, courseintentUncheckedCreateWithoutCourseInput> | courseintentCreateWithoutCourseInput[] | courseintentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: courseintentCreateOrConnectWithoutCourseInput | courseintentCreateOrConnectWithoutCourseInput[]
    upsert?: courseintentUpsertWithWhereUniqueWithoutCourseInput | courseintentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: courseintentCreateManyCourseInputEnvelope
    set?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
    disconnect?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
    delete?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
    connect?: courseintentWhereUniqueInput | courseintentWhereUniqueInput[]
    update?: courseintentUpdateWithWhereUniqueWithoutCourseInput | courseintentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: courseintentUpdateManyWithWhereWithoutCourseInput | courseintentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: courseintentScalarWhereInput | courseintentScalarWhereInput[]
  }

  export type courseCreateNestedOneWithoutCourseintentInput = {
    create?: XOR<courseCreateWithoutCourseintentInput, courseUncheckedCreateWithoutCourseintentInput>
    connectOrCreate?: courseCreateOrConnectWithoutCourseintentInput
    connect?: courseWhereUniqueInput
  }

  export type courseUpdateOneRequiredWithoutCourseintentNestedInput = {
    create?: XOR<courseCreateWithoutCourseintentInput, courseUncheckedCreateWithoutCourseintentInput>
    connectOrCreate?: courseCreateOrConnectWithoutCourseintentInput
    upsert?: courseUpsertWithoutCourseintentInput
    connect?: courseWhereUniqueInput
    update?: XOR<XOR<courseUpdateToOneWithWhereWithoutCourseintentInput, courseUpdateWithoutCourseintentInput>, courseUncheckedUpdateWithoutCourseintentInput>
  }

  export type orderitemCreateNestedManyWithoutOrderInput = {
    create?: XOR<orderitemCreateWithoutOrderInput, orderitemUncheckedCreateWithoutOrderInput> | orderitemCreateWithoutOrderInput[] | orderitemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutOrderInput | orderitemCreateOrConnectWithoutOrderInput[]
    createMany?: orderitemCreateManyOrderInputEnvelope
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
  }

  export type orderitemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<orderitemCreateWithoutOrderInput, orderitemUncheckedCreateWithoutOrderInput> | orderitemCreateWithoutOrderInput[] | orderitemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutOrderInput | orderitemCreateOrConnectWithoutOrderInput[]
    createMany?: orderitemCreateManyOrderInputEnvelope
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
  }

  export type Enumorder_shippingMethodFieldUpdateOperationsInput = {
    set?: $Enums.order_shippingMethod
  }

  export type Enumorder_statusFieldUpdateOperationsInput = {
    set?: $Enums.order_status
  }

  export type Enumorder_paymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.order_paymentMethod
  }

  export type orderitemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<orderitemCreateWithoutOrderInput, orderitemUncheckedCreateWithoutOrderInput> | orderitemCreateWithoutOrderInput[] | orderitemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutOrderInput | orderitemCreateOrConnectWithoutOrderInput[]
    upsert?: orderitemUpsertWithWhereUniqueWithoutOrderInput | orderitemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: orderitemCreateManyOrderInputEnvelope
    set?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    disconnect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    delete?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    update?: orderitemUpdateWithWhereUniqueWithoutOrderInput | orderitemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: orderitemUpdateManyWithWhereWithoutOrderInput | orderitemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: orderitemScalarWhereInput | orderitemScalarWhereInput[]
  }

  export type orderitemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<orderitemCreateWithoutOrderInput, orderitemUncheckedCreateWithoutOrderInput> | orderitemCreateWithoutOrderInput[] | orderitemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutOrderInput | orderitemCreateOrConnectWithoutOrderInput[]
    upsert?: orderitemUpsertWithWhereUniqueWithoutOrderInput | orderitemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: orderitemCreateManyOrderInputEnvelope
    set?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    disconnect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    delete?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    update?: orderitemUpdateWithWhereUniqueWithoutOrderInput | orderitemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: orderitemUpdateManyWithWhereWithoutOrderInput | orderitemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: orderitemScalarWhereInput | orderitemScalarWhereInput[]
  }

  export type orderCreateNestedOneWithoutOrderitemInput = {
    create?: XOR<orderCreateWithoutOrderitemInput, orderUncheckedCreateWithoutOrderitemInput>
    connectOrCreate?: orderCreateOrConnectWithoutOrderitemInput
    connect?: orderWhereUniqueInput
  }

  export type productCreateNestedOneWithoutOrderitemInput = {
    create?: XOR<productCreateWithoutOrderitemInput, productUncheckedCreateWithoutOrderitemInput>
    connectOrCreate?: productCreateOrConnectWithoutOrderitemInput
    connect?: productWhereUniqueInput
  }

  export type productvariantCreateNestedOneWithoutOrderitemInput = {
    create?: XOR<productvariantCreateWithoutOrderitemInput, productvariantUncheckedCreateWithoutOrderitemInput>
    connectOrCreate?: productvariantCreateOrConnectWithoutOrderitemInput
    connect?: productvariantWhereUniqueInput
  }

  export type orderUpdateOneRequiredWithoutOrderitemNestedInput = {
    create?: XOR<orderCreateWithoutOrderitemInput, orderUncheckedCreateWithoutOrderitemInput>
    connectOrCreate?: orderCreateOrConnectWithoutOrderitemInput
    upsert?: orderUpsertWithoutOrderitemInput
    connect?: orderWhereUniqueInput
    update?: XOR<XOR<orderUpdateToOneWithWhereWithoutOrderitemInput, orderUpdateWithoutOrderitemInput>, orderUncheckedUpdateWithoutOrderitemInput>
  }

  export type productUpdateOneRequiredWithoutOrderitemNestedInput = {
    create?: XOR<productCreateWithoutOrderitemInput, productUncheckedCreateWithoutOrderitemInput>
    connectOrCreate?: productCreateOrConnectWithoutOrderitemInput
    upsert?: productUpsertWithoutOrderitemInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutOrderitemInput, productUpdateWithoutOrderitemInput>, productUncheckedUpdateWithoutOrderitemInput>
  }

  export type productvariantUpdateOneWithoutOrderitemNestedInput = {
    create?: XOR<productvariantCreateWithoutOrderitemInput, productvariantUncheckedCreateWithoutOrderitemInput>
    connectOrCreate?: productvariantCreateOrConnectWithoutOrderitemInput
    upsert?: productvariantUpsertWithoutOrderitemInput
    disconnect?: productvariantWhereInput | boolean
    delete?: productvariantWhereInput | boolean
    connect?: productvariantWhereUniqueInput
    update?: XOR<XOR<productvariantUpdateToOneWithWhereWithoutOrderitemInput, productvariantUpdateWithoutOrderitemInput>, productvariantUncheckedUpdateWithoutOrderitemInput>
  }

  export type product_categoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<product_categoryCreateWithoutProductsInput, product_categoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_categoryCreateOrConnectWithoutProductsInput
    connect?: product_categoryWhereUniqueInput
  }

  export type product_subcategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<product_subcategoryCreateWithoutProductsInput, product_subcategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_subcategoryCreateOrConnectWithoutProductsInput
    connect?: product_subcategoryWhereUniqueInput
  }

  export type orderitemCreateNestedManyWithoutProductInput = {
    create?: XOR<orderitemCreateWithoutProductInput, orderitemUncheckedCreateWithoutProductInput> | orderitemCreateWithoutProductInput[] | orderitemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutProductInput | orderitemCreateOrConnectWithoutProductInput[]
    createMany?: orderitemCreateManyProductInputEnvelope
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
  }

  export type productvariantCreateNestedManyWithoutProductInput = {
    create?: XOR<productvariantCreateWithoutProductInput, productvariantUncheckedCreateWithoutProductInput> | productvariantCreateWithoutProductInput[] | productvariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productvariantCreateOrConnectWithoutProductInput | productvariantCreateOrConnectWithoutProductInput[]
    createMany?: productvariantCreateManyProductInputEnvelope
    connect?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
  }

  export type orderitemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<orderitemCreateWithoutProductInput, orderitemUncheckedCreateWithoutProductInput> | orderitemCreateWithoutProductInput[] | orderitemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutProductInput | orderitemCreateOrConnectWithoutProductInput[]
    createMany?: orderitemCreateManyProductInputEnvelope
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
  }

  export type productvariantUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<productvariantCreateWithoutProductInput, productvariantUncheckedCreateWithoutProductInput> | productvariantCreateWithoutProductInput[] | productvariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productvariantCreateOrConnectWithoutProductInput | productvariantCreateOrConnectWithoutProductInput[]
    createMany?: productvariantCreateManyProductInputEnvelope
    connect?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
  }

  export type product_categoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<product_categoryCreateWithoutProductsInput, product_categoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_categoryCreateOrConnectWithoutProductsInput
    upsert?: product_categoryUpsertWithoutProductsInput
    connect?: product_categoryWhereUniqueInput
    update?: XOR<XOR<product_categoryUpdateToOneWithWhereWithoutProductsInput, product_categoryUpdateWithoutProductsInput>, product_categoryUncheckedUpdateWithoutProductsInput>
  }

  export type product_subcategoryUpdateOneWithoutProductsNestedInput = {
    create?: XOR<product_subcategoryCreateWithoutProductsInput, product_subcategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_subcategoryCreateOrConnectWithoutProductsInput
    upsert?: product_subcategoryUpsertWithoutProductsInput
    disconnect?: product_subcategoryWhereInput | boolean
    delete?: product_subcategoryWhereInput | boolean
    connect?: product_subcategoryWhereUniqueInput
    update?: XOR<XOR<product_subcategoryUpdateToOneWithWhereWithoutProductsInput, product_subcategoryUpdateWithoutProductsInput>, product_subcategoryUncheckedUpdateWithoutProductsInput>
  }

  export type orderitemUpdateManyWithoutProductNestedInput = {
    create?: XOR<orderitemCreateWithoutProductInput, orderitemUncheckedCreateWithoutProductInput> | orderitemCreateWithoutProductInput[] | orderitemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutProductInput | orderitemCreateOrConnectWithoutProductInput[]
    upsert?: orderitemUpsertWithWhereUniqueWithoutProductInput | orderitemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: orderitemCreateManyProductInputEnvelope
    set?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    disconnect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    delete?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    update?: orderitemUpdateWithWhereUniqueWithoutProductInput | orderitemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: orderitemUpdateManyWithWhereWithoutProductInput | orderitemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: orderitemScalarWhereInput | orderitemScalarWhereInput[]
  }

  export type productvariantUpdateManyWithoutProductNestedInput = {
    create?: XOR<productvariantCreateWithoutProductInput, productvariantUncheckedCreateWithoutProductInput> | productvariantCreateWithoutProductInput[] | productvariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productvariantCreateOrConnectWithoutProductInput | productvariantCreateOrConnectWithoutProductInput[]
    upsert?: productvariantUpsertWithWhereUniqueWithoutProductInput | productvariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productvariantCreateManyProductInputEnvelope
    set?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
    disconnect?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
    delete?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
    connect?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
    update?: productvariantUpdateWithWhereUniqueWithoutProductInput | productvariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productvariantUpdateManyWithWhereWithoutProductInput | productvariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productvariantScalarWhereInput | productvariantScalarWhereInput[]
  }

  export type orderitemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<orderitemCreateWithoutProductInput, orderitemUncheckedCreateWithoutProductInput> | orderitemCreateWithoutProductInput[] | orderitemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutProductInput | orderitemCreateOrConnectWithoutProductInput[]
    upsert?: orderitemUpsertWithWhereUniqueWithoutProductInput | orderitemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: orderitemCreateManyProductInputEnvelope
    set?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    disconnect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    delete?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    update?: orderitemUpdateWithWhereUniqueWithoutProductInput | orderitemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: orderitemUpdateManyWithWhereWithoutProductInput | orderitemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: orderitemScalarWhereInput | orderitemScalarWhereInput[]
  }

  export type productvariantUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<productvariantCreateWithoutProductInput, productvariantUncheckedCreateWithoutProductInput> | productvariantCreateWithoutProductInput[] | productvariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productvariantCreateOrConnectWithoutProductInput | productvariantCreateOrConnectWithoutProductInput[]
    upsert?: productvariantUpsertWithWhereUniqueWithoutProductInput | productvariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productvariantCreateManyProductInputEnvelope
    set?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
    disconnect?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
    delete?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
    connect?: productvariantWhereUniqueInput | productvariantWhereUniqueInput[]
    update?: productvariantUpdateWithWhereUniqueWithoutProductInput | productvariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productvariantUpdateManyWithWhereWithoutProductInput | productvariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productvariantScalarWhereInput | productvariantScalarWhereInput[]
  }

  export type productCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput> | productCreateWithoutCategoryInput[] | productUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutCategoryInput | productCreateOrConnectWithoutCategoryInput[]
    createMany?: productCreateManyCategoryInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type product_subcategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<product_subcategoryCreateWithoutCategoryInput, product_subcategoryUncheckedCreateWithoutCategoryInput> | product_subcategoryCreateWithoutCategoryInput[] | product_subcategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: product_subcategoryCreateOrConnectWithoutCategoryInput | product_subcategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: product_subcategoryCreateManyCategoryInputEnvelope
    connect?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
  }

  export type productUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput> | productCreateWithoutCategoryInput[] | productUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutCategoryInput | productCreateOrConnectWithoutCategoryInput[]
    createMany?: productCreateManyCategoryInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type product_subcategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<product_subcategoryCreateWithoutCategoryInput, product_subcategoryUncheckedCreateWithoutCategoryInput> | product_subcategoryCreateWithoutCategoryInput[] | product_subcategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: product_subcategoryCreateOrConnectWithoutCategoryInput | product_subcategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: product_subcategoryCreateManyCategoryInputEnvelope
    connect?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
  }

  export type productUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput> | productCreateWithoutCategoryInput[] | productUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutCategoryInput | productCreateOrConnectWithoutCategoryInput[]
    upsert?: productUpsertWithWhereUniqueWithoutCategoryInput | productUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productCreateManyCategoryInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutCategoryInput | productUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productUpdateManyWithWhereWithoutCategoryInput | productUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type product_subcategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<product_subcategoryCreateWithoutCategoryInput, product_subcategoryUncheckedCreateWithoutCategoryInput> | product_subcategoryCreateWithoutCategoryInput[] | product_subcategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: product_subcategoryCreateOrConnectWithoutCategoryInput | product_subcategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: product_subcategoryUpsertWithWhereUniqueWithoutCategoryInput | product_subcategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: product_subcategoryCreateManyCategoryInputEnvelope
    set?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
    disconnect?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
    delete?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
    connect?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
    update?: product_subcategoryUpdateWithWhereUniqueWithoutCategoryInput | product_subcategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: product_subcategoryUpdateManyWithWhereWithoutCategoryInput | product_subcategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: product_subcategoryScalarWhereInput | product_subcategoryScalarWhereInput[]
  }

  export type productUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput> | productCreateWithoutCategoryInput[] | productUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutCategoryInput | productCreateOrConnectWithoutCategoryInput[]
    upsert?: productUpsertWithWhereUniqueWithoutCategoryInput | productUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productCreateManyCategoryInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutCategoryInput | productUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productUpdateManyWithWhereWithoutCategoryInput | productUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type product_subcategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<product_subcategoryCreateWithoutCategoryInput, product_subcategoryUncheckedCreateWithoutCategoryInput> | product_subcategoryCreateWithoutCategoryInput[] | product_subcategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: product_subcategoryCreateOrConnectWithoutCategoryInput | product_subcategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: product_subcategoryUpsertWithWhereUniqueWithoutCategoryInput | product_subcategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: product_subcategoryCreateManyCategoryInputEnvelope
    set?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
    disconnect?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
    delete?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
    connect?: product_subcategoryWhereUniqueInput | product_subcategoryWhereUniqueInput[]
    update?: product_subcategoryUpdateWithWhereUniqueWithoutCategoryInput | product_subcategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: product_subcategoryUpdateManyWithWhereWithoutCategoryInput | product_subcategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: product_subcategoryScalarWhereInput | product_subcategoryScalarWhereInput[]
  }

  export type product_categoryCreateNestedOneWithoutSubcategoriesInput = {
    create?: XOR<product_categoryCreateWithoutSubcategoriesInput, product_categoryUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: product_categoryCreateOrConnectWithoutSubcategoriesInput
    connect?: product_categoryWhereUniqueInput
  }

  export type productCreateNestedManyWithoutSubcategoryInput = {
    create?: XOR<productCreateWithoutSubcategoryInput, productUncheckedCreateWithoutSubcategoryInput> | productCreateWithoutSubcategoryInput[] | productUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutSubcategoryInput | productCreateOrConnectWithoutSubcategoryInput[]
    createMany?: productCreateManySubcategoryInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type productUncheckedCreateNestedManyWithoutSubcategoryInput = {
    create?: XOR<productCreateWithoutSubcategoryInput, productUncheckedCreateWithoutSubcategoryInput> | productCreateWithoutSubcategoryInput[] | productUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutSubcategoryInput | productCreateOrConnectWithoutSubcategoryInput[]
    createMany?: productCreateManySubcategoryInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type product_categoryUpdateOneRequiredWithoutSubcategoriesNestedInput = {
    create?: XOR<product_categoryCreateWithoutSubcategoriesInput, product_categoryUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: product_categoryCreateOrConnectWithoutSubcategoriesInput
    upsert?: product_categoryUpsertWithoutSubcategoriesInput
    connect?: product_categoryWhereUniqueInput
    update?: XOR<XOR<product_categoryUpdateToOneWithWhereWithoutSubcategoriesInput, product_categoryUpdateWithoutSubcategoriesInput>, product_categoryUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type productUpdateManyWithoutSubcategoryNestedInput = {
    create?: XOR<productCreateWithoutSubcategoryInput, productUncheckedCreateWithoutSubcategoryInput> | productCreateWithoutSubcategoryInput[] | productUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutSubcategoryInput | productCreateOrConnectWithoutSubcategoryInput[]
    upsert?: productUpsertWithWhereUniqueWithoutSubcategoryInput | productUpsertWithWhereUniqueWithoutSubcategoryInput[]
    createMany?: productCreateManySubcategoryInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutSubcategoryInput | productUpdateWithWhereUniqueWithoutSubcategoryInput[]
    updateMany?: productUpdateManyWithWhereWithoutSubcategoryInput | productUpdateManyWithWhereWithoutSubcategoryInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type productUncheckedUpdateManyWithoutSubcategoryNestedInput = {
    create?: XOR<productCreateWithoutSubcategoryInput, productUncheckedCreateWithoutSubcategoryInput> | productCreateWithoutSubcategoryInput[] | productUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutSubcategoryInput | productCreateOrConnectWithoutSubcategoryInput[]
    upsert?: productUpsertWithWhereUniqueWithoutSubcategoryInput | productUpsertWithWhereUniqueWithoutSubcategoryInput[]
    createMany?: productCreateManySubcategoryInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutSubcategoryInput | productUpdateWithWhereUniqueWithoutSubcategoryInput[]
    updateMany?: productUpdateManyWithWhereWithoutSubcategoryInput | productUpdateManyWithWhereWithoutSubcategoryInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type orderitemCreateNestedManyWithoutProductvariantInput = {
    create?: XOR<orderitemCreateWithoutProductvariantInput, orderitemUncheckedCreateWithoutProductvariantInput> | orderitemCreateWithoutProductvariantInput[] | orderitemUncheckedCreateWithoutProductvariantInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutProductvariantInput | orderitemCreateOrConnectWithoutProductvariantInput[]
    createMany?: orderitemCreateManyProductvariantInputEnvelope
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
  }

  export type productCreateNestedOneWithoutProductvariantInput = {
    create?: XOR<productCreateWithoutProductvariantInput, productUncheckedCreateWithoutProductvariantInput>
    connectOrCreate?: productCreateOrConnectWithoutProductvariantInput
    connect?: productWhereUniqueInput
  }

  export type orderitemUncheckedCreateNestedManyWithoutProductvariantInput = {
    create?: XOR<orderitemCreateWithoutProductvariantInput, orderitemUncheckedCreateWithoutProductvariantInput> | orderitemCreateWithoutProductvariantInput[] | orderitemUncheckedCreateWithoutProductvariantInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutProductvariantInput | orderitemCreateOrConnectWithoutProductvariantInput[]
    createMany?: orderitemCreateManyProductvariantInputEnvelope
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
  }

  export type orderitemUpdateManyWithoutProductvariantNestedInput = {
    create?: XOR<orderitemCreateWithoutProductvariantInput, orderitemUncheckedCreateWithoutProductvariantInput> | orderitemCreateWithoutProductvariantInput[] | orderitemUncheckedCreateWithoutProductvariantInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutProductvariantInput | orderitemCreateOrConnectWithoutProductvariantInput[]
    upsert?: orderitemUpsertWithWhereUniqueWithoutProductvariantInput | orderitemUpsertWithWhereUniqueWithoutProductvariantInput[]
    createMany?: orderitemCreateManyProductvariantInputEnvelope
    set?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    disconnect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    delete?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    update?: orderitemUpdateWithWhereUniqueWithoutProductvariantInput | orderitemUpdateWithWhereUniqueWithoutProductvariantInput[]
    updateMany?: orderitemUpdateManyWithWhereWithoutProductvariantInput | orderitemUpdateManyWithWhereWithoutProductvariantInput[]
    deleteMany?: orderitemScalarWhereInput | orderitemScalarWhereInput[]
  }

  export type productUpdateOneRequiredWithoutProductvariantNestedInput = {
    create?: XOR<productCreateWithoutProductvariantInput, productUncheckedCreateWithoutProductvariantInput>
    connectOrCreate?: productCreateOrConnectWithoutProductvariantInput
    upsert?: productUpsertWithoutProductvariantInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutProductvariantInput, productUpdateWithoutProductvariantInput>, productUncheckedUpdateWithoutProductvariantInput>
  }

  export type orderitemUncheckedUpdateManyWithoutProductvariantNestedInput = {
    create?: XOR<orderitemCreateWithoutProductvariantInput, orderitemUncheckedCreateWithoutProductvariantInput> | orderitemCreateWithoutProductvariantInput[] | orderitemUncheckedCreateWithoutProductvariantInput[]
    connectOrCreate?: orderitemCreateOrConnectWithoutProductvariantInput | orderitemCreateOrConnectWithoutProductvariantInput[]
    upsert?: orderitemUpsertWithWhereUniqueWithoutProductvariantInput | orderitemUpsertWithWhereUniqueWithoutProductvariantInput[]
    createMany?: orderitemCreateManyProductvariantInputEnvelope
    set?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    disconnect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    delete?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    connect?: orderitemWhereUniqueInput | orderitemWhereUniqueInput[]
    update?: orderitemUpdateWithWhereUniqueWithoutProductvariantInput | orderitemUpdateWithWhereUniqueWithoutProductvariantInput[]
    updateMany?: orderitemUpdateManyWithWhereWithoutProductvariantInput | orderitemUpdateManyWithWhereWithoutProductvariantInput[]
    deleteMany?: orderitemScalarWhereInput | orderitemScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumbanners_fontColorNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.banners_fontColor | Enumbanners_fontColorFieldRefInput<$PrismaModel> | null
    in?: $Enums.banners_fontColor[] | null
    notIn?: $Enums.banners_fontColor[] | null
    not?: NestedEnumbanners_fontColorNullableFilter<$PrismaModel> | $Enums.banners_fontColor | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumbanners_fontColorNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.banners_fontColor | Enumbanners_fontColorFieldRefInput<$PrismaModel> | null
    in?: $Enums.banners_fontColor[] | null
    notIn?: $Enums.banners_fontColor[] | null
    not?: NestedEnumbanners_fontColorNullableWithAggregatesFilter<$PrismaModel> | $Enums.banners_fontColor | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumbanners_fontColorNullableFilter<$PrismaModel>
    _max?: NestedEnumbanners_fontColorNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumorder_shippingMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.order_shippingMethod | Enumorder_shippingMethodFieldRefInput<$PrismaModel>
    in?: $Enums.order_shippingMethod[]
    notIn?: $Enums.order_shippingMethod[]
    not?: NestedEnumorder_shippingMethodFilter<$PrismaModel> | $Enums.order_shippingMethod
  }

  export type NestedEnumorder_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.order_status | Enumorder_statusFieldRefInput<$PrismaModel>
    in?: $Enums.order_status[]
    notIn?: $Enums.order_status[]
    not?: NestedEnumorder_statusFilter<$PrismaModel> | $Enums.order_status
  }

  export type NestedEnumorder_paymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.order_paymentMethod | Enumorder_paymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.order_paymentMethod[]
    notIn?: $Enums.order_paymentMethod[]
    not?: NestedEnumorder_paymentMethodFilter<$PrismaModel> | $Enums.order_paymentMethod
  }

  export type NestedEnumorder_shippingMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.order_shippingMethod | Enumorder_shippingMethodFieldRefInput<$PrismaModel>
    in?: $Enums.order_shippingMethod[]
    notIn?: $Enums.order_shippingMethod[]
    not?: NestedEnumorder_shippingMethodWithAggregatesFilter<$PrismaModel> | $Enums.order_shippingMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumorder_shippingMethodFilter<$PrismaModel>
    _max?: NestedEnumorder_shippingMethodFilter<$PrismaModel>
  }

  export type NestedEnumorder_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.order_status | Enumorder_statusFieldRefInput<$PrismaModel>
    in?: $Enums.order_status[]
    notIn?: $Enums.order_status[]
    not?: NestedEnumorder_statusWithAggregatesFilter<$PrismaModel> | $Enums.order_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumorder_statusFilter<$PrismaModel>
    _max?: NestedEnumorder_statusFilter<$PrismaModel>
  }

  export type NestedEnumorder_paymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.order_paymentMethod | Enumorder_paymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.order_paymentMethod[]
    notIn?: $Enums.order_paymentMethod[]
    not?: NestedEnumorder_paymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.order_paymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumorder_paymentMethodFilter<$PrismaModel>
    _max?: NestedEnumorder_paymentMethodFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ArticleSubCategoryCreateWithoutCategoryInput = {
    name: string
    slug: string
    orderIndex: number
    articles?: ArticleCreateNestedManyWithoutSubcategoryInput
  }

  export type ArticleSubCategoryUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    slug: string
    orderIndex: number
    articles?: ArticleUncheckedCreateNestedManyWithoutSubcategoryInput
  }

  export type ArticleSubCategoryCreateOrConnectWithoutCategoryInput = {
    where: ArticleSubCategoryWhereUniqueInput
    create: XOR<ArticleSubCategoryCreateWithoutCategoryInput, ArticleSubCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type ArticleSubCategoryCreateManyCategoryInputEnvelope = {
    data: ArticleSubCategoryCreateManyCategoryInput | ArticleSubCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ArticleCreateWithoutCategoryInput = {
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl?: string | null
    publishedAt?: Date | string
    subcategory: ArticleSubCategoryCreateNestedOneWithoutArticlesInput
  }

  export type ArticleUncheckedCreateWithoutCategoryInput = {
    id?: number
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl?: string | null
    publishedAt?: Date | string
    subCategoryId: number
  }

  export type ArticleCreateOrConnectWithoutCategoryInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput>
  }

  export type ArticleCreateManyCategoryInputEnvelope = {
    data: ArticleCreateManyCategoryInput | ArticleCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ArticleSubCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ArticleSubCategoryWhereUniqueInput
    update: XOR<ArticleSubCategoryUpdateWithoutCategoryInput, ArticleSubCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<ArticleSubCategoryCreateWithoutCategoryInput, ArticleSubCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type ArticleSubCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ArticleSubCategoryWhereUniqueInput
    data: XOR<ArticleSubCategoryUpdateWithoutCategoryInput, ArticleSubCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type ArticleSubCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: ArticleSubCategoryScalarWhereInput
    data: XOR<ArticleSubCategoryUpdateManyMutationInput, ArticleSubCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ArticleSubCategoryScalarWhereInput = {
    AND?: ArticleSubCategoryScalarWhereInput | ArticleSubCategoryScalarWhereInput[]
    OR?: ArticleSubCategoryScalarWhereInput[]
    NOT?: ArticleSubCategoryScalarWhereInput | ArticleSubCategoryScalarWhereInput[]
    id?: IntFilter<"ArticleSubCategory"> | number
    name?: StringFilter<"ArticleSubCategory"> | string
    slug?: StringFilter<"ArticleSubCategory"> | string
    orderIndex?: IntFilter<"ArticleSubCategory"> | number
    categoryId?: IntFilter<"ArticleSubCategory"> | number
  }

  export type ArticleUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ArticleWhereUniqueInput
    update: XOR<ArticleUpdateWithoutCategoryInput, ArticleUncheckedUpdateWithoutCategoryInput>
    create: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput>
  }

  export type ArticleUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ArticleWhereUniqueInput
    data: XOR<ArticleUpdateWithoutCategoryInput, ArticleUncheckedUpdateWithoutCategoryInput>
  }

  export type ArticleUpdateManyWithWhereWithoutCategoryInput = {
    where: ArticleScalarWhereInput
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ArticleScalarWhereInput = {
    AND?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
    OR?: ArticleScalarWhereInput[]
    NOT?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
    id?: IntFilter<"Article"> | number
    title?: StringFilter<"Article"> | string
    slug?: StringFilter<"Article"> | string
    excerpt?: StringFilter<"Article"> | string
    content?: StringFilter<"Article"> | string
    coverImageUrl?: StringNullableFilter<"Article"> | string | null
    publishedAt?: DateTimeFilter<"Article"> | Date | string
    categoryId?: IntFilter<"Article"> | number
    subCategoryId?: IntFilter<"Article"> | number
  }

  export type ArticleCategoryCreateWithoutSubcategoriesInput = {
    name: string
    slug: string
    orderIndex: number
    articles?: ArticleCreateNestedManyWithoutCategoryInput
  }

  export type ArticleCategoryUncheckedCreateWithoutSubcategoriesInput = {
    id?: number
    name: string
    slug: string
    orderIndex: number
    articles?: ArticleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ArticleCategoryCreateOrConnectWithoutSubcategoriesInput = {
    where: ArticleCategoryWhereUniqueInput
    create: XOR<ArticleCategoryCreateWithoutSubcategoriesInput, ArticleCategoryUncheckedCreateWithoutSubcategoriesInput>
  }

  export type ArticleCreateWithoutSubcategoryInput = {
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl?: string | null
    publishedAt?: Date | string
    category: ArticleCategoryCreateNestedOneWithoutArticlesInput
  }

  export type ArticleUncheckedCreateWithoutSubcategoryInput = {
    id?: number
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl?: string | null
    publishedAt?: Date | string
    categoryId: number
  }

  export type ArticleCreateOrConnectWithoutSubcategoryInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutSubcategoryInput, ArticleUncheckedCreateWithoutSubcategoryInput>
  }

  export type ArticleCreateManySubcategoryInputEnvelope = {
    data: ArticleCreateManySubcategoryInput | ArticleCreateManySubcategoryInput[]
    skipDuplicates?: boolean
  }

  export type ArticleCategoryUpsertWithoutSubcategoriesInput = {
    update: XOR<ArticleCategoryUpdateWithoutSubcategoriesInput, ArticleCategoryUncheckedUpdateWithoutSubcategoriesInput>
    create: XOR<ArticleCategoryCreateWithoutSubcategoriesInput, ArticleCategoryUncheckedCreateWithoutSubcategoriesInput>
    where?: ArticleCategoryWhereInput
  }

  export type ArticleCategoryUpdateToOneWithWhereWithoutSubcategoriesInput = {
    where?: ArticleCategoryWhereInput
    data: XOR<ArticleCategoryUpdateWithoutSubcategoriesInput, ArticleCategoryUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type ArticleCategoryUpdateWithoutSubcategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    articles?: ArticleUpdateManyWithoutCategoryNestedInput
  }

  export type ArticleCategoryUncheckedUpdateWithoutSubcategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    articles?: ArticleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ArticleUpsertWithWhereUniqueWithoutSubcategoryInput = {
    where: ArticleWhereUniqueInput
    update: XOR<ArticleUpdateWithoutSubcategoryInput, ArticleUncheckedUpdateWithoutSubcategoryInput>
    create: XOR<ArticleCreateWithoutSubcategoryInput, ArticleUncheckedCreateWithoutSubcategoryInput>
  }

  export type ArticleUpdateWithWhereUniqueWithoutSubcategoryInput = {
    where: ArticleWhereUniqueInput
    data: XOR<ArticleUpdateWithoutSubcategoryInput, ArticleUncheckedUpdateWithoutSubcategoryInput>
  }

  export type ArticleUpdateManyWithWhereWithoutSubcategoryInput = {
    where: ArticleScalarWhereInput
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyWithoutSubcategoryInput>
  }

  export type ArticleCategoryCreateWithoutArticlesInput = {
    name: string
    slug: string
    orderIndex: number
    subcategories?: ArticleSubCategoryCreateNestedManyWithoutCategoryInput
  }

  export type ArticleCategoryUncheckedCreateWithoutArticlesInput = {
    id?: number
    name: string
    slug: string
    orderIndex: number
    subcategories?: ArticleSubCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ArticleCategoryCreateOrConnectWithoutArticlesInput = {
    where: ArticleCategoryWhereUniqueInput
    create: XOR<ArticleCategoryCreateWithoutArticlesInput, ArticleCategoryUncheckedCreateWithoutArticlesInput>
  }

  export type ArticleSubCategoryCreateWithoutArticlesInput = {
    name: string
    slug: string
    orderIndex: number
    category: ArticleCategoryCreateNestedOneWithoutSubcategoriesInput
  }

  export type ArticleSubCategoryUncheckedCreateWithoutArticlesInput = {
    id?: number
    name: string
    slug: string
    orderIndex: number
    categoryId: number
  }

  export type ArticleSubCategoryCreateOrConnectWithoutArticlesInput = {
    where: ArticleSubCategoryWhereUniqueInput
    create: XOR<ArticleSubCategoryCreateWithoutArticlesInput, ArticleSubCategoryUncheckedCreateWithoutArticlesInput>
  }

  export type ArticleCategoryUpsertWithoutArticlesInput = {
    update: XOR<ArticleCategoryUpdateWithoutArticlesInput, ArticleCategoryUncheckedUpdateWithoutArticlesInput>
    create: XOR<ArticleCategoryCreateWithoutArticlesInput, ArticleCategoryUncheckedCreateWithoutArticlesInput>
    where?: ArticleCategoryWhereInput
  }

  export type ArticleCategoryUpdateToOneWithWhereWithoutArticlesInput = {
    where?: ArticleCategoryWhereInput
    data: XOR<ArticleCategoryUpdateWithoutArticlesInput, ArticleCategoryUncheckedUpdateWithoutArticlesInput>
  }

  export type ArticleCategoryUpdateWithoutArticlesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    subcategories?: ArticleSubCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type ArticleCategoryUncheckedUpdateWithoutArticlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    subcategories?: ArticleSubCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ArticleSubCategoryUpsertWithoutArticlesInput = {
    update: XOR<ArticleSubCategoryUpdateWithoutArticlesInput, ArticleSubCategoryUncheckedUpdateWithoutArticlesInput>
    create: XOR<ArticleSubCategoryCreateWithoutArticlesInput, ArticleSubCategoryUncheckedCreateWithoutArticlesInput>
    where?: ArticleSubCategoryWhereInput
  }

  export type ArticleSubCategoryUpdateToOneWithWhereWithoutArticlesInput = {
    where?: ArticleSubCategoryWhereInput
    data: XOR<ArticleSubCategoryUpdateWithoutArticlesInput, ArticleSubCategoryUncheckedUpdateWithoutArticlesInput>
  }

  export type ArticleSubCategoryUpdateWithoutArticlesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    category?: ArticleCategoryUpdateOneRequiredWithoutSubcategoriesNestedInput
  }

  export type ArticleSubCategoryUncheckedUpdateWithoutArticlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type courseintentCreateWithoutCourseInput = {
    name: string
    email: string
    phone: string
    message?: string | null
    createdAt?: Date | string
  }

  export type courseintentUncheckedCreateWithoutCourseInput = {
    id?: number
    name: string
    email: string
    phone: string
    message?: string | null
    createdAt?: Date | string
  }

  export type courseintentCreateOrConnectWithoutCourseInput = {
    where: courseintentWhereUniqueInput
    create: XOR<courseintentCreateWithoutCourseInput, courseintentUncheckedCreateWithoutCourseInput>
  }

  export type courseintentCreateManyCourseInputEnvelope = {
    data: courseintentCreateManyCourseInput | courseintentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type courseintentUpsertWithWhereUniqueWithoutCourseInput = {
    where: courseintentWhereUniqueInput
    update: XOR<courseintentUpdateWithoutCourseInput, courseintentUncheckedUpdateWithoutCourseInput>
    create: XOR<courseintentCreateWithoutCourseInput, courseintentUncheckedCreateWithoutCourseInput>
  }

  export type courseintentUpdateWithWhereUniqueWithoutCourseInput = {
    where: courseintentWhereUniqueInput
    data: XOR<courseintentUpdateWithoutCourseInput, courseintentUncheckedUpdateWithoutCourseInput>
  }

  export type courseintentUpdateManyWithWhereWithoutCourseInput = {
    where: courseintentScalarWhereInput
    data: XOR<courseintentUpdateManyMutationInput, courseintentUncheckedUpdateManyWithoutCourseInput>
  }

  export type courseintentScalarWhereInput = {
    AND?: courseintentScalarWhereInput | courseintentScalarWhereInput[]
    OR?: courseintentScalarWhereInput[]
    NOT?: courseintentScalarWhereInput | courseintentScalarWhereInput[]
    id?: IntFilter<"courseintent"> | number
    courseId?: IntFilter<"courseintent"> | number
    name?: StringFilter<"courseintent"> | string
    email?: StringFilter<"courseintent"> | string
    phone?: StringFilter<"courseintent"> | string
    message?: StringNullableFilter<"courseintent"> | string | null
    createdAt?: DateTimeFilter<"courseintent"> | Date | string
  }

  export type courseCreateWithoutCourseintentInput = {
    title: string
    slug: string
    coverImage?: string | null
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    capacity?: number
    status?: boolean
    startAt?: Date | string | null
    durationMinutes?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type courseUncheckedCreateWithoutCourseintentInput = {
    id?: number
    title: string
    slug: string
    coverImage?: string | null
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    capacity?: number
    status?: boolean
    startAt?: Date | string | null
    durationMinutes?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type courseCreateOrConnectWithoutCourseintentInput = {
    where: courseWhereUniqueInput
    create: XOR<courseCreateWithoutCourseintentInput, courseUncheckedCreateWithoutCourseintentInput>
  }

  export type courseUpsertWithoutCourseintentInput = {
    update: XOR<courseUpdateWithoutCourseintentInput, courseUncheckedUpdateWithoutCourseintentInput>
    create: XOR<courseCreateWithoutCourseintentInput, courseUncheckedCreateWithoutCourseintentInput>
    where?: courseWhereInput
  }

  export type courseUpdateToOneWithWhereWithoutCourseintentInput = {
    where?: courseWhereInput
    data: XOR<courseUpdateWithoutCourseintentInput, courseUncheckedUpdateWithoutCourseintentInput>
  }

  export type courseUpdateWithoutCourseintentInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    capacity?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type courseUncheckedUpdateWithoutCourseintentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    capacity?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderitemCreateWithoutOrderInput = {
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
    product: productCreateNestedOneWithoutOrderitemInput
    productvariant?: productvariantCreateNestedOneWithoutOrderitemInput
  }

  export type orderitemUncheckedCreateWithoutOrderInput = {
    id?: number
    productId: number
    variantId?: number | null
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemCreateOrConnectWithoutOrderInput = {
    where: orderitemWhereUniqueInput
    create: XOR<orderitemCreateWithoutOrderInput, orderitemUncheckedCreateWithoutOrderInput>
  }

  export type orderitemCreateManyOrderInputEnvelope = {
    data: orderitemCreateManyOrderInput | orderitemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type orderitemUpsertWithWhereUniqueWithoutOrderInput = {
    where: orderitemWhereUniqueInput
    update: XOR<orderitemUpdateWithoutOrderInput, orderitemUncheckedUpdateWithoutOrderInput>
    create: XOR<orderitemCreateWithoutOrderInput, orderitemUncheckedCreateWithoutOrderInput>
  }

  export type orderitemUpdateWithWhereUniqueWithoutOrderInput = {
    where: orderitemWhereUniqueInput
    data: XOR<orderitemUpdateWithoutOrderInput, orderitemUncheckedUpdateWithoutOrderInput>
  }

  export type orderitemUpdateManyWithWhereWithoutOrderInput = {
    where: orderitemScalarWhereInput
    data: XOR<orderitemUpdateManyMutationInput, orderitemUncheckedUpdateManyWithoutOrderInput>
  }

  export type orderitemScalarWhereInput = {
    AND?: orderitemScalarWhereInput | orderitemScalarWhereInput[]
    OR?: orderitemScalarWhereInput[]
    NOT?: orderitemScalarWhereInput | orderitemScalarWhereInput[]
    id?: IntFilter<"orderitem"> | number
    orderId?: IntFilter<"orderitem"> | number
    productId?: IntFilter<"orderitem"> | number
    variantId?: IntNullableFilter<"orderitem"> | number | null
    qty?: IntFilter<"orderitem"> | number
    unitPrice?: DecimalFilter<"orderitem"> | Decimal | DecimalJsLike | number | string
    addOnJson?: JsonNullableFilter<"orderitem">
  }

  export type orderCreateWithoutOrderitemInput = {
    orderNo: string
    buyerName: string
    email: string
    phone: string
    address: string
    shippingMethod: $Enums.order_shippingMethod
    subtotal: Decimal | DecimalJsLike | number | string
    shippingFee: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.order_status
    paymentMethod: $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderUncheckedCreateWithoutOrderitemInput = {
    id?: number
    orderNo: string
    buyerName: string
    email: string
    phone: string
    address: string
    shippingMethod: $Enums.order_shippingMethod
    subtotal: Decimal | DecimalJsLike | number | string
    shippingFee: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.order_status
    paymentMethod: $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderCreateOrConnectWithoutOrderitemInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutOrderitemInput, orderUncheckedCreateWithoutOrderitemInput>
  }

  export type productCreateWithoutOrderitemInput = {
    name: string
    slug: string
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    category: product_categoryCreateNestedOneWithoutProductsInput
    subcategory?: product_subcategoryCreateNestedOneWithoutProductsInput
    productvariant?: productvariantCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutOrderitemInput = {
    id?: number
    name: string
    slug: string
    categoryId: number
    subcategoryId?: number | null
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    productvariant?: productvariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutOrderitemInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutOrderitemInput, productUncheckedCreateWithoutOrderitemInput>
  }

  export type productvariantCreateWithoutOrderitemInput = {
    variantName: string
    price: Decimal | DecimalJsLike | number | string
    isDefault?: boolean
    product: productCreateNestedOneWithoutProductvariantInput
  }

  export type productvariantUncheckedCreateWithoutOrderitemInput = {
    id?: number
    productId: number
    variantName: string
    price: Decimal | DecimalJsLike | number | string
    isDefault?: boolean
  }

  export type productvariantCreateOrConnectWithoutOrderitemInput = {
    where: productvariantWhereUniqueInput
    create: XOR<productvariantCreateWithoutOrderitemInput, productvariantUncheckedCreateWithoutOrderitemInput>
  }

  export type orderUpsertWithoutOrderitemInput = {
    update: XOR<orderUpdateWithoutOrderitemInput, orderUncheckedUpdateWithoutOrderitemInput>
    create: XOR<orderCreateWithoutOrderitemInput, orderUncheckedCreateWithoutOrderitemInput>
    where?: orderWhereInput
  }

  export type orderUpdateToOneWithWhereWithoutOrderitemInput = {
    where?: orderWhereInput
    data: XOR<orderUpdateWithoutOrderitemInput, orderUncheckedUpdateWithoutOrderitemInput>
  }

  export type orderUpdateWithoutOrderitemInput = {
    orderNo?: StringFieldUpdateOperationsInput | string
    buyerName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    shippingMethod?: Enumorder_shippingMethodFieldUpdateOperationsInput | $Enums.order_shippingMethod
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingFee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: Enumorder_statusFieldUpdateOperationsInput | $Enums.order_status
    paymentMethod?: Enumorder_paymentMethodFieldUpdateOperationsInput | $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderUncheckedUpdateWithoutOrderitemInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNo?: StringFieldUpdateOperationsInput | string
    buyerName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    shippingMethod?: Enumorder_shippingMethodFieldUpdateOperationsInput | $Enums.order_shippingMethod
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingFee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: Enumorder_statusFieldUpdateOperationsInput | $Enums.order_status
    paymentMethod?: Enumorder_paymentMethodFieldUpdateOperationsInput | $Enums.order_paymentMethod
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productUpsertWithoutOrderitemInput = {
    update: XOR<productUpdateWithoutOrderitemInput, productUncheckedUpdateWithoutOrderitemInput>
    create: XOR<productCreateWithoutOrderitemInput, productUncheckedCreateWithoutOrderitemInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutOrderitemInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutOrderitemInput, productUncheckedUpdateWithoutOrderitemInput>
  }

  export type productUpdateWithoutOrderitemInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    category?: product_categoryUpdateOneRequiredWithoutProductsNestedInput
    subcategory?: product_subcategoryUpdateOneWithoutProductsNestedInput
    productvariant?: productvariantUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutOrderitemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    productvariant?: productvariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productvariantUpsertWithoutOrderitemInput = {
    update: XOR<productvariantUpdateWithoutOrderitemInput, productvariantUncheckedUpdateWithoutOrderitemInput>
    create: XOR<productvariantCreateWithoutOrderitemInput, productvariantUncheckedCreateWithoutOrderitemInput>
    where?: productvariantWhereInput
  }

  export type productvariantUpdateToOneWithWhereWithoutOrderitemInput = {
    where?: productvariantWhereInput
    data: XOR<productvariantUpdateWithoutOrderitemInput, productvariantUncheckedUpdateWithoutOrderitemInput>
  }

  export type productvariantUpdateWithoutOrderitemInput = {
    variantName?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    product?: productUpdateOneRequiredWithoutProductvariantNestedInput
  }

  export type productvariantUncheckedUpdateWithoutOrderitemInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantName?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type product_categoryCreateWithoutProductsInput = {
    name: string
    slug: string
    description?: string | null
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subcategories?: product_subcategoryCreateNestedManyWithoutCategoryInput
  }

  export type product_categoryUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subcategories?: product_subcategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type product_categoryCreateOrConnectWithoutProductsInput = {
    where: product_categoryWhereUniqueInput
    create: XOR<product_categoryCreateWithoutProductsInput, product_categoryUncheckedCreateWithoutProductsInput>
  }

  export type product_subcategoryCreateWithoutProductsInput = {
    name: string
    slug: string
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: product_categoryCreateNestedOneWithoutSubcategoriesInput
  }

  export type product_subcategoryUncheckedCreateWithoutProductsInput = {
    id?: number
    categoryId: number
    name: string
    slug: string
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type product_subcategoryCreateOrConnectWithoutProductsInput = {
    where: product_subcategoryWhereUniqueInput
    create: XOR<product_subcategoryCreateWithoutProductsInput, product_subcategoryUncheckedCreateWithoutProductsInput>
  }

  export type orderitemCreateWithoutProductInput = {
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
    order: orderCreateNestedOneWithoutOrderitemInput
    productvariant?: productvariantCreateNestedOneWithoutOrderitemInput
  }

  export type orderitemUncheckedCreateWithoutProductInput = {
    id?: number
    orderId: number
    variantId?: number | null
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemCreateOrConnectWithoutProductInput = {
    where: orderitemWhereUniqueInput
    create: XOR<orderitemCreateWithoutProductInput, orderitemUncheckedCreateWithoutProductInput>
  }

  export type orderitemCreateManyProductInputEnvelope = {
    data: orderitemCreateManyProductInput | orderitemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type productvariantCreateWithoutProductInput = {
    variantName: string
    price: Decimal | DecimalJsLike | number | string
    isDefault?: boolean
    orderitem?: orderitemCreateNestedManyWithoutProductvariantInput
  }

  export type productvariantUncheckedCreateWithoutProductInput = {
    id?: number
    variantName: string
    price: Decimal | DecimalJsLike | number | string
    isDefault?: boolean
    orderitem?: orderitemUncheckedCreateNestedManyWithoutProductvariantInput
  }

  export type productvariantCreateOrConnectWithoutProductInput = {
    where: productvariantWhereUniqueInput
    create: XOR<productvariantCreateWithoutProductInput, productvariantUncheckedCreateWithoutProductInput>
  }

  export type productvariantCreateManyProductInputEnvelope = {
    data: productvariantCreateManyProductInput | productvariantCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type product_categoryUpsertWithoutProductsInput = {
    update: XOR<product_categoryUpdateWithoutProductsInput, product_categoryUncheckedUpdateWithoutProductsInput>
    create: XOR<product_categoryCreateWithoutProductsInput, product_categoryUncheckedCreateWithoutProductsInput>
    where?: product_categoryWhereInput
  }

  export type product_categoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: product_categoryWhereInput
    data: XOR<product_categoryUpdateWithoutProductsInput, product_categoryUncheckedUpdateWithoutProductsInput>
  }

  export type product_categoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcategories?: product_subcategoryUpdateManyWithoutCategoryNestedInput
  }

  export type product_categoryUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcategories?: product_subcategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type product_subcategoryUpsertWithoutProductsInput = {
    update: XOR<product_subcategoryUpdateWithoutProductsInput, product_subcategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<product_subcategoryCreateWithoutProductsInput, product_subcategoryUncheckedCreateWithoutProductsInput>
    where?: product_subcategoryWhereInput
  }

  export type product_subcategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: product_subcategoryWhereInput
    data: XOR<product_subcategoryUpdateWithoutProductsInput, product_subcategoryUncheckedUpdateWithoutProductsInput>
  }

  export type product_subcategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: product_categoryUpdateOneRequiredWithoutSubcategoriesNestedInput
  }

  export type product_subcategoryUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderitemUpsertWithWhereUniqueWithoutProductInput = {
    where: orderitemWhereUniqueInput
    update: XOR<orderitemUpdateWithoutProductInput, orderitemUncheckedUpdateWithoutProductInput>
    create: XOR<orderitemCreateWithoutProductInput, orderitemUncheckedCreateWithoutProductInput>
  }

  export type orderitemUpdateWithWhereUniqueWithoutProductInput = {
    where: orderitemWhereUniqueInput
    data: XOR<orderitemUpdateWithoutProductInput, orderitemUncheckedUpdateWithoutProductInput>
  }

  export type orderitemUpdateManyWithWhereWithoutProductInput = {
    where: orderitemScalarWhereInput
    data: XOR<orderitemUpdateManyMutationInput, orderitemUncheckedUpdateManyWithoutProductInput>
  }

  export type productvariantUpsertWithWhereUniqueWithoutProductInput = {
    where: productvariantWhereUniqueInput
    update: XOR<productvariantUpdateWithoutProductInput, productvariantUncheckedUpdateWithoutProductInput>
    create: XOR<productvariantCreateWithoutProductInput, productvariantUncheckedCreateWithoutProductInput>
  }

  export type productvariantUpdateWithWhereUniqueWithoutProductInput = {
    where: productvariantWhereUniqueInput
    data: XOR<productvariantUpdateWithoutProductInput, productvariantUncheckedUpdateWithoutProductInput>
  }

  export type productvariantUpdateManyWithWhereWithoutProductInput = {
    where: productvariantScalarWhereInput
    data: XOR<productvariantUpdateManyMutationInput, productvariantUncheckedUpdateManyWithoutProductInput>
  }

  export type productvariantScalarWhereInput = {
    AND?: productvariantScalarWhereInput | productvariantScalarWhereInput[]
    OR?: productvariantScalarWhereInput[]
    NOT?: productvariantScalarWhereInput | productvariantScalarWhereInput[]
    id?: IntFilter<"productvariant"> | number
    productId?: IntFilter<"productvariant"> | number
    variantName?: StringFilter<"productvariant"> | string
    price?: DecimalFilter<"productvariant"> | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFilter<"productvariant"> | boolean
  }

  export type productCreateWithoutCategoryInput = {
    name: string
    slug: string
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    subcategory?: product_subcategoryCreateNestedOneWithoutProductsInput
    orderitem?: orderitemCreateNestedManyWithoutProductInput
    productvariant?: productvariantCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    slug: string
    subcategoryId?: number | null
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    orderitem?: orderitemUncheckedCreateNestedManyWithoutProductInput
    productvariant?: productvariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutCategoryInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput>
  }

  export type productCreateManyCategoryInputEnvelope = {
    data: productCreateManyCategoryInput | productCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type product_subcategoryCreateWithoutCategoryInput = {
    name: string
    slug: string
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productCreateNestedManyWithoutSubcategoryInput
  }

  export type product_subcategoryUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    slug: string
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productUncheckedCreateNestedManyWithoutSubcategoryInput
  }

  export type product_subcategoryCreateOrConnectWithoutCategoryInput = {
    where: product_subcategoryWhereUniqueInput
    create: XOR<product_subcategoryCreateWithoutCategoryInput, product_subcategoryUncheckedCreateWithoutCategoryInput>
  }

  export type product_subcategoryCreateManyCategoryInputEnvelope = {
    data: product_subcategoryCreateManyCategoryInput | product_subcategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type productUpsertWithWhereUniqueWithoutCategoryInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutCategoryInput, productUncheckedUpdateWithoutCategoryInput>
    create: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput>
  }

  export type productUpdateWithWhereUniqueWithoutCategoryInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutCategoryInput, productUncheckedUpdateWithoutCategoryInput>
  }

  export type productUpdateManyWithWhereWithoutCategoryInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutCategoryInput>
  }

  export type productScalarWhereInput = {
    AND?: productScalarWhereInput | productScalarWhereInput[]
    OR?: productScalarWhereInput[]
    NOT?: productScalarWhereInput | productScalarWhereInput[]
    id?: IntFilter<"product"> | number
    name?: StringFilter<"product"> | string
    slug?: StringFilter<"product"> | string
    categoryId?: IntFilter<"product"> | number
    subcategoryId?: IntNullableFilter<"product"> | number | null
    isAddon?: BoolFilter<"product"> | boolean
    isVisible?: BoolFilter<"product"> | boolean
    description?: StringNullableFilter<"product"> | string | null
    heroImage?: StringNullableFilter<"product"> | string | null
    status?: BoolFilter<"product"> | boolean
    createdAt?: DateTimeFilter<"product"> | Date | string
    updatedAt?: DateTimeFilter<"product"> | Date | string
    isHot?: BoolFilter<"product"> | boolean
    ingredients?: StringNullableFilter<"product"> | string | null
    shelfLife?: StringNullableFilter<"product"> | string | null
    flavorProfile?: StringNullableFilter<"product"> | string | null
  }

  export type product_subcategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: product_subcategoryWhereUniqueInput
    update: XOR<product_subcategoryUpdateWithoutCategoryInput, product_subcategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<product_subcategoryCreateWithoutCategoryInput, product_subcategoryUncheckedCreateWithoutCategoryInput>
  }

  export type product_subcategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: product_subcategoryWhereUniqueInput
    data: XOR<product_subcategoryUpdateWithoutCategoryInput, product_subcategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type product_subcategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: product_subcategoryScalarWhereInput
    data: XOR<product_subcategoryUpdateManyMutationInput, product_subcategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type product_subcategoryScalarWhereInput = {
    AND?: product_subcategoryScalarWhereInput | product_subcategoryScalarWhereInput[]
    OR?: product_subcategoryScalarWhereInput[]
    NOT?: product_subcategoryScalarWhereInput | product_subcategoryScalarWhereInput[]
    id?: IntFilter<"product_subcategory"> | number
    categoryId?: IntFilter<"product_subcategory"> | number
    name?: StringFilter<"product_subcategory"> | string
    slug?: StringFilter<"product_subcategory"> | string
    orderIndex?: IntNullableFilter<"product_subcategory"> | number | null
    createdAt?: DateTimeFilter<"product_subcategory"> | Date | string
    updatedAt?: DateTimeFilter<"product_subcategory"> | Date | string
  }

  export type product_categoryCreateWithoutSubcategoriesInput = {
    name: string
    slug: string
    description?: string | null
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productCreateNestedManyWithoutCategoryInput
  }

  export type product_categoryUncheckedCreateWithoutSubcategoriesInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: productUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type product_categoryCreateOrConnectWithoutSubcategoriesInput = {
    where: product_categoryWhereUniqueInput
    create: XOR<product_categoryCreateWithoutSubcategoriesInput, product_categoryUncheckedCreateWithoutSubcategoriesInput>
  }

  export type productCreateWithoutSubcategoryInput = {
    name: string
    slug: string
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    category: product_categoryCreateNestedOneWithoutProductsInput
    orderitem?: orderitemCreateNestedManyWithoutProductInput
    productvariant?: productvariantCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutSubcategoryInput = {
    id?: number
    name: string
    slug: string
    categoryId: number
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    orderitem?: orderitemUncheckedCreateNestedManyWithoutProductInput
    productvariant?: productvariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutSubcategoryInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutSubcategoryInput, productUncheckedCreateWithoutSubcategoryInput>
  }

  export type productCreateManySubcategoryInputEnvelope = {
    data: productCreateManySubcategoryInput | productCreateManySubcategoryInput[]
    skipDuplicates?: boolean
  }

  export type product_categoryUpsertWithoutSubcategoriesInput = {
    update: XOR<product_categoryUpdateWithoutSubcategoriesInput, product_categoryUncheckedUpdateWithoutSubcategoriesInput>
    create: XOR<product_categoryCreateWithoutSubcategoriesInput, product_categoryUncheckedCreateWithoutSubcategoriesInput>
    where?: product_categoryWhereInput
  }

  export type product_categoryUpdateToOneWithWhereWithoutSubcategoriesInput = {
    where?: product_categoryWhereInput
    data: XOR<product_categoryUpdateWithoutSubcategoriesInput, product_categoryUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type product_categoryUpdateWithoutSubcategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productUpdateManyWithoutCategoryNestedInput
  }

  export type product_categoryUncheckedUpdateWithoutSubcategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type productUpsertWithWhereUniqueWithoutSubcategoryInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutSubcategoryInput, productUncheckedUpdateWithoutSubcategoryInput>
    create: XOR<productCreateWithoutSubcategoryInput, productUncheckedCreateWithoutSubcategoryInput>
  }

  export type productUpdateWithWhereUniqueWithoutSubcategoryInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutSubcategoryInput, productUncheckedUpdateWithoutSubcategoryInput>
  }

  export type productUpdateManyWithWhereWithoutSubcategoryInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutSubcategoryInput>
  }

  export type orderitemCreateWithoutProductvariantInput = {
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
    order: orderCreateNestedOneWithoutOrderitemInput
    product: productCreateNestedOneWithoutOrderitemInput
  }

  export type orderitemUncheckedCreateWithoutProductvariantInput = {
    id?: number
    orderId: number
    productId: number
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemCreateOrConnectWithoutProductvariantInput = {
    where: orderitemWhereUniqueInput
    create: XOR<orderitemCreateWithoutProductvariantInput, orderitemUncheckedCreateWithoutProductvariantInput>
  }

  export type orderitemCreateManyProductvariantInputEnvelope = {
    data: orderitemCreateManyProductvariantInput | orderitemCreateManyProductvariantInput[]
    skipDuplicates?: boolean
  }

  export type productCreateWithoutProductvariantInput = {
    name: string
    slug: string
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    category: product_categoryCreateNestedOneWithoutProductsInput
    subcategory?: product_subcategoryCreateNestedOneWithoutProductsInput
    orderitem?: orderitemCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutProductvariantInput = {
    id?: number
    name: string
    slug: string
    categoryId: number
    subcategoryId?: number | null
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
    orderitem?: orderitemUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutProductvariantInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutProductvariantInput, productUncheckedCreateWithoutProductvariantInput>
  }

  export type orderitemUpsertWithWhereUniqueWithoutProductvariantInput = {
    where: orderitemWhereUniqueInput
    update: XOR<orderitemUpdateWithoutProductvariantInput, orderitemUncheckedUpdateWithoutProductvariantInput>
    create: XOR<orderitemCreateWithoutProductvariantInput, orderitemUncheckedCreateWithoutProductvariantInput>
  }

  export type orderitemUpdateWithWhereUniqueWithoutProductvariantInput = {
    where: orderitemWhereUniqueInput
    data: XOR<orderitemUpdateWithoutProductvariantInput, orderitemUncheckedUpdateWithoutProductvariantInput>
  }

  export type orderitemUpdateManyWithWhereWithoutProductvariantInput = {
    where: orderitemScalarWhereInput
    data: XOR<orderitemUpdateManyMutationInput, orderitemUncheckedUpdateManyWithoutProductvariantInput>
  }

  export type productUpsertWithoutProductvariantInput = {
    update: XOR<productUpdateWithoutProductvariantInput, productUncheckedUpdateWithoutProductvariantInput>
    create: XOR<productCreateWithoutProductvariantInput, productUncheckedCreateWithoutProductvariantInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutProductvariantInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutProductvariantInput, productUncheckedUpdateWithoutProductvariantInput>
  }

  export type productUpdateWithoutProductvariantInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    category?: product_categoryUpdateOneRequiredWithoutProductsNestedInput
    subcategory?: product_subcategoryUpdateOneWithoutProductsNestedInput
    orderitem?: orderitemUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutProductvariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    orderitem?: orderitemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ArticleSubCategoryCreateManyCategoryInput = {
    id?: number
    name: string
    slug: string
    orderIndex: number
  }

  export type ArticleCreateManyCategoryInput = {
    id?: number
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl?: string | null
    publishedAt?: Date | string
    subCategoryId: number
  }

  export type ArticleSubCategoryUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    articles?: ArticleUpdateManyWithoutSubcategoryNestedInput
  }

  export type ArticleSubCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    articles?: ArticleUncheckedUpdateManyWithoutSubcategoryNestedInput
  }

  export type ArticleSubCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
  }

  export type ArticleUpdateWithoutCategoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcategory?: ArticleSubCategoryUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategoryId?: IntFieldUpdateOperationsInput | number
  }

  export type ArticleUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategoryId?: IntFieldUpdateOperationsInput | number
  }

  export type ArticleCreateManySubcategoryInput = {
    id?: number
    title: string
    slug: string
    excerpt: string
    content: string
    coverImageUrl?: string | null
    publishedAt?: Date | string
    categoryId: number
  }

  export type ArticleUpdateWithoutSubcategoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ArticleCategoryUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateWithoutSubcategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type ArticleUncheckedUpdateManyWithoutSubcategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type courseintentCreateManyCourseInput = {
    id?: number
    name: string
    email: string
    phone: string
    message?: string | null
    createdAt?: Date | string
  }

  export type courseintentUpdateWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type courseintentUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type courseintentUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderitemCreateManyOrderInput = {
    id?: number
    productId: number
    variantId?: number | null
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemUpdateWithoutOrderInput = {
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
    product?: productUpdateOneRequiredWithoutOrderitemNestedInput
    productvariant?: productvariantUpdateOneWithoutOrderitemNestedInput
  }

  export type orderitemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: NullableIntFieldUpdateOperationsInput | number | null
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: NullableIntFieldUpdateOperationsInput | number | null
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemCreateManyProductInput = {
    id?: number
    orderId: number
    variantId?: number | null
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type productvariantCreateManyProductInput = {
    id?: number
    variantName: string
    price: Decimal | DecimalJsLike | number | string
    isDefault?: boolean
  }

  export type orderitemUpdateWithoutProductInput = {
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
    order?: orderUpdateOneRequiredWithoutOrderitemNestedInput
    productvariant?: productvariantUpdateOneWithoutOrderitemNestedInput
  }

  export type orderitemUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    variantId?: NullableIntFieldUpdateOperationsInput | number | null
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    variantId?: NullableIntFieldUpdateOperationsInput | number | null
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type productvariantUpdateWithoutProductInput = {
    variantName?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    orderitem?: orderitemUpdateManyWithoutProductvariantNestedInput
  }

  export type productvariantUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    variantName?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    orderitem?: orderitemUncheckedUpdateManyWithoutProductvariantNestedInput
  }

  export type productvariantUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    variantName?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productCreateManyCategoryInput = {
    id?: number
    name: string
    slug: string
    subcategoryId?: number | null
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
  }

  export type product_subcategoryCreateManyCategoryInput = {
    id?: number
    name: string
    slug: string
    orderIndex?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    subcategory?: product_subcategoryUpdateOneWithoutProductsNestedInput
    orderitem?: orderitemUpdateManyWithoutProductNestedInput
    productvariant?: productvariantUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    orderitem?: orderitemUncheckedUpdateManyWithoutProductNestedInput
    productvariant?: productvariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_subcategoryUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productUpdateManyWithoutSubcategoryNestedInput
  }

  export type product_subcategoryUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productUncheckedUpdateManyWithoutSubcategoryNestedInput
  }

  export type product_subcategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productCreateManySubcategoryInput = {
    id?: number
    name: string
    slug: string
    categoryId: number
    isAddon?: boolean
    isVisible?: boolean
    description?: string | null
    heroImage?: string | null
    status?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isHot?: boolean
    ingredients?: string | null
    shelfLife?: string | null
    flavorProfile?: string | null
  }

  export type productUpdateWithoutSubcategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    category?: product_categoryUpdateOneRequiredWithoutProductsNestedInput
    orderitem?: orderitemUpdateManyWithoutProductNestedInput
    productvariant?: productvariantUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutSubcategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
    orderitem?: orderitemUncheckedUpdateManyWithoutProductNestedInput
    productvariant?: productvariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutSubcategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    isAddon?: BoolFieldUpdateOperationsInput | boolean
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    heroImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isHot?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    flavorProfile?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type orderitemCreateManyProductvariantInput = {
    id?: number
    orderId: number
    productId: number
    qty: number
    unitPrice: Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemUpdateWithoutProductvariantInput = {
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
    order?: orderUpdateOneRequiredWithoutOrderitemNestedInput
    product?: productUpdateOneRequiredWithoutOrderitemNestedInput
  }

  export type orderitemUncheckedUpdateWithoutProductvariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }

  export type orderitemUncheckedUpdateManyWithoutProductvariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    addOnJson?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}