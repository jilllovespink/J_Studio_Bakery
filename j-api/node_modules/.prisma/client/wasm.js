
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ArticleCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  orderIndex: 'orderIndex'
};

exports.Prisma.ArticleSubCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  orderIndex: 'orderIndex',
  categoryId: 'categoryId'
};

exports.Prisma.ArticleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  excerpt: 'excerpt',
  content: 'content',
  coverImageUrl: 'coverImageUrl',
  publishedAt: 'publishedAt',
  categoryId: 'categoryId',
  subCategoryId: 'subCategoryId'
};

exports.Prisma.BannersScalarFieldEnum = {
  id: 'id',
  image: 'image',
  title: 'title',
  buttonText: 'buttonText',
  buttonLink: 'buttonLink',
  created_at: 'created_at',
  fontColor: 'fontColor'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  coverImage: 'coverImage',
  description: 'description',
  price: 'price',
  capacity: 'capacity',
  status: 'status',
  startAt: 'startAt',
  durationMinutes: 'durationMinutes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseintentScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.Discount_codeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  value: 'value',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNo: 'orderNo',
  buyerName: 'buyerName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  shippingMethod: 'shippingMethod',
  subtotal: 'subtotal',
  shippingFee: 'shippingFee',
  discount: 'discount',
  totalAmount: 'totalAmount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentInfo: 'paymentInfo',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderitemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  variantId: 'variantId',
  qty: 'qty',
  unitPrice: 'unitPrice',
  addOnJson: 'addOnJson'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  categoryId: 'categoryId',
  subcategoryId: 'subcategoryId',
  isAddon: 'isAddon',
  isVisible: 'isVisible',
  description: 'description',
  heroImage: 'heroImage',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isHot: 'isHot',
  ingredients: 'ingredients',
  shelfLife: 'shelfLife',
  flavorProfile: 'flavorProfile'
};

exports.Prisma.Product_categoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  orderIndex: 'orderIndex',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Product_subcategoryScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  slug: 'slug',
  orderIndex: 'orderIndex',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductvariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  variantName: 'variantName',
  price: 'price',
  isDefault: 'isDefault'
};

exports.Prisma.NewsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  image: 'image',
  date: 'date',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.ArticleCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug'
};

exports.Prisma.ArticleSubCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ArticleOrderByRelevanceFieldEnum = {
  title: 'title',
  slug: 'slug',
  excerpt: 'excerpt',
  content: 'content',
  coverImageUrl: 'coverImageUrl'
};

exports.Prisma.bannersOrderByRelevanceFieldEnum = {
  image: 'image',
  title: 'title',
  buttonText: 'buttonText',
  buttonLink: 'buttonLink'
};

exports.Prisma.courseOrderByRelevanceFieldEnum = {
  title: 'title',
  slug: 'slug',
  coverImage: 'coverImage',
  description: 'description'
};

exports.Prisma.courseintentOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message'
};

exports.Prisma.discount_codeOrderByRelevanceFieldEnum = {
  code: 'code',
  type: 'type'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.orderOrderByRelevanceFieldEnum = {
  orderNo: 'orderNo',
  buyerName: 'buyerName',
  email: 'email',
  phone: 'phone',
  address: 'address'
};

exports.Prisma.productOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description',
  heroImage: 'heroImage',
  ingredients: 'ingredients',
  shelfLife: 'shelfLife',
  flavorProfile: 'flavorProfile'
};

exports.Prisma.product_categoryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description'
};

exports.Prisma.product_subcategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug'
};

exports.Prisma.productvariantOrderByRelevanceFieldEnum = {
  variantName: 'variantName'
};

exports.Prisma.newsOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content',
  image: 'image'
};
exports.banners_fontColor = exports.$Enums.banners_fontColor = {
  light: 'light',
  dark: 'dark'
};

exports.order_shippingMethod = exports.$Enums.order_shippingMethod = {
  home: 'home',
  pickup: 'pickup'
};

exports.order_status = exports.$Enums.order_status = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.order_paymentMethod = exports.$Enums.order_paymentMethod = {
  ECPAY_CREDIT: 'ECPAY_CREDIT',
  TAPPAY_CREDIT: 'TAPPAY_CREDIT',
  CASH: 'CASH'
};

exports.Prisma.ModelName = {
  ArticleCategory: 'ArticleCategory',
  ArticleSubCategory: 'ArticleSubCategory',
  Article: 'Article',
  banners: 'banners',
  course: 'course',
  courseintent: 'courseintent',
  discount_code: 'discount_code',
  order: 'order',
  orderitem: 'orderitem',
  product: 'product',
  product_category: 'product_category',
  product_subcategory: 'product_subcategory',
  productvariant: 'productvariant',
  news: 'news'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
